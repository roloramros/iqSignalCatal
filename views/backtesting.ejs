<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Backtesting</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      margin: 0;
      font-family: sans-serif;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }

    .candle-strip {
      display: flex;
      justify-content: center;
      padding: 15px;
      background: #f4f4f4;
      gap: 13px;
      flex-wrap: wrap;
    }

    .candle {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.6), rgba(0, 0, 0, 0.2));
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
      border: 2px solid #000;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      font-weight: bold;
      color: #fff;
      transition: transform 0.2s, box-shadow 0.2s;
    }

    .candle:hover {
      transform: scale(1.1);
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.4);
    }

    .left-panel {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      width: 75%;
      overflow-y: auto;
    }

    .right-panel {
      width: 25%;
    }

    .patron {
      width: 100%;
    }

    .patron h3 {
      margin: 5px 0;
      text-align: left;
      font-size: 17px;
      font-weight: bold;
    }

    .main-container {
      display: flex;
      flex: 1;
    }

    .cuadros {
      display: grid;
      grid-template-columns: repeat(9, 35px);
      gap: 3px;
    }

    .cuadro {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 35px;
      height: 25px;
      border: 2px solid black;
      background-color: white;
      font-weight: bold;
      color: white;
    }

    #popup-señal {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: #222;
      color: #fff;
      padding: 20px 30px;
      border-radius: 10px;
      box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);
      z-index: 9999;
      min-width: 300px;
      max-width: 90%;
      display: none;
    }

    .popup-content {
      position: relative;
    }

    .cerrar-popup {
      position: absolute;
      top: 5px;
      right: 8px;
      background: transparent;
      color: #fff;
      border: none;
      font-size: 18px;
      cursor: pointer;
    }

    #popup-texto {
      font-size: 18px;
      text-align: center;
      padding-top: 10px;
    }

    #popup-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .popup-alert {
      background: #222;
      color: #fff;
      padding: 15px 20px;
      border-radius: 8px;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
      min-width: 250px;
      max-width: 300px;
      position: relative;
      animation: slideIn 0.3s ease-out;
    }

    .popup-texto {
      font-size: 14px;
      text-align: left;
    }
  </style>
</head>

<body>
  <h2 class="mb-3">Backtesting</h2>

  <form id="formVelas" action="/cargar-velas" method="POST" class="d-flex flex-wrap align-items-end gap-2">
    <div>
      <label for="fechaInicio" class="form-label mb-1">Inicio</label>
      <input type="datetime-local" id="fechaInicio" name="fechaInicio" class="form-control form-control-sm" required>
    </div>

    <div>
      <label for="fechaFin" class="form-label mb-1">Fin</label>
      <input type="datetime-local" id="fechaFin" name="fechaFin" class="form-control form-control-sm" required>
    </div>

    <div>
      <label for="selectorPar" class="form-label mb-1">Par</label>
      <select id="selectorPar" name="par" class="form-select form-select-sm" required>
        <option value="EURUSD-OTC">EUR/USD OTC</option>
        <option value="EURGBP-OTC">EUR/GBP OTC</option>
        <option value="USDCHF-OTC">USD/CHF OTC</option>
        <option value="AUDCAD-OTC">AUD/CAD OTC</option>
        <option value="GBPUSD-OTC">GBP/USD OTC</option>
      </select>
    </div>

    <div class="d-flex flex-column">
      <label class="form-label invisible mb-1">.</label>
      <div class="d-flex gap-1">
        <button class="btn btn-primary btn-sm" type="submit">Cargar Velas</button>
        <button class="btn btn-secondary btn-sm" type="button" id="btnSiguiente">Siguiente</button>
        <button class="btn btn-success btn-sm" type="button" id="btnAutomatico">▶ Automático</button>
        <input type="number" id="tiempoEspera" value="1" min="0.2" max="60" step="0.1"
          style="width:45px; margin-left:5px;">
        <span>seg</span>
      </div>
    </div>


  </form>

  <div id="indicador-carga" class="mt-3" style="display: none;">
    <div class="d-flex align-items-center gap-2">
      <div class="spinner-border text-primary" role="status"></div>
      <strong>Cargando velas, por favor espera...</strong>
    </div>
  </div>

  <div id="indicadorHoraActual" style="font-size: 20px; font-weight: bold; margin-bottom: 10px; text-align: center;">
    <span id="horaAnalizada">--:--</span>
  </div>

  <div class="candle-strip mt-4" id="candle-strip">
    <% for(let i=0; i < 15; i++) { %>
      <div class="candle"></div>
      <% } %>

  </div>

  <div class="main-container">
    <!-- PANEL DE PATRONES -->
    <div class="left-panel mt-4"
      style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;">
      <!-- Los patrones se insertarán dinámicamente aquí con JS -->
    </div>

    <!-- PANEL DERECHO: GUÍA DE INTERPRETACIÓN -->
    <div class="right-panel">
      <table id="tablaPatrones" class="table table-hover table-striped table-bordered">

        <thead>
          <tr>
            <th>Patrón</th>
            <th colspan="3">Vela verde</th>
            <th colspan="3">Vela roja</th>
          </tr>
          <tr>
            <th></th>
            <th>Dir</th>
            <th>G1</th>
            <th>G2</th>
            <th>Dir</th>
            <th>G1</th>
            <th>G2</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>MHI Minoría</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>

          <tr>
            <td>MHI 2 Minoría</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>MHI 3 Minoría</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>Millón Minoría</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>MHI Mayoría</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>MHI 2 Mayoría</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>MHI 3 Mayoría</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>Millón Mayoría</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>Torres Gemelas</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>Mejor de 3</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>Tres Mosqueteros</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>Patrón Impar</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>Tres Vecinos</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>Patron 3x1</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
          <tr>
            <td>Patrón 23</td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
            <td> </td>
          </tr>
        </tbody>
      </table>
      <div id="estadisticas-globales"
        style="padding: 10px; background-color: #f0f0f0; border-top: 2px solid #ccc; font-size: 14px; line-height: 1.6;">
        <!-- Las estadísticas aparecerán aquí -->
      </div>


    </div>
  </div>

  <div id="popup-container"></div>

  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.39.5/dist/umd/supabase.min.js"></script>
  <!-- SheetJS -->
  <script src="https://cdn.jsdelivr.net/npm/xlsx/dist/xlsx.full.min.js"></script>

  <script>
    //Codigo del boton Cargar Velas
    const supabaseUrl = "<%= process.env.SUPABASE_URL %>";
    const supabaseKey = "<%= process.env.SUPABASE_KEY %>";
    let supabase = window.supabase.createClient(supabaseUrl, supabaseKey);

    async function cargarVelasDesdeSupabase() {
      const { data, error } = await supabase
        .from("backtesting")
        .select("*")
        .order("id", { ascending: true }); // ✅ toda la tabla, en orden cronológico

      if (error || !data) {
        console.error("❌ Error cargando velas:", error);
        alert("❌ Error al mostrar las velas.");
        return;
      }
      velasCargadas = data;
      // === NUEVO CÓDIGO ===
      const fechaInput = document.getElementById("fechaInicio").value;
      const horaObjetivo = fechaInput.split("T")[1] + ":00"; // ejemplo "11:50:00"
      for (let i = 0; i < velasCargadas.length; i++) {
        if (velasCargadas[i].start_time === horaObjetivo) {
          // Cortar el array desde la coincidencia
          velasCargadas = velasCargadas.slice(i);
          break; // salir del bucle
        }
        mostrarVelasDesdeIndice(i);
        velaActual = velasCargadas[i];
        analizarVelaPorDigito(velaActual);
      }
      for (let j = 0; j <= 14; j++) {
        mostrarVelasDesdeIndice(j);
        velaActual = velasCargadas[j];
        analizarVelaPorDigito(velaActual);
      }
      indiceActual = 14; // Iniciamos con las primeras 15 (0 a 14)
      mostrarVelasDesdeIndice(indiceActual);
    }
  </script>


  <script>
    let horaActual = { horas: 0, minutos: 0 };

    function establecerHoraInicial(horaStr) {
      const partes = horaStr.split("T")[1].split(":");
      let horas = parseInt(partes[0]);
      let minutos = parseInt(partes[1]);

      // Sumar 15 minutos
      minutos += 14;
      if (minutos >= 60) {
        minutos -= 60;
        horas = (horas + 1) % 24;
      }

      horaActual.horas = horas;
      horaActual.minutos = minutos;
      actualizarHoraIndicador();
    }


    function avanzarUnMinuto() {
      horaActual.minutos += 1;
      if (horaActual.minutos >= 60) {
        horaActual.minutos = 0;
        horaActual.horas = (horaActual.horas + 1) % 24;
      }
      actualizarHoraIndicador();
    }

    function actualizarHoraIndicador() {
      const horas = horaActual.horas.toString().padStart(2, '0');
      const minutos = horaActual.minutos.toString().padStart(2, '0');
      document.getElementById("horaAnalizada").innerText = `${horas}:${minutos}`;
    }

    function establecerHoraDesdeInput() {
      const valor = document.getElementById("fechaInicio").value;
      if (valor) {
        establecerHoraInicial(valor);
      }
    }
  </script>




  <script>


    function mostrarVelasDesdeIndice(indice) {
      const container = document.getElementById("candle-strip");
      container.innerHTML = "";

      const inicio = Math.max(0, indice - 14);
      const tramo = velasCargadas.slice(inicio, indice + 1); // total 15 velas

      tramo.forEach(vela => {
        const div = document.createElement("div");
        div.classList.add("candle");

        const color = (vela.candle_color || "gray").toLowerCase().trim();
        div.style.backgroundColor =
          color === "green" ? "green" : color === "red" ? "red" : "gray";

        const minuto = vela.start_time?.split(':')[1] || "00";
        div.innerText = minuto;

        container.appendChild(div);
      });

      // ✅ Actualizamos coloresDigitos con las últimas 10 velas
      coloresDigitos = new Array(10).fill(null); // reset
      tramo.slice(-10).forEach(vela => {
        const color = (vela.candle_color || "gray").toLowerCase().trim();
        const minuto = parseInt(vela.start_time?.split(':')[1] || "0", 10);
        const digito = minuto % 10;
        coloresDigitos[digito] =
          color === "green" ? "green" : color === "red" ? "red" : "gray";
      });
    }


  </script>

  <script>
    let velasCargadas = [];   // Las velas ya descargadas
    let indiceActual = 14;    // Se mostrarán las primeras 15 (0 a 14)
    let coloresDigitos = new Array(10).fill(null); // Inicialmente vacío
    let historicoMHI = [], historicoMHI2 = [], historicoMHI3 = [], historicoMILLONMIN = [];
    let historicoMHIMAY = [], historicoMHI2MAY = [], historicoMHI3MAY = [], historicoMILLONMAY = [];
    let historicoTORRESGEMELAS = [], historicoMEJOR3 = [], historicoMOSQUETEROS = [], historicoPATRONIMPAR = []
    let historicoTRESVECINOS = [], historicoPATRON3X1 = [], historicoPADRON23 = []
    let condicionCoincidencia = null; let velaBuscadaCoincidencia = null;
    let estadoAnteriorPatrones = {};
    let twoLoss = {};
    let threeloss = {};
    let alcanza100 = {};
    let pierde100 = {};
    let dosPerdidasSeguidas = {};
    let tresPerdidasSeguidas = {};
    let cuadranteConDoji = {};
    let alertasExportar = [];

    let confluenciaActiva = false;
    let condicionConfluencia = null;
    let direccionObjetivoConfluencia = null;
    let firstLoss = 0;
  </script>


  <script>
    document.getElementById("formVelas").addEventListener("submit", async function (e) {
      e.preventDefault();

      const form = e.target;
      const formData = new URLSearchParams(new FormData(form));
      const indicador = document.getElementById("indicador-carga");
      indicador.style.display = "block"; // ✅ mostrar indicador

      try {
        const response = await fetch(form.action, {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          }
        });

        const text = await response.text();

        if (!response.ok) throw new Error(text);
        await cargarVelasDesdeSupabase();
      } catch (error) {
        alert("❌ Error al cargar velas: " + error.message);
      } finally {
        indicador.style.display = "none"; // ✅ ocultar indicador
      }
      establecerHoraDesdeInput();


    });


    document.getElementById("btnSiguiente").addEventListener("click", () => {
      if (indiceActual + 1 >= velasCargadas.length) {
        Swal.fire({
          title: '⚠️ No hay más velas disponibles',
          text: '¿Deseas resumir los resultados?',
          icon: 'question',
          showCancelButton: true,
          confirmButtonText: '📊 Sí, resumir',
          cancelButtonText: '❌ No',
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          allowOutsideClick: false
        }).then((result) => {
          if (result.isConfirmed) {
            exportarExcel();
          } else {
            console.log("El usuario decidió no resumir los resultados.");
          }
        });
        return;
      }
      indiceActual++;
      mostrarVelasDesdeIndice(indiceActual);
      velaActual = velasCargadas[indiceActual];
      avanzarUnMinuto();
      analizarVelaPorDigito(velaActual);
      calcularPorcentajeNoPerdidasPorPatron();
      verificaAlertas();

    });


  </script>


  <script>
    let ultimaVela = null;

    function analizarVelaPorDigito(vela) {
      const horaStr = vela.start_time.toString();
      const minuto = parseInt(horaStr.split(':')[1] || '0');
      const digito = minuto % 10;
      const funciones = [
        digito0, digito1, digito2, digito3, digito4,
        digito5, digito6, digito7, digito8, digito9
      ];

      const funcion = funciones[digito];
      if (funcion) funcion(vela);
    }

    function digito0(vela) {
      ultimaVela = coloresDigitos[0];
      ['MHI Minoría', 'MHI Mayoría', 'Millón Minoría', 'Millón Mayoría'].forEach(patron => {
        getCelda(patron, 2).style.backgroundColor = '';
        getCelda(patron, 5).style.backgroundColor = '';
      });
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario === coloresDigitos[0]) {
          // Gana MHI Minoría, pierde MHI Mayoría
          if (minoritario === 'green') {
            getCelda('MHI Mayoría', 3).style.backgroundColor = 'red';
          } else if (minoritario === 'red') {
            getCelda('MHI Mayoría', 6).style.backgroundColor = 'green';
          }
        } else {
          // Gana MHI Mayoría, pierde MHI Minoría
          if (minoritario === 'green') {
            getCelda('MHI Minoría', 6).style.backgroundColor = 'green';
          } else if (minoritario === 'red') {
            getCelda('MHI Minoría', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analisis Millon Minoria y Millon Minoria
      if (coloresDigitos[5] !== 'gray' && coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {    //Para si hay un doji no hacer nada
        const minoritario = colorMenosRepetido([5, 6, 7, 8, 9]);
        if (minoritario === coloresDigitos[0]) {   //Se gana mill minoria y se pierde mill mayoria
          if (minoritario === 'green') {
            getCelda('Millón Mayoría', 3).style.backgroundColor = 'red';
          }
          if (minoritario === 'red') {
            getCelda('Millón Mayoría', 6).style.backgroundColor = 'green';
          }
        } else {
          if (minoritario === 'green') {
            getCelda('Millón Minoría', 6).style.backgroundColor = 'green';
          }
          if (minoritario === 'red') {
            getCelda('Millón Minoría', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
      getCelda('MHI 2 Minoría', 1).style.backgroundColor = '';
      getCelda('MHI 2 Minoría', 4).style.backgroundColor = '';
      getCelda('MHI 2 Mayoría', 1).style.backgroundColor = '';
      getCelda('MHI 2 Mayoría', 4).style.backgroundColor = '';
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario === 'green') {
          getCelda('MHI 2 Minoría', 5).style.backgroundColor = 'green';
          getCelda('MHI 2 Mayoría', 2).style.backgroundColor = 'red';
        } else {
          getCelda('MHI 2 Minoría', 2).style.backgroundColor = 'red';
          getCelda('MHI 2 Mayoría', 5).style.backgroundColor = 'green';

        }
      }
      //Analisis Correspondiente a MMHI3 Minoria MHI3 Mayoria
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario === 'red') {
          getCelda('MHI 3 Minoría', 1).style.backgroundColor = 'red';
          getCelda('MHI 3 Minoría', 4).style.backgroundColor = 'red';
          getCelda('MHI 3 Mayoría', 1).style.backgroundColor = 'green';
          getCelda('MHI 3 Mayoría', 4).style.backgroundColor = 'green';
        } else if (minoritario === 'green') {
          getCelda('MHI 3 Minoría', 1).style.backgroundColor = 'green';
          getCelda('MHI 3 Minoría', 4).style.backgroundColor = 'green';
          getCelda('MHI 3 Mayoría', 1).style.backgroundColor = 'red';
          getCelda('MHI 3 Mayoría', 4).style.backgroundColor = 'red';

        }
      }
      //Analasis para Torres Gemelas
      getCelda('Torres Gemelas', 3).style.backgroundColor = '';
      getCelda('Torres Gemelas', 6).style.backgroundColor = '';
      //Analisis correspondiente a TRES VECINOS
      getCelda('Tres Vecinos', 3).style.backgroundColor = '';
      getCelda('Tres Vecinos', 6).style.backgroundColor = '';
      //Analisis correspondiente a PATRON 23
      getCelda('Patrón 23', 1).style.backgroundColor = '';
      getCelda('Patrón 23', 4).style.backgroundColor = '';
      if (coloresDigitos[0] !== 'gray') {
        if (coloresDigitos[0] === 'green') {
          getCelda('Patrón 23', 5).style.backgroundColor = 'green';
        } else {
          getCelda('Patrón 23', 2).style.backgroundColor = 'red';
        }
      }
      //Analasis para MEJOR DE TRES
      if (coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray') {
        const minoritario = colorMenosRepetido([6, 7, 8]);
        if (minoritario === 'green') {
          getCelda('Mejor de 3', 1).style.backgroundColor = 'red';
          getCelda('Mejor de 3', 4).style.backgroundColor = 'red';
        } else {
          getCelda('Mejor de 3', 1).style.backgroundColor = 'green';
          getCelda('Mejor de 3', 4).style.backgroundColor = 'green';
        }
      }
      //Analisis Patron 3x1
      getCelda('Patron 3x1', 3).style.backgroundColor = '';
      getCelda('Patron 3x1', 6).style.backgroundColor = '';
      // Analisis Patron Impar
      if (coloresDigitos[7] !== 'gray') {
        if (coloresDigitos[7] !== coloresDigitos[0]) {
          if (coloresDigitos[7] === 'green') {
            getCelda('Patrón Impar', 2).style.backgroundColor = 'green';
            getCelda('Patrón Impar', 5).style.backgroundColor = 'green';
          } else {
            getCelda('Patrón Impar', 2).style.backgroundColor = 'red';
            getCelda('Patrón Impar', 5).style.backgroundColor = 'red';
          }
        }
      }

      //Analisis de las que pueden ganar en este digito:
      //MHI mayoria y minoria
      if (coloresDigitos[7] === 'gray' || coloresDigitos[8] === 'gray' || coloresDigitos[9] === 'gray') {
        agregarAHistorico(historicoMHI, "E");
        actualizarHistorico("MHI_Minoría", historicoMHI);

        agregarAHistorico(historicoMHIMAY, "E");
        actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
      } else {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario === coloresDigitos[0]) {
          agregarAHistorico(historicoMHI, "D");
          actualizarHistorico("MHI_Minoría", historicoMHI);
        }
        const mayoritario = colorMasRepetido([7, 8, 9]);

        if (mayoritario === coloresDigitos[0]) {
          agregarAHistorico(historicoMHIMAY, "D");
          actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
        }
      }
      //MILLON mayoria y minoria
      if (coloresDigitos[5] === 'gray' || coloresDigitos[6] === 'gray' || coloresDigitos[7] === 'gray' || coloresDigitos[8] === 'gray' || coloresDigitos[9] === 'gray') {
        agregarAHistorico(historicoMILLONMIN, "E");
        actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
        agregarAHistorico(historicoMILLONMAY, "E");
        actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
      } else {
        const minoritario = colorMenosRepetido([5, 6, 7, 8, 9]);
        if (minoritario === coloresDigitos[0]) {
          agregarAHistorico(historicoMILLONMIN, "D");
          actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
        }
        const mayoritario = colorMasRepetido([5, 6, 7, 8, 9]);

        if (mayoritario === coloresDigitos[0]) {
          agregarAHistorico(historicoMILLONMAY, "D");
          actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
        }
      }
      //Torres Gemelas
      if (coloresDigitos[5] !== 'gray') {
        if (coloresDigitos[5] !== coloresDigitos[9] && coloresDigitos[5] === coloresDigitos[0]) {
          agregarAHistorico(historicoTORRESGEMELAS, "G1");
          actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
        }
      }
      //Tres Mosqueteros
      if (coloresDigitos[7] !== 'gray') {
        if (coloresDigitos[7] !== coloresDigitos[8] && coloresDigitos[7] !== coloresDigitos[9] && coloresDigitos[7] === coloresDigitos[0]) {
          agregarAHistorico(historicoMOSQUETEROS, "G2");
          actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
        } else if (coloresDigitos[7] !== coloresDigitos[8] && coloresDigitos[7] !== coloresDigitos[9] && coloresDigitos[7] !== coloresDigitos[0]) {
          agregarAHistorico(historicoMOSQUETEROS, "L");
          actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
        }
      }
      //Patron Impar
      if (coloresDigitos[7] === 'gray') {
        agregarAHistorico(historicoPATRONIMPAR, "E");
        actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
      } else {
        if (coloresDigitos[7] === coloresDigitos[0]) {
          agregarAHistorico(historicoPATRONIMPAR, "D");
          actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
        }
      }
      //Tres Vecinos
      if (coloresDigitos[8] !== 'gray') {
        if (coloresDigitos[8] !== coloresDigitos[9] && coloresDigitos[8] === coloresDigitos[0]) {
          agregarAHistorico(historicoTRESVECINOS, "G1");
          actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
        }
      }
      //Patron 3x1
      if (coloresDigitos[5] !== 'gray' && coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray') {
        const minoritario = colorMenosRepetido([5, 6, 7]);
        if (minoritario !== coloresDigitos[9] && minoritario === coloresDigitos[0]) {
          agregarAHistorico(historicoPATRON3X1, "G1");
          actualizarHistorico("Patron_3x1", historicoPATRON3X1);
        }
      }
    }

    function digito1(vela) {
      ultimaVela = coloresDigitos[1];
      ['MHI Minoría', 'MHI Mayoría', 'Millón Minoría', 'Millón Mayoría'].forEach(patron => {
        getCelda(patron, 3).style.backgroundColor = '';
        getCelda(patron, 6).style.backgroundColor = '';
      });
      //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
      getCelda('MHI 2 Minoría', 2).style.backgroundColor = '';
      getCelda('MHI 2 Minoría', 5).style.backgroundColor = '';
      getCelda('MHI 2 Mayoría', 2).style.backgroundColor = '';
      getCelda('MHI 2 Mayoría', 5).style.backgroundColor = '';
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario === coloresDigitos[1]) {
          if (minoritario === 'green') {
            getCelda('MHI 2 Mayoría', 3).style.backgroundColor = 'red';
          }
          else {
            getCelda('MHI 2 Mayoría', 6).style.backgroundColor = 'green';
          }
        } else {
          if (minoritario === 'green') {
            getCelda('MHI 2 Minoría', 6).style.backgroundColor = 'green';
          }
          else {
            getCelda('MHI 2 Minoría', 3).style.backgroundColor = 'red';
          }
        }
      }//Analisis Correspondiente a MMHI3 Minoria MHI3 Mayoria
      getCelda('MHI 3 Minoría', 1).style.backgroundColor = '';
      getCelda('MHI 3 Minoría', 4).style.backgroundColor = '';
      getCelda('MHI 3 Mayoría', 1).style.backgroundColor = '';
      getCelda('MHI 3 Mayoría', 4).style.backgroundColor = '';
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario === 'green') {
          getCelda('MHI 3 Minoría', 5).style.backgroundColor = 'green';
          getCelda('MHI 3 Mayoría', 2).style.backgroundColor = 'red';
        } else {
          getCelda('MHI 3 Minoría', 2).style.backgroundColor = 'red';
          getCelda('MHI 3 Mayoría', 5).style.backgroundColor = 'green';
        }
      }
      //Analisis correspondiente a TRES MOSQUETEROS
      getCelda('Tres Mosqueteros', 1).style.backgroundColor = 'green';
      getCelda('Tres Mosqueteros', 4).style.backgroundColor = 'red';
      //Analisis correspondiente a PATRON 23
      getCelda('Patrón 23', 2).style.backgroundColor = '';
      getCelda('Patrón 23', 5).style.backgroundColor = '';
      if (coloresDigitos[0] !== 'gray') {
        if (coloresDigitos[0] !== coloresDigitos[1]) {
          if (coloresDigitos[0] === 'green') {
            getCelda('Patrón 23', 6).style.backgroundColor = 'green';
          } else {
            getCelda('Patrón 23', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analasis para MEJOR DE TRES
      getCelda('Mejor de 3', 1).style.backgroundColor = '';
      getCelda('Mejor de 3', 4).style.backgroundColor = '';
      if (coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray') {
        const minoritario = colorMenosRepetido([6, 7, 8]);
        if (minoritario === "green") {
          getCelda('Mejor de 3', 2).style.backgroundColor = 'red';
        } else {
          getCelda('Mejor de 3', 5).style.backgroundColor = 'green';
        }
      }
      // Analisis Patron Impar
      getCelda('Patrón Impar', 2).style.backgroundColor = '';
      getCelda('Patrón Impar', 5).style.backgroundColor = '';

      //Analisis de las que pueden ganar en este digito:
      //MHI mayoria y minoria
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario !== coloresDigitos[0] && minoritario === coloresDigitos[1]) {
          agregarAHistorico(historicoMHI, "G1");
          actualizarHistorico("MHI_Minoría", historicoMHI);
        }
        const mayoritario = colorMasRepetido([7, 8, 9]);
        if (mayoritario !== coloresDigitos[0] && mayoritario === coloresDigitos[1]) {
          agregarAHistorico(historicoMHIMAY, "G1");
          actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
        }
      }
      //MHI2 mayoria y minoria2
      if (coloresDigitos[7] === 'gray' || coloresDigitos[8] === 'gray' || coloresDigitos[9] === 'gray') {
        agregarAHistorico(historicoMHI2, "E");
        actualizarHistorico("MHI_2_Minoría", historicoMHI2);
        agregarAHistorico(historicoMHI2MAY, "E");
        actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
      } else {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario === coloresDigitos[1]) {
          agregarAHistorico(historicoMHI2, "D");
          actualizarHistorico("MHI_2_Minoría", historicoMHI2);
        }
        const mayoritario = colorMasRepetido([7, 8, 9]);
        if (mayoritario === coloresDigitos[1]) {
          agregarAHistorico(historicoMHI2MAY, "D");
          actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
        }
      }
      //MHI mayoria y minoria
      if (coloresDigitos[5] !== 'gray' && coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([5, 6, 7, 8, 9]);
        if (minoritario !== coloresDigitos[0] && minoritario === coloresDigitos[1]) {
          agregarAHistorico(historicoMILLONMIN, "G1");
          actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
        }
        const mayoritario = colorMasRepetido([5, 6, 7, 8, 9]);
        if (mayoritario !== coloresDigitos[0] && mayoritario === coloresDigitos[1]) {
          agregarAHistorico(historicoMILLONMAY, "G1");
          actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
        }
      }
      //Torres Gemelas
      if (coloresDigitos[5] !== 'gray') {
        if (coloresDigitos[5] !== coloresDigitos[9] && coloresDigitos[5] !== coloresDigitos[0] && coloresDigitos[5] === coloresDigitos[1]) {
          agregarAHistorico(historicoTORRESGEMELAS, "G2");
          actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
        } else if (coloresDigitos[5] !== coloresDigitos[9] && coloresDigitos[5] !== coloresDigitos[0] && coloresDigitos[5] !== coloresDigitos[1]) {
          agregarAHistorico(historicoTORRESGEMELAS, "L");
          actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
        }
      }
      //Tres Vecinos
      if (coloresDigitos[8] !== 'gray') {
        if (coloresDigitos[8] !== coloresDigitos[9] && coloresDigitos[8] !== coloresDigitos[0] && coloresDigitos[8] === coloresDigitos[1]) {
          agregarAHistorico(historicoTRESVECINOS, "G2");
          actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
        } else if (coloresDigitos[8] !== coloresDigitos[9] && coloresDigitos[8] !== coloresDigitos[0] && coloresDigitos[8] !== coloresDigitos[1]) {
          agregarAHistorico(historicoTRESVECINOS, "L");
          actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
        }
      }
      //Patron 3x1
      if (coloresDigitos[5] !== 'gray' && coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray') {
        const minoritario = colorMenosRepetido([5, 6, 7]);
        if (minoritario !== coloresDigitos[9] && minoritario !== coloresDigitos[0] && minoritario === coloresDigitos[1]) {
          agregarAHistorico(historicoPATRON3X1, "G2");
          actualizarHistorico("Patron_3x1", historicoPATRON3X1);
        } else if (minoritario !== coloresDigitos[9] && minoritario !== coloresDigitos[0] && minoritario !== coloresDigitos[1]) {
          agregarAHistorico(historicoPATRON3X1, "L");
          actualizarHistorico("Patron_3x1", historicoPATRON3X1);
        }
      }
      //Patron 23
      if (coloresDigitos[0] === 'gray') {
        agregarAHistorico(historicoPADRON23, "E");
        actualizarHistorico("Patrón_23", historicoPADRON23);
      } else {
        if (coloresDigitos[0] === coloresDigitos[1]) {
          agregarAHistorico(historicoPADRON23, "D");
          actualizarHistorico("Patrón_23", historicoPADRON23);
        }
      }
    }

    function digito2(vela) {
      ultimaVela = coloresDigitos[2];
      //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
      getCelda('MHI 2 Minoría', 3).style.backgroundColor = '';
      getCelda('MHI 2 Minoría', 6).style.backgroundColor = '';
      getCelda('MHI 2 Mayoría', 3).style.backgroundColor = '';
      getCelda('MHI 2 Mayoría', 6).style.backgroundColor = '';
      getCelda('MHI 3 Minoría', 2).style.backgroundColor = '';
      getCelda('MHI 3 Minoría', 5).style.backgroundColor = '';
      getCelda('MHI 3 Mayoría', 2).style.backgroundColor = '';
      getCelda('MHI 3 Mayoría', 5).style.backgroundColor = '';
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario === coloresDigitos[2]) {
          if (minoritario === 'green') {
            getCelda('MHI 3 Mayoría', 3).style.backgroundColor = 'red';
          } else {
            getCelda('MHI 3 Mayoría', 6).style.backgroundColor = 'green';
          }
        } else {
          if (minoritario === 'green') {
            getCelda('MHI 3 Minoría', 6).style.backgroundColor = 'green';
          } else {
            getCelda('MHI 3 Minoría', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analasis para Torres Gemelas
      if (coloresDigitos[0] !== 'gray') {
        getCelda('Torres Gemelas', 1).style.backgroundColor = coloresDigitos[0];
        getCelda('Torres Gemelas', 4).style.backgroundColor = coloresDigitos[0];
      }
      //Analisis correspondiente a TRES MOSQUETEROS
      getCelda('Tres Mosqueteros', 1).style.backgroundColor = '';
      getCelda('Tres Mosqueteros', 4).style.backgroundColor = '';
      if (coloresDigitos[2] !== 'gray') {
        if (coloresDigitos[2] === 'green') {
          getCelda('Tres Mosqueteros', 5).style.backgroundColor = 'green';
        } else {
          getCelda('Tres Mosqueteros', 2).style.backgroundColor = 'red';
        }
      }
      //Analisis correspondiente a TRES VECINOS
      getCelda('Tres Vecinos', 1).style.backgroundColor = 'green';
      getCelda('Tres Vecinos', 4).style.backgroundColor = 'red';
      //Analisis correspondiente a PATRON 23
      getCelda('Patrón 23', 3).style.backgroundColor = '';
      getCelda('Patrón 23', 6).style.backgroundColor = '';
      //Analasis para MEJOR DE TRES
      getCelda('Mejor de 3', 2).style.backgroundColor = '';
      getCelda('Mejor de 3', 5).style.backgroundColor = '';
      if (coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray') {
        const minoritario = colorMenosRepetido([5, 7, 8]);
        if (minoritario === coloresDigitos[2]) {
          if (minoritario === "green") {
            getCelda('Mejor de 3', 3).style.backgroundColor = 'red';
          } else {
            getCelda('Mejor de 3', 6).style.backgroundColor = 'green';
          }
        }
      }
      //Analisis Patron 3x1
      if (coloresDigitos[0] !== 'gray' && coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray') {    //Para si hay un doji no hacer nada
        const minoritario = colorMenosRepetido([0, 1, 2]);
        getCelda('Patron 3x1', 1).style.backgroundColor = minoritario;
        getCelda('Patron 3x1', 4).style.backgroundColor = minoritario;

      }
      // Analisis Patron Impar
      if (coloresDigitos[7] !== 'gray') {
        if (coloresDigitos[7] !== coloresDigitos[0] && coloresDigitos[7] !== coloresDigitos[2]) {
          if (coloresDigitos[7] === 'green') {
            getCelda('Patrón Impar', 3).style.backgroundColor = 'green';
            getCelda('Patrón Impar', 6).style.backgroundColor = 'green';
          } else {
            getCelda('Patrón Impar', 3).style.backgroundColor = 'red';
            getCelda('Patrón Impar', 6).style.backgroundColor = 'red';
          }
        }
      }

      //Analisis de las que pueden ganar en este digito:
      //MHI mayoria y minoria
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario !== coloresDigitos[0] && minoritario !== coloresDigitos[1] && minoritario === coloresDigitos[2]) {
          agregarAHistorico(historicoMHI, "G2");
          actualizarHistorico("MHI_Minoría", historicoMHI);
        } else if (minoritario !== coloresDigitos[0] && minoritario !== coloresDigitos[1] && minoritario !== coloresDigitos[2]) {
          agregarAHistorico(historicoMHI, "L");
          actualizarHistorico("MHI_Minoría", historicoMHI);
        }
        const mayoritario = colorMasRepetido([7, 8, 9]);
        if (mayoritario !== coloresDigitos[0] && mayoritario !== coloresDigitos[1] && mayoritario === coloresDigitos[2]) {
          agregarAHistorico(historicoMHIMAY, "G2");
          actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
        } else if (mayoritario !== coloresDigitos[0] && mayoritario !== coloresDigitos[1] && mayoritario !== coloresDigitos[2]) {
          agregarAHistorico(historicoMHIMAY, "L");
          actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
        }
      }
      //MHI mayoria2 y minoria2
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario !== coloresDigitos[1] && minoritario === coloresDigitos[2]) {
          agregarAHistorico(historicoMHI2, "G1");
          actualizarHistorico("MHI_2_Minoría", historicoMHI2);
        }
        const mayoritario = colorMasRepetido([7, 8, 9]);
        if (mayoritario !== coloresDigitos[1] && mayoritario === coloresDigitos[2]) {
          agregarAHistorico(historicoMHI2MAY, "G1");
          actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
        }
      }
      //MHI3 mayoria y minoria3
      if (coloresDigitos[7] === 'gray' || coloresDigitos[8] === 'gray' || coloresDigitos[9] === 'gray') {
        agregarAHistorico(historicoMHI3, "E");
        actualizarHistorico("MHI_3_Minoría", historicoMHI3);
        agregarAHistorico(historicoMHI3MAY, "E");
        actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
      } else {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario === coloresDigitos[2]) {
          agregarAHistorico(historicoMHI3, "D");
          actualizarHistorico("MHI_3_Minoría", historicoMHI3);
        }
        const mayoritario = colorMasRepetido([7, 8, 9]);
        if (mayoritario === coloresDigitos[2]) {
          agregarAHistorico(historicoMHI3MAY, "D");
          actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
        }
      }
      if (coloresDigitos[5] !== 'gray' && coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([5, 6, 7, 8, 9]);
        if (minoritario !== coloresDigitos[0] && minoritario !== coloresDigitos[1] && minoritario === coloresDigitos[2]) {
          agregarAHistorico(historicoMILLONMIN, "G2");
          actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
        } else if (minoritario !== coloresDigitos[0] && minoritario !== coloresDigitos[1] && minoritario !== coloresDigitos[2]) {
          agregarAHistorico(historicoMILLONMIN, "L");
          actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
        }
        const mayoritario = colorMasRepetido([5, 6, 7, 8, 9]);
        if (mayoritario !== coloresDigitos[0] && mayoritario !== coloresDigitos[1] && mayoritario === coloresDigitos[2]) {
          agregarAHistorico(historicoMILLONMAY, "G2");
          actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
        } else if (mayoritario !== coloresDigitos[0] && mayoritario !== coloresDigitos[1] && mayoritario !== coloresDigitos[2]) {
          agregarAHistorico(historicoMILLONMAY, "L");
          actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
        }
      }
      //Mejor de 3
      if (coloresDigitos[6] === 'gray' || coloresDigitos[7] === 'gray' || coloresDigitos[8] === 'gray') {
        agregarAHistorico(historicoMEJOR3, "E");
        actualizarHistorico("Mejor_de_3", historicoMEJOR3);
      } else {
        const mayoritario = colorMasRepetido([6, 7, 8]);
        if (mayoritario === coloresDigitos[2]) {
          agregarAHistorico(historicoMEJOR3, "D");
          actualizarHistorico("Mejor_de_3", historicoMEJOR3);
        }
      }
      //Patron Impar
      if (coloresDigitos[7] !== 'gray') {
        if (coloresDigitos[7] !== coloresDigitos[0] && coloresDigitos[7] === coloresDigitos[2]) {
          agregarAHistorico(historicoPATRONIMPAR, "G1");
          actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
        }
      }
      //Patron 23
      if (coloresDigitos[0] !== 'gray') {
        if (coloresDigitos[0] !== coloresDigitos[1] && coloresDigitos[0] === coloresDigitos[2]) {
          agregarAHistorico(historicoPADRON23, "G1");
          actualizarHistorico("Patrón_23", historicoPADRON23);
        }
      }
    }

    function digito3(vela) {
      ultimaVela = coloresDigitos[3];
      //MHI Minoria y MHI Mayoria
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray') {
        if (coloresDigitos[2] === coloresDigitos[3]) {
          const opuesto = coloresDigitos[2] === 'red' ? 'green' : 'red';
          getCelda('MHI Minoría', 1).style.backgroundColor = opuesto;
          getCelda('MHI Minoría', 4).style.backgroundColor = opuesto;
          getCelda('MHI Mayoría', 1).style.backgroundColor = coloresDigitos[2];
          getCelda('MHI Mayoría', 4).style.backgroundColor = coloresDigitos[2];
        } else {
          getCelda('MHI Minoría', 1).style.backgroundColor = 'red';
          getCelda('MHI Minoría', 4).style.backgroundColor = 'green';
          getCelda('MHI Mayoría', 1).style.backgroundColor = 'green';
          getCelda('MHI Mayoría', 4).style.backgroundColor = 'red';
        }
      }
      //Millon Minoria y Millon Mayoria
      if (coloresDigitos[0] !== 'gray' && coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray') {
        const minoritario = colorMenosRepetido([0, 1, 2, 3]);
        if (minoritario === 'empate') {
          getCelda('Millón Minoría', 1).style.backgroundColor = 'red';
          getCelda('Millón Minoría', 4).style.backgroundColor = 'green';
          getCelda('Millón Mayoría', 1).style.backgroundColor = 'green';
          getCelda('Millón Mayoría', 4).style.backgroundColor = 'red';
        }
        else if (minoritario === 'red') {
          getCelda('Millón Minoría', 1).style.backgroundColor = 'red';
          getCelda('Millón Minoría', 4).style.backgroundColor = 'red';
          getCelda('Millón Mayoría', 1).style.backgroundColor = 'green';
          getCelda('Millón Mayoría', 4).style.backgroundColor = 'green';
        }
        else {
          getCelda('Millón Minoría', 1).style.backgroundColor = 'green';
          getCelda('Millón Minoría', 4).style.backgroundColor = 'green';
          getCelda('Millón Mayoría', 1).style.backgroundColor = 'red';
          getCelda('Millón Mayoría', 4).style.backgroundColor = 'red';
        }
      }
      getCelda('MHI 3 Minoría', 3).style.backgroundColor = '';
      getCelda('MHI 3 Minoría', 6).style.backgroundColor = '';
      getCelda('MHI 3 Mayoría', 3).style.backgroundColor = '';
      getCelda('MHI 3 Mayoría', 6).style.backgroundColor = '';
      //Analasis para Torres Gemelas
      getCelda('Torres Gemelas', 1).style.backgroundColor = '';
      getCelda('Torres Gemelas', 4).style.backgroundColor = '';
      if (coloresDigitos[0] !== 'gray') {
        if (coloresDigitos[0] === 'green') {
          getCelda('Torres Gemelas', 5).style.backgroundColor = coloresDigitos[0];
        } else {
          getCelda('Torres Gemelas', 2).style.backgroundColor = coloresDigitos[0];
        }
      }
      //Analisis correspondiente a TRES MOSQUETEROS
      getCelda('Tres Mosqueteros', 2).style.backgroundColor = '';
      getCelda('Tres Mosqueteros', 5).style.backgroundColor = '';
      if (coloresDigitos[2] !== 'gray') {
        if (coloresDigitos[2] !== coloresDigitos[3]) {
          if (coloresDigitos[2] === 'green') {
            getCelda('Tres Mosqueteros', 6).style.backgroundColor = 'green';
          } else {
            getCelda('Tres Mosqueteros', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analisis correspondiente a TRES VECINOS
      getCelda('Tres Vecinos', 1).style.backgroundColor = '';
      getCelda('Tres Vecinos', 4).style.backgroundColor = '';
      if (coloresDigitos[3] !== 'gray') {
        if (coloresDigitos[3] === 'green') {
          getCelda('Tres Vecinos', 5).style.backgroundColor = 'green';
        } else {
          getCelda('Tres Vecinos', 2).style.backgroundColor = 'red';
        }
      }
      //Analasis para MEJOR DE TRES
      getCelda('Mejor de 3', 3).style.backgroundColor = '';
      getCelda('Mejor de 3', 6).style.backgroundColor = '';
      //Analisis Patron 3x1
      getCelda('Patron 3x1', 1).style.backgroundColor = '';
      getCelda('Patron 3x1', 4).style.backgroundColor = '';
      if (coloresDigitos[0] !== 'gray' && coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray') {    //Para si hay un doji no hacer nada
        const minoritario = colorMenosRepetido([0, 1, 2]);
        if (minoritario === 'green') {
          getCelda('Patron 3x1', 5).style.backgroundColor = 'green';
        } else {
          getCelda('Patron 3x1', 2).style.backgroundColor = 'red';
        }
      }
      // Analisis Patron Impar
      getCelda('Patrón Impar', 3).style.backgroundColor = '';
      getCelda('Patrón Impar', 6).style.backgroundColor = '';
      if (coloresDigitos[2] !== 'gray') {
        getCelda('Patrón Impar', 1).style.backgroundColor = coloresDigitos[2];
        getCelda('Patrón Impar', 4).style.backgroundColor = coloresDigitos[2];
      }

      //Analisis de las que pueden ganar en este digito:
      //MHI mayoria2 y minoria2
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario !== coloresDigitos[1] && minoritario !== coloresDigitos[2] && minoritario === coloresDigitos[3]) {
          agregarAHistorico(historicoMHI2, "G2");
          actualizarHistorico("MHI_2_Minoría", historicoMHI2);
        } else if (minoritario !== coloresDigitos[1] && minoritario !== coloresDigitos[2] && minoritario !== coloresDigitos[3]) {
          agregarAHistorico(historicoMHI2, "L");
          actualizarHistorico("MHI_2_Minoría", historicoMHI2);
        }
        const mayoritario = colorMasRepetido([7, 8, 9]);
        if (mayoritario !== coloresDigitos[1] && mayoritario !== coloresDigitos[2] && mayoritario === coloresDigitos[3]) {
          agregarAHistorico(historicoMHI2MAY, "G2");
          actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
        } else if (mayoritario !== coloresDigitos[1] && mayoritario !== coloresDigitos[2] && mayoritario !== coloresDigitos[3]) {
          agregarAHistorico(historicoMHI2MAY, "L");
          actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
        }
      }
      //MHI mayoria3 y minoria3
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario !== coloresDigitos[2] && minoritario === coloresDigitos[3]) {
          agregarAHistorico(historicoMHI3, "G1");
          actualizarHistorico("MHI_3_Minoría", historicoMHI3);
        }
        const mayoritario = colorMasRepetido([7, 8, 9]);
        if (mayoritario !== coloresDigitos[2] && mayoritario === coloresDigitos[3]) {
          agregarAHistorico(historicoMHI3MAY, "G1");
          actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
        }
      }
      if (coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray') {
        const mayoritario = colorMasRepetido([6, 7, 8]);
        if (mayoritario !== coloresDigitos[2] && mayoritario === coloresDigitos[3]) {
          agregarAHistorico(historicoMEJOR3, "G1");
          actualizarHistorico("Mejor_de_3", historicoMEJOR3);
        }
      }
      //Tres Mosqueteros
      if (coloresDigitos[2] === 'gray') {
        agregarAHistorico(historicoMOSQUETEROS, "E");
        actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
      } else {
        if (coloresDigitos[2] === coloresDigitos[3]) {
          agregarAHistorico(historicoMOSQUETEROS, "D");
          actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
        }
      }
      //Patron 23
      if (coloresDigitos[0] !== 'gray') {
        if (coloresDigitos[0] !== coloresDigitos[1] && coloresDigitos[0] !== coloresDigitos[2] && coloresDigitos[0] === coloresDigitos[3]) {
          agregarAHistorico(historicoPADRON23, "G2");
          actualizarHistorico("Patrón_23", historicoPADRON23);
        } else if (coloresDigitos[0] !== coloresDigitos[1] && coloresDigitos[0] !== coloresDigitos[2] && coloresDigitos[0] !== coloresDigitos[3]) {
          agregarAHistorico(historicoPADRON23, "L");
          actualizarHistorico("Patrón_23", historicoPADRON23);
        }
      }
    }

    function digito4(vela) {
      ultimaVela = coloresDigitos[4];
      //Analisis Correspondiente a MHMI Minoria MHI Mayoria
      ['MHI Minoría', 'MHI Mayoría', 'Millón Minoría', 'Millón Mayoría'].forEach(patron => {
        getCelda(patron, 1).style.backgroundColor = '';
        getCelda(patron, 4).style.backgroundColor = '';
      });
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario === 'red') {
          getCelda('MHI Minoría', 2).style.backgroundColor = 'red';
          getCelda('MHI Mayoría', 5).style.backgroundColor = 'green';
        } else if (minoritario === 'green') {
          getCelda('MHI Minoría', 5).style.backgroundColor = 'green';
          getCelda('MHI Mayoría', 2).style.backgroundColor = 'red';
        }
      }
      //Analisis Correspondiente a Millón Minoria Millón Mayoria
      if (coloresDigitos[0] !== 'gray' && coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {    //Para si hay un doji no hacer nada
        const minoritario = colorMenosRepetido([0, 1, 2, 3, 4]);
        if (minoritario === 'red') {
          getCelda('Millón Minoría', 2).style.backgroundColor = 'red';
          getCelda('Millón Mayoría', 5).style.backgroundColor = 'green';
        } else {
          getCelda('Millón Minoría', 5).style.backgroundColor = 'green';
          getCelda('Millón Mayoría', 2).style.backgroundColor = 'red';
        }
      }

      //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario === 'red') {
          getCelda('MHI 2 Minoría', 1).style.backgroundColor = 'red';
          getCelda('MHI 2 Minoría', 4).style.backgroundColor = 'red';
          getCelda('MHI 2 Mayoría', 1).style.backgroundColor = 'green';
          getCelda('MHI 2 Mayoría', 4).style.backgroundColor = 'green';
        } else if (minoritario === 'green') {
          getCelda('MHI 2 Minoría', 1).style.backgroundColor = 'green';
          getCelda('MHI 2 Minoría', 4).style.backgroundColor = 'green';
          getCelda('MHI 2 Mayoría', 1).style.backgroundColor = 'red';
          getCelda('MHI 2 Mayoría', 4).style.backgroundColor = 'red';

        }
      }
      //Analasis para Torres Gemelas
      getCelda('Torres Gemelas', 2).style.backgroundColor = '';
      getCelda('Torres Gemelas', 5).style.backgroundColor = '';
      if (coloresDigitos[0] !== 'gray') {
        if (coloresDigitos[0] !== coloresDigitos[4]) {
          if (coloresDigitos[0] === 'green') {
            getCelda('Torres Gemelas', 6).style.backgroundColor = coloresDigitos[0];
          } else {
            getCelda('Torres Gemelas', 3).style.backgroundColor = coloresDigitos[0];
          }
        }
      }
      //Analisis correspondiente a TRES MOSQUETEROS
      getCelda('Tres Mosqueteros', 3).style.backgroundColor = '';
      getCelda('Tres Mosqueteros', 6).style.backgroundColor = '';
      //Analisis correspondiente a TRES VECINOS
      getCelda('Tres Vecinos', 2).style.backgroundColor = '';
      getCelda('Tres Vecinos', 5).style.backgroundColor = '';
      if (coloresDigitos[3] !== 'gray') {
        if (coloresDigitos[3] !== coloresDigitos[4]) {
          if (coloresDigitos[3] === 'green') {
            getCelda('Tres Vecinos', 6).style.backgroundColor = 'green';
          } else {
            getCelda('Tres Vecinos', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analisis correspondiente a PATRON 23
      getCelda('Patrón 23', 1).style.backgroundColor = 'green';
      getCelda('Patrón 23', 4).style.backgroundColor = 'red';
      //Analisis Patron 3x1
      getCelda('Patron 3x1', 2).style.backgroundColor = '';
      getCelda('Patron 3x1', 5).style.backgroundColor = '';
      if (coloresDigitos[0] !== 'gray' && coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray') {    //Para si hay un doji no hacer nada
        const minoritario = colorMenosRepetido([0, 1, 2]);
        if (minoritario !== coloresDigitos[4]) {
          if (minoritario === 'green') {
            getCelda('Patron 3x1', 6).style.backgroundColor = 'green';
          } else {
            getCelda('Patron 3x1', 3).style.backgroundColor = 'red';
          }
        }
      }
      // Analisis Patron Impar
      getCelda('Patrón Impar', 1).style.backgroundColor = '';
      getCelda('Patrón Impar', 4).style.backgroundColor = '';

      //MHI mayoria3 y minoria3
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario !== coloresDigitos[2] && minoritario !== coloresDigitos[3] && minoritario === coloresDigitos[4]) {
          agregarAHistorico(historicoMHI3, "G2");
          actualizarHistorico("MHI_3_Minoría", historicoMHI3);
        } else if (minoritario !== coloresDigitos[2] && minoritario !== coloresDigitos[3] && minoritario !== coloresDigitos[4]) {
          agregarAHistorico(historicoMHI3, "L");
          actualizarHistorico("MHI_3_Minoría", historicoMHI3);
        }
        const mayoritario = colorMasRepetido([7, 8, 9]);
        if (mayoritario !== coloresDigitos[2] && mayoritario !== coloresDigitos[3] && mayoritario === coloresDigitos[4]) {
          agregarAHistorico(historicoMHI3MAY, "G2");
          actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
        } else if (mayoritario !== coloresDigitos[2] && mayoritario !== coloresDigitos[3] && mayoritario !== coloresDigitos[4]) {
          agregarAHistorico(historicoMHI3MAY, "L");
          actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
        }
      }
      //Torres Gemelas
      if (coloresDigitos[0] === 'gray') {
        agregarAHistorico(historicoTORRESGEMELAS, "E");
        actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
      } else {
        if (coloresDigitos[0] === coloresDigitos[4]) {
          agregarAHistorico(historicoTORRESGEMELAS, "D");
          actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
        }
      }
      if (coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray') {
        const mayoritario = colorMasRepetido([6, 7, 8]);
        if (mayoritario !== coloresDigitos[2] && mayoritario !== coloresDigitos[3] && mayoritario === coloresDigitos[4]) {
          agregarAHistorico(historicoMEJOR3, "G2");
          actualizarHistorico("Mejor_de_3", historicoMEJOR3);
        } else if (mayoritario !== coloresDigitos[2] && mayoritario !== coloresDigitos[3] && mayoritario !== coloresDigitos[4]) {
          agregarAHistorico(historicoMEJOR3, "L");
          actualizarHistorico("Mejor_de_3", historicoMEJOR3);
        }
      }
      //Tres mosqueteros
      if (coloresDigitos[2] !== 'gray') {
        if (coloresDigitos[2] !== coloresDigitos[3] && coloresDigitos[2] === coloresDigitos[4]) {
          agregarAHistorico(historicoMOSQUETEROS, "G1");
          actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
        }
      }
      //Patron Impar
      if (coloresDigitos[7] !== 'gray') {
        if (coloresDigitos[7] !== coloresDigitos[0] && coloresDigitos[7] !== coloresDigitos[2] && coloresDigitos[7] === coloresDigitos[4]) {
          agregarAHistorico(historicoPATRONIMPAR, "G2");
          actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
        } else if (coloresDigitos[7] !== coloresDigitos[0] && coloresDigitos[7] !== coloresDigitos[2] && coloresDigitos[7] !== coloresDigitos[4]) {
          agregarAHistorico(historicoPATRONIMPAR, "L");
          actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
        }
      }
      //Tres Vecinos
      if (coloresDigitos[3] === 'gray') {
        agregarAHistorico(historicoTRESVECINOS, "E");
        actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
      } else {
        if (coloresDigitos[3] === coloresDigitos[4]) {
          agregarAHistorico(historicoTRESVECINOS, "D");
          actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
        }
      }
      //Patron 3x1
      if (coloresDigitos[0] === 'gray' || coloresDigitos[1] === 'gray' || coloresDigitos[2] === 'gray') {
        agregarAHistorico(historicoPATRON3X1, "E");
        actualizarHistorico("Patron_3x1", historicoPATRON3X1);
      } else {
        const minoritario = colorMenosRepetido([0, 1, 2]);
        if (minoritario === coloresDigitos[4]) {
          agregarAHistorico(historicoPATRON3X1, "D");
          actualizarHistorico("Patron_3x1", historicoPATRON3X1);
        }
      }
    }

    function digito5(vela) {
      ultimaVela = coloresDigitos[5];
      ['MHI Minoría', 'MHI Mayoría', 'Millón Minoría', 'Millón Mayoría'].forEach(patron => {
        getCelda(patron, 2).style.backgroundColor = '';
        getCelda(patron, 5).style.backgroundColor = '';
      });
      //Analisis Correspondiente a NHI Minoria MHI Mayoria
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario === coloresDigitos[5]) {
          // Gana MHI Minoría, pierde MHI Mayoría
          if (minoritario === 'green') {
            getCelda('MHI Mayoría', 3).style.backgroundColor = 'red';
          } else if (minoritario === 'red') {
            getCelda('MHI Mayoría', 6).style.backgroundColor = 'green';
          }
        } else {
          // Gana MHI Mayoría, pierde MHI Minoría
          if (minoritario === 'green') {
            getCelda('MHI Minoría', 6).style.backgroundColor = 'green';
          } else if (minoritario === 'red') {
            getCelda('MHI Minoría', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analisis Correspondiente a Millón Minoria Millón Mayoria
      if (coloresDigitos[0] !== 'gray' && coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {    //Para si hay un doji no hacer nada
        const minoritario = colorMenosRepetido([0, 1, 2, 3, 4]);
        if (minoritario === coloresDigitos[5]) {   //Se gana mill minoria y se pierde mill mayoria
          if (minoritario === 'green') {
            getCelda('Millón Mayoría', 3).style.backgroundColor = 'red';
          }
          if (minoritario === 'red') {
            getCelda('Millón Mayoría', 6).style.backgroundColor = 'green';
          }
        } else {
          if (minoritario === 'green') {
            getCelda('Millón Minoría', 6).style.backgroundColor = 'green';
          }
          if (minoritario === 'red') {
            getCelda('Millón Minoría', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
      getCelda('MHI 2 Minoría', 1).style.backgroundColor = '';
      getCelda('MHI 2 Minoría', 4).style.backgroundColor = '';
      getCelda('MHI 2 Mayoría', 1).style.backgroundColor = '';
      getCelda('MHI 2 Mayoría', 4).style.backgroundColor = '';
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario === 'green') {
          getCelda('MHI 2 Minoría', 5).style.backgroundColor = 'green';
          getCelda('MHI 2 Mayoría', 2).style.backgroundColor = 'red';
        } else {
          getCelda('MHI 2 Minoría', 2).style.backgroundColor = 'red';
          getCelda('MHI 2 Mayoría', 5).style.backgroundColor = 'green';
        }
      }
      //Analisis Correspondiente a MMHI3 Minoria MHI3 Mayoria
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario === 'red') {
          getCelda('MHI 3 Minoría', 1).style.backgroundColor = 'red';
          getCelda('MHI 3 Minoría', 4).style.backgroundColor = 'red';
          getCelda('MHI 3 Mayoría', 1).style.backgroundColor = 'green';
          getCelda('MHI 3 Mayoría', 4).style.backgroundColor = 'green';
        } else if (minoritario === 'green') {
          getCelda('MHI 3 Minoría', 1).style.backgroundColor = 'green';
          getCelda('MHI 3 Minoría', 4).style.backgroundColor = 'green';
          getCelda('MHI 3 Mayoría', 1).style.backgroundColor = 'red';
          getCelda('MHI 3 Mayoría', 4).style.backgroundColor = 'red';
        }
      }
      //Analasis para Torres Gemelas
      getCelda('Torres Gemelas', 3).style.backgroundColor = '';
      getCelda('Torres Gemelas', 6).style.backgroundColor = '';
      //Analisis correspondiente a TRES VECINOS
      getCelda('Tres Vecinos', 3).style.backgroundColor = '';
      getCelda('Tres Vecinos', 6).style.backgroundColor = '';
      //Analisis correspondiente a PATRON 23
      getCelda('Patrón 23', 1).style.backgroundColor = '';
      getCelda('Patrón 23', 4).style.backgroundColor = '';
      if (coloresDigitos[5] !== 'gray') {
        if (coloresDigitos[5] === 'green') {
          getCelda('Patrón 23', 5).style.backgroundColor = 'green';
        } else {
          getCelda('Patrón 23', 2).style.backgroundColor = 'red';
        }
      }
      //Analasis para MEJOR DE TRES
      if (coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray') {
        const minoritario = colorMenosRepetido([1, 2, 3]);
        if (minoritario === 'green') {
          getCelda('Mejor de 3', 1).style.backgroundColor = 'red';
          getCelda('Mejor de 3', 4).style.backgroundColor = 'red';
        } else {
          getCelda('Mejor de 3', 1).style.backgroundColor = 'green';
          getCelda('Mejor de 3', 4).style.backgroundColor = 'green';
        }
      }
      //Analisis Patron 3x1
      getCelda('Patron 3x1', 3).style.backgroundColor = '';
      getCelda('Patron 3x1', 6).style.backgroundColor = '';
      // Analisis Patron Impar
      if (coloresDigitos[2] !== 'gray') {
        if (coloresDigitos[2] !== coloresDigitos[5]) {
          if (coloresDigitos[2] === 'green') {
            getCelda('Patrón Impar', 2).style.backgroundColor = 'green';
            getCelda('Patrón Impar', 5).style.backgroundColor = 'green';
          } else {
            getCelda('Patrón Impar', 2).style.backgroundColor = 'red';
            getCelda('Patrón Impar', 5).style.backgroundColor = 'red';
          }
        }
      }
      //Analisis de las que pueden ganar en este digito:
      //MHI mayoria y minoria
      if (coloresDigitos[2] === 'gray' || coloresDigitos[3] === 'gray' || coloresDigitos[4] === 'gray') {
        agregarAHistorico(historicoMHI, "E");
        actualizarHistorico("MHI_Minoría", historicoMHI);
        agregarAHistorico(historicoMHIMAY, "E");
        actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
      } else {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario === coloresDigitos[5]) {
          agregarAHistorico(historicoMHI, "D");
          actualizarHistorico("MHI_Minoría", historicoMHI);
        }
        const mayoritario = colorMasRepetido([2, 3, 4]);
        if (mayoritario === coloresDigitos[5]) {
          agregarAHistorico(historicoMHIMAY, "D");
          actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
        }
      }
      //MHI mayoria y minoria
      if (coloresDigitos[0] === 'gray' || coloresDigitos[1] === 'gray' || coloresDigitos[2] === 'gray' || coloresDigitos[3] === 'gray' || coloresDigitos[4] === 'gray') {
        agregarAHistorico(historicoMILLONMIN, "E");
        actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
        agregarAHistorico(historicoMILLONMAY, "E");
        actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
      } else {
        const minoritario = colorMenosRepetido([0, 1, 2, 3, 4]);
        if (minoritario === coloresDigitos[5]) {
          agregarAHistorico(historicoMILLONMIN, "D");
          actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
        }
        const mayoritario = colorMasRepetido([0, 1, 2, 3, 4]);
        if (mayoritario === coloresDigitos[5]) {
          agregarAHistorico(historicoMILLONMAY, "D");
          actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
        }
      }
      //Torres Gemelas
      if (coloresDigitos[0] !== 'gray') {
        if (coloresDigitos[0] !== coloresDigitos[4] && coloresDigitos[0] === coloresDigitos[5]) {
          agregarAHistorico(historicoTORRESGEMELAS, "G1");
          actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
        }
      }
      //Tres Mosqueteros
      if (coloresDigitos[2] !== 'gray') {
        if (coloresDigitos[2] !== coloresDigitos[3] && coloresDigitos[2] !== coloresDigitos[4] && coloresDigitos[2] === coloresDigitos[5]) {
          agregarAHistorico(historicoMOSQUETEROS, "G2");
          actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
        } else if (coloresDigitos[2] !== coloresDigitos[3] && coloresDigitos[2] !== coloresDigitos[4] && coloresDigitos[2] !== coloresDigitos[5]) {
          agregarAHistorico(historicoMOSQUETEROS, "L");
          actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
        }
      }
      //Patron Impar
      if (coloresDigitos[2] === 'gray') {
        agregarAHistorico(historicoPATRONIMPAR, "E");
        actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
      } else {
        if (coloresDigitos[2] === coloresDigitos[5]) {
          agregarAHistorico(historicoPATRONIMPAR, "D");
          actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
        }
      }
      //Tres Vecinos
      if (coloresDigitos[3] !== 'gray') {
        if (coloresDigitos[3] !== coloresDigitos[4] && coloresDigitos[3] === coloresDigitos[5]) {
          agregarAHistorico(historicoTRESVECINOS, "G1");
          actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
        }
      }
      //Patron 3x1
      if (coloresDigitos[0] !== 'gray' && coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray') {
        const minoritario = colorMenosRepetido([0, 1, 2]);
        if (minoritario !== coloresDigitos[4] && minoritario === coloresDigitos[5]) {
          agregarAHistorico(historicoPATRON3X1, "G1");
          actualizarHistorico("Patron_3x1", historicoPATRON3X1);
        }
      }



    }

    function digito6(vela) {
      ultimaVela = coloresDigitos[6];
      ['MHI Minoría', 'MHI Mayoría', 'Millón Minoría', 'Millón Mayoría'].forEach(patron => {
        getCelda(patron, 3).style.backgroundColor = '';
        getCelda(patron, 6).style.backgroundColor = '';
      });
      //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
      getCelda('MHI 2 Minoría', 2).style.backgroundColor = '';
      getCelda('MHI 2 Minoría', 5).style.backgroundColor = '';
      getCelda('MHI 2 Mayoría', 2).style.backgroundColor = '';
      getCelda('MHI 2 Mayoría', 5).style.backgroundColor = '';
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario === coloresDigitos[6]) {
          if (minoritario === 'green') {
            getCelda('MHI 2 Mayoría', 3).style.backgroundColor = 'red';
          }
          else {
            getCelda('MHI 2 Mayoría', 6).style.backgroundColor = 'green';
          }
        } else {
          if (minoritario === 'green') {
            getCelda('MHI 2 Minoría', 6).style.backgroundColor = 'green';
          }
          else {
            getCelda('MHI 2 Minoría', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analisis Correspondiente a MMHI3 Minoria MHI3 Mayoria
      getCelda('MHI 3 Minoría', 1).style.backgroundColor = '';
      getCelda('MHI 3 Minoría', 4).style.backgroundColor = '';
      getCelda('MHI 3 Mayoría', 1).style.backgroundColor = '';
      getCelda('MHI 3 Mayoría', 4).style.backgroundColor = '';
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario === 'green') {
          getCelda('MHI 3 Minoría', 5).style.backgroundColor = 'green';
          getCelda('MHI 3 Mayoría', 2).style.backgroundColor = 'red';
        } else {
          getCelda('MHI 3 Minoría', 2).style.backgroundColor = 'red';
          getCelda('MHI 3 Mayoría', 5).style.backgroundColor = 'green';
        }
      }
      //Analisis correspondiente a TRES MOSQUETEROS
      getCelda('Tres Mosqueteros', 1).style.backgroundColor = 'green';
      getCelda('Tres Mosqueteros', 4).style.backgroundColor = 'red';
      //Analisis correspondiente a PATRON 23
      getCelda('Patrón 23', 2).style.backgroundColor = '';
      getCelda('Patrón 23', 5).style.backgroundColor = '';
      if (coloresDigitos[5] !== 'gray') {
        if (coloresDigitos[5] !== coloresDigitos[6]) {
          if (coloresDigitos[5] === 'green') {
            getCelda('Patrón 23', 6).style.backgroundColor = 'green';
          } else {
            getCelda('Patrón 23', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analasis para MEJOR DE TRES
      getCelda('Mejor de 3', 1).style.backgroundColor = '';
      getCelda('Mejor de 3', 4).style.backgroundColor = '';
      if (coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray') {
        const minoritario = colorMenosRepetido([1, 2, 3]);
        if (minoritario === "green") {
          getCelda('Mejor de 3', 2).style.backgroundColor = 'red';
        } else {
          getCelda('Mejor de 3', 5).style.backgroundColor = 'green';
        }
      }
      // Analisis Patron Impar
      getCelda('Patrón Impar', 2).style.backgroundColor = '';
      getCelda('Patrón Impar', 5).style.backgroundColor = '';

      //Analisis de las que pueden ganar en este digito:
      //MHI mayoria y minoria
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario !== coloresDigitos[5] && minoritario === coloresDigitos[6]) {
          agregarAHistorico(historicoMHI, "G1");
          actualizarHistorico("MHI_Minoría", historicoMHI);
        }
        const mayoritario = colorMasRepetido([2, 3, 4]);
        if (mayoritario !== coloresDigitos[5] && mayoritario === coloresDigitos[6]) {
          agregarAHistorico(historicoMHIMAY, "G1");
          actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
        }
      }
      //MHI mayoria2 y minoria2
      if (coloresDigitos[2] === 'gray' || coloresDigitos[3] === 'gray' || coloresDigitos[4] === 'gray') {
        agregarAHistorico(historicoMHI2, "E");
        actualizarHistorico("MHI_2_Minoría", historicoMHI2);
        agregarAHistorico(historicoMHI2MAY, "E");
        actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
      } else {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario === coloresDigitos[6]) {
          agregarAHistorico(historicoMHI2, "D");
          actualizarHistorico("MHI_2_Minoría", historicoMHI2);
        }
        const mayoritario = colorMasRepetido([2, 3, 4]);
        if (mayoritario === coloresDigitos[6]) {
          agregarAHistorico(historicoMHI2MAY, "D");
          actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
        }
      }
      //MHI mayoria y minoria
      if (coloresDigitos[0] !== 'gray' && coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([0, 1, 2, 3, 4]);
        if (minoritario !== coloresDigitos[5] && minoritario === coloresDigitos[6]) {
          agregarAHistorico(historicoMILLONMIN, "G1");
          actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
        }
        const mayoritario = colorMasRepetido([0, 1, 2, 3, 4]);
        if (mayoritario !== coloresDigitos[5] && mayoritario === coloresDigitos[6]) {
          agregarAHistorico(historicoMILLONMAY, "G1");
          actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
        }
      }
      //Torres Gemelas
      if (coloresDigitos[0] !== 'gray') {
        if (coloresDigitos[0] !== coloresDigitos[4] && coloresDigitos[0] !== coloresDigitos[5] && coloresDigitos[0] === coloresDigitos[6]) {
          agregarAHistorico(historicoTORRESGEMELAS, "G2");
          actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
        } else if (coloresDigitos[0] !== coloresDigitos[4] && coloresDigitos[0] !== coloresDigitos[5] && coloresDigitos[0] !== coloresDigitos[6]) {
          agregarAHistorico(historicoTORRESGEMELAS, "L");
          actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
        }
      }
      //Tres Vecinos
      if (coloresDigitos[3] !== 'gray') {
        if (coloresDigitos[3] !== coloresDigitos[4] && coloresDigitos[3] !== coloresDigitos[5] && coloresDigitos[3] === coloresDigitos[6]) {
          agregarAHistorico(historicoTRESVECINOS, "G2");
          actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
        } else if (coloresDigitos[3] !== coloresDigitos[4] && coloresDigitos[3] !== coloresDigitos[5] && coloresDigitos[3] !== coloresDigitos[6]) {
          agregarAHistorico(historicoTRESVECINOS, "L");
          actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
        }
      }
      //Patron 3x1
      if (coloresDigitos[0] !== 'gray' && coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray') {
        const minoritario = colorMenosRepetido([0, 1, 2]);
        if (minoritario !== coloresDigitos[4] && minoritario !== coloresDigitos[5] && minoritario === coloresDigitos[6]) {
          agregarAHistorico(historicoPATRON3X1, "G2");
          actualizarHistorico("Patron_3x1", historicoPATRON3X1);
        } else if (minoritario !== coloresDigitos[4] && minoritario !== coloresDigitos[5] && minoritario !== coloresDigitos[6]) {
          agregarAHistorico(historicoPATRON3X1, "L");
          actualizarHistorico("Patron_3x1", historicoPATRON3X1);
        }
      }
      //Patron 23
      if (coloresDigitos[5] === 'gray') {
        agregarAHistorico(historicoPADRON23, "E");
        actualizarHistorico("Patrón_23", historicoPADRON23);
      } else {
        if (coloresDigitos[5] === coloresDigitos[6]) {
          agregarAHistorico(historicoPADRON23, "D");
          actualizarHistorico("Patrón_23", historicoPADRON23);
        }
      }

    }

    function digito7(vela) {
      ultimaVela = coloresDigitos[7];
      //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
      getCelda('MHI 2 Minoría', 3).style.backgroundColor = '';
      getCelda('MHI 2 Minoría', 6).style.backgroundColor = '';
      getCelda('MHI 2 Mayoría', 3).style.backgroundColor = '';
      getCelda('MHI 2 Mayoría', 6).style.backgroundColor = '';
      getCelda('MHI 3 Minoría', 2).style.backgroundColor = '';
      getCelda('MHI 3 Minoría', 5).style.backgroundColor = '';
      getCelda('MHI 3 Mayoría', 2).style.backgroundColor = '';
      getCelda('MHI 3 Mayoría', 5).style.backgroundColor = '';
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario === coloresDigitos[7]) {
          if (minoritario === 'green') {
            getCelda('MHI 3 Mayoría', 3).style.backgroundColor = 'red';
          } else {
            getCelda('MHI 3 Mayoría', 6).style.backgroundColor = 'green';
          }
        } else {
          if (minoritario === 'green') {
            getCelda('MHI 3 Minoría', 6).style.backgroundColor = 'green';
          } else {
            getCelda('MHI 3 Minoría', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analasis para Torres Gemelas
      if (coloresDigitos[5] !== 'gray') {
        getCelda('Torres Gemelas', 1).style.backgroundColor = coloresDigitos[5];
        getCelda('Torres Gemelas', 4).style.backgroundColor = coloresDigitos[5];
      }
      //Analisis correspondiente a TRES MOSQUETEROS
      getCelda('Tres Mosqueteros', 1).style.backgroundColor = '';
      getCelda('Tres Mosqueteros', 4).style.backgroundColor = '';
      if (coloresDigitos[7] !== 'gray') {
        if (coloresDigitos[7] === 'green') {
          getCelda('Tres Mosqueteros', 5).style.backgroundColor = 'green';
        } else {
          getCelda('Tres Mosqueteros', 2).style.backgroundColor = 'red';
        }
      }
      //Analisis correspondiente a TRES VECINOS
      getCelda('Tres Vecinos', 1).style.backgroundColor = 'green';
      getCelda('Tres Vecinos', 4).style.backgroundColor = 'red';
      //Analisis correspondiente a PATRON 23
      getCelda('Patrón 23', 3).style.backgroundColor = '';
      getCelda('Patrón 23', 6).style.backgroundColor = '';
      //Analasis para MEJOR DE TRES
      getCelda('Mejor de 3', 2).style.backgroundColor = '';
      getCelda('Mejor de 3', 5).style.backgroundColor = '';
      if (coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray') {
        const minoritario = colorMenosRepetido([1, 2, 3]);
        if (minoritario === coloresDigitos[7]) {
          if (minoritario === "green") {
            getCelda('Mejor de 3', 3).style.backgroundColor = 'red';
          } else {
            getCelda('Mejor de 3', 6).style.backgroundColor = 'green';
          }
        }
      }
      //Analasis para MEJOR DE TRES
      getCelda('Mejor de 3', 3).style.backgroundColor = '';
      getCelda('Mejor de 3', 6).style.backgroundColor = '';
      //Analisis Patron 3x1
      if (coloresDigitos[5] !== 'gray' && coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray') {    //Para si hay un doji no hacer nada
        const minoritario = colorMenosRepetido([5, 6, 7]);
        getCelda('Patron 3x1', 1).style.backgroundColor = minoritario;
        getCelda('Patron 3x1', 4).style.backgroundColor = minoritario;

      }
      // Analisis Patron Impar
      if (coloresDigitos[2] !== 'gray') {
        if (coloresDigitos[2] !== coloresDigitos[5] && coloresDigitos[2] !== coloresDigitos[2]) {
          if (coloresDigitos[2] === 'green') {
            getCelda('Patrón Impar', 3).style.backgroundColor = 'green';
            getCelda('Patrón Impar', 6).style.backgroundColor = 'green';
          } else {
            getCelda('Patrón Impar', 3).style.backgroundColor = 'red';
            getCelda('Patrón Impar', 6).style.backgroundColor = 'red';
          }
        }
      }

      //Analisis de las que pueden ganar en este digito:
      //MHI mayoria y minoria
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario !== coloresDigitos[5] && minoritario !== coloresDigitos[6] && minoritario === coloresDigitos[7]) {
          agregarAHistorico(historicoMHI, "G2");
          actualizarHistorico("MHI_Minoría", historicoMHI);
        } else if (minoritario !== coloresDigitos[5] && minoritario !== coloresDigitos[6] && minoritario !== coloresDigitos[7]) {
          agregarAHistorico(historicoMHI, "L");
          actualizarHistorico("MHI_Minoría", historicoMHI);
        }
        const mayoritario = colorMasRepetido([2, 3, 4]);
        if (mayoritario !== coloresDigitos[5] && mayoritario !== coloresDigitos[6] && mayoritario === coloresDigitos[7]) {
          agregarAHistorico(historicoMHIMAY, "G2");
          actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
        } else if (mayoritario !== coloresDigitos[5] && mayoritario !== coloresDigitos[6] && mayoritario !== coloresDigitos[7]) {
          agregarAHistorico(historicoMHIMAY, "L");
          actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
        }
      }
      //MHI mayoria2 y minoria2
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario !== coloresDigitos[6] && minoritario === coloresDigitos[7]) {
          agregarAHistorico(historicoMHI2, "G1");
          actualizarHistorico("MHI_2_Minoría", historicoMHI2);
        }
        const mayoritario = colorMasRepetido([2, 3, 4]);
        if (mayoritario !== coloresDigitos[6] && mayoritario === coloresDigitos[7]) {
          agregarAHistorico(historicoMHI2MAY, "G1");
          actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
        }
      }
      //MHI mayoria3 y minoria3
      if (coloresDigitos[2] === 'gray' || coloresDigitos[3] === 'gray' || coloresDigitos[4] === 'gray') {
        agregarAHistorico(historicoMHI3, "E");
        actualizarHistorico("MHI_3_Minoría", historicoMHI3);
        agregarAHistorico(historicoMHI3MAY, "E");
        actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
      } else {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario === coloresDigitos[7]) {
          agregarAHistorico(historicoMHI3, "D");
          actualizarHistorico("MHI_3_Minoría", historicoMHI3);
        }
        const mayoritario = colorMasRepetido([2, 3, 4]);
        if (mayoritario === coloresDigitos[7]) {
          agregarAHistorico(historicoMHI3MAY, "D");
          actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
        }
      }
      //MHI mayoria y minoria
      if (coloresDigitos[0] !== 'gray' && coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([0, 1, 2, 3, 4]);
        if (minoritario !== coloresDigitos[5] && minoritario !== coloresDigitos[6] && minoritario === coloresDigitos[7]) {
          agregarAHistorico(historicoMILLONMIN, "G2");
          actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
        } else if (minoritario !== coloresDigitos[5] && minoritario !== coloresDigitos[6] && minoritario !== coloresDigitos[7]) {
          agregarAHistorico(historicoMILLONMIN, "L");
          actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
        }
        const mayoritario = colorMasRepetido([0, 1, 2, 3, 4]);
        if (mayoritario !== coloresDigitos[5] && mayoritario !== coloresDigitos[6] && mayoritario === coloresDigitos[7]) {
          agregarAHistorico(historicoMILLONMAY, "G2");
          actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
        } else if (mayoritario !== coloresDigitos[5] && mayoritario !== coloresDigitos[6] && mayoritario !== coloresDigitos[7]) {
          agregarAHistorico(historicoMILLONMAY, "L");
          actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
        }
      }
      //Mejor de 3
      if (coloresDigitos[1] === 'gray' || coloresDigitos[2] === 'gray' || coloresDigitos[3] === 'gray') {
        agregarAHistorico(historicoMEJOR3, "E");
        actualizarHistorico("Mejor_de_3", historicoMEJOR3);
      } else {
        const mayoritario = colorMasRepetido([1, 2, 3]);
        if (mayoritario === coloresDigitos[7]) {
          agregarAHistorico(historicoMEJOR3, "D");
          actualizarHistorico("Mejor_de_3", historicoMEJOR3);
        }
      }
      // Analisis Patron Impar
      //Patron Impar
      if (coloresDigitos[2] !== 'gray') {
        if (coloresDigitos[2] !== coloresDigitos[5] && coloresDigitos[2] === coloresDigitos[7]) {
          agregarAHistorico(historicoPATRONIMPAR, "G1");
          actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
        }
      }
      //Patron 23
      if (coloresDigitos[5] !== 'gray') {
        if (coloresDigitos[5] !== coloresDigitos[6] && coloresDigitos[5] === coloresDigitos[7]) {
          agregarAHistorico(historicoPADRON23, "G1");
          actualizarHistorico("Patrón_23", historicoPADRON23);
        }
      }

    }

    function digito8(vela) {
      ultimaVela = coloresDigitos[8];
      //MHI Minoria y MHI Mayoria
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray') {
        if (coloresDigitos[7] === coloresDigitos[8]) {
          const opuesto = coloresDigitos[7] === 'red' ? 'green' : 'red';
          getCelda('MHI Minoría', 1).style.backgroundColor = opuesto;
          getCelda('MHI Minoría', 4).style.backgroundColor = opuesto;
          getCelda('MHI Mayoría', 1).style.backgroundColor = coloresDigitos[7];
          getCelda('MHI Mayoría', 4).style.backgroundColor = coloresDigitos[7];
        } else {
          getCelda('MHI Minoría', 1).style.backgroundColor = 'red';
          getCelda('MHI Minoría', 4).style.backgroundColor = 'green';
          getCelda('MHI Mayoría', 1).style.backgroundColor = 'green';
          getCelda('MHI Mayoría', 4).style.backgroundColor = 'red';
        }
      }
      //Millon Minoria y Millon Mayoria
      if (coloresDigitos[5] !== 'gray' && coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray') {
        const minoritario = colorMenosRepetido([5, 6, 7, 8]);
        if (minoritario === 'empate') {
          getCelda('Millón Minoría', 1).style.backgroundColor = 'red';
          getCelda('Millón Minoría', 4).style.backgroundColor = 'green';
          getCelda('Millón Mayoría', 1).style.backgroundColor = 'green';
          getCelda('Millón Mayoría', 4).style.backgroundColor = 'red';
        }
        else if (minoritario === 'red') {
          getCelda('Millón Minoría', 1).style.backgroundColor = 'red';
          getCelda('Millón Minoría', 4).style.backgroundColor = 'red';
          getCelda('Millón Mayoría', 1).style.backgroundColor = 'green';
          getCelda('Millón Mayoría', 4).style.backgroundColor = 'green';
        }
        else {
          getCelda('Millón Minoría', 1).style.backgroundColor = 'green';
          getCelda('Millón Minoría', 4).style.backgroundColor = 'green';
          getCelda('Millón Mayoría', 1).style.backgroundColor = 'red';
          getCelda('Millón Mayoría', 4).style.backgroundColor = 'red';
        }
      }
      getCelda('MHI 3 Minoría', 3).style.backgroundColor = '';
      getCelda('MHI 3 Minoría', 6).style.backgroundColor = '';
      getCelda('MHI 3 Mayoría', 3).style.backgroundColor = '';
      getCelda('MHI 3 Mayoría', 6).style.backgroundColor = '';
      //Analasis para Torres Gemelas
      getCelda('Torres Gemelas', 1).style.backgroundColor = '';
      getCelda('Torres Gemelas', 4).style.backgroundColor = '';
      if (coloresDigitos[5] !== 'gray') {
        if (coloresDigitos[5] === 'green') {
          getCelda('Torres Gemelas', 5).style.backgroundColor = coloresDigitos[5];
        } else {
          getCelda('Torres Gemelas', 2).style.backgroundColor = coloresDigitos[5];
        }
      }
      //Analisis correspondiente a TRES MOSQUETEROS
      getCelda('Tres Mosqueteros', 2).style.backgroundColor = '';
      getCelda('Tres Mosqueteros', 5).style.backgroundColor = '';
      if (coloresDigitos[7] !== 'gray') {
        if (coloresDigitos[7] !== coloresDigitos[8]) {
          if (coloresDigitos[7] === 'green') {
            getCelda('Tres Mosqueteros', 6).style.backgroundColor = 'green';
          } else {
            getCelda('Tres Mosqueteros', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analisis correspondiente a TRES VECINOS
      getCelda('Tres Vecinos', 1).style.backgroundColor = '';
      getCelda('Tres Vecinos', 4).style.backgroundColor = '';
      if (coloresDigitos[8] !== 'gray') {
        if (coloresDigitos[8] === 'green') {
          getCelda('Tres Vecinos', 5).style.backgroundColor = 'green';
        } else {
          getCelda('Tres Vecinos', 2).style.backgroundColor = 'red';
        }
      }
      //Analisis Patron 3x1
      getCelda('Patron 3x1', 1).style.backgroundColor = '';
      getCelda('Patron 3x1', 4).style.backgroundColor = '';
      if (coloresDigitos[5] !== 'gray' && coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray') {    //Para si hay un doji no hacer nada
        const minoritario = colorMenosRepetido([5, 6, 7]);
        if (minoritario === 'green') {
          getCelda('Patron 3x1', 5).style.backgroundColor = 'green';
        } else {
          getCelda('Patron 3x1', 2).style.backgroundColor = 'red';
        }
      }
      // Analisis Patron Impar
      getCelda('Patrón Impar', 3).style.backgroundColor = '';
      getCelda('Patrón Impar', 6).style.backgroundColor = '';
      if (coloresDigitos[7] !== 'gray') {
        getCelda('Patrón Impar', 1).style.backgroundColor = coloresDigitos[7];
        getCelda('Patrón Impar', 4).style.backgroundColor = coloresDigitos[7];
      }
      //Analisis de las que pueden ganar en este digito:
      //MHI2 mayoria y minoria2
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario !== coloresDigitos[6] && minoritario !== coloresDigitos[7] && minoritario === coloresDigitos[8]) {
          agregarAHistorico(historicoMHI2, "G2");
          actualizarHistorico("MHI_2_Minoría", historicoMHI2);
        } else if (minoritario !== coloresDigitos[6] && minoritario !== coloresDigitos[7] && minoritario !== coloresDigitos[8]) {
          agregarAHistorico(historicoMHI2, "L");
          actualizarHistorico("MHI_2_Minoría", historicoMHI2);
        }
        const mayoritario = colorMasRepetido([2, 3, 4]);
        if (mayoritario !== coloresDigitos[6] && mayoritario !== coloresDigitos[7] && mayoritario === coloresDigitos[8]) {
          agregarAHistorico(historicoMHI2MAY, "G2");
          actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
        } else if (mayoritario !== coloresDigitos[6] && mayoritario !== coloresDigitos[7] && mayoritario !== coloresDigitos[8]) {
          agregarAHistorico(historicoMHI2MAY, "L");
          actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
        }
      }
      //MHI mayoria3 y minoria3
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario !== coloresDigitos[7] && minoritario === coloresDigitos[8]) {
          agregarAHistorico(historicoMHI3, "G1");
          actualizarHistorico("MHI_3_Minoría", historicoMHI3);
        }
        const mayoritario = colorMasRepetido([2, 3, 4]);
        if (mayoritario !== coloresDigitos[7] && mayoritario === coloresDigitos[8]) {
          agregarAHistorico(historicoMHI3MAY, "G1");
          actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
        }
      }
      if (coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray') {
        const mayoritario = colorMasRepetido([1, 2, 3]);
        if (mayoritario !== coloresDigitos[7] && mayoritario === coloresDigitos[8]) {
          agregarAHistorico(historicoMEJOR3, "G1");
          actualizarHistorico("Mejor_de_3", historicoMEJOR3);
        }
      }
      //Tres Mosqueteros
      if (coloresDigitos[7] === 'gray') {
        agregarAHistorico(historicoMOSQUETEROS, "E");
        actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
      } else {
        if (coloresDigitos[7] === coloresDigitos[8]) {
          agregarAHistorico(historicoMOSQUETEROS, "D");
          actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
        }
      }
      //Patron 23
      if (coloresDigitos[5] !== 'gray') {
        if (coloresDigitos[5] !== coloresDigitos[6] && coloresDigitos[5] !== coloresDigitos[7] && coloresDigitos[5] === coloresDigitos[8]) {
          agregarAHistorico(historicoPADRON23, "G2");
          actualizarHistorico("Patrón_23", historicoPADRON23);
        } else if (coloresDigitos[5] !== coloresDigitos[6] && coloresDigitos[5] !== coloresDigitos[7] && coloresDigitos[5] !== coloresDigitos[8]) {
          agregarAHistorico(historicoPADRON23, "L");
          actualizarHistorico("Patrón_23", historicoPADRON23);
        }
      }

    }

    function digito9(vela) {
      ultimaVela = coloresDigitos[9];
      //Analisis Correspondiente a MHMI Minoria MHI Mayoria
      ['MHI Minoría', 'MHI Mayoría', 'Millón Minoría', 'Millón Mayoría'].forEach(patron => {
        getCelda(patron, 1).style.backgroundColor = '';
        getCelda(patron, 4).style.backgroundColor = '';
      });
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario === 'red') {
          getCelda('MHI Minoría', 2).style.backgroundColor = 'red';
          getCelda('MHI Mayoría', 5).style.backgroundColor = 'green';
        } else if (minoritario === 'green') {
          getCelda('MHI Minoría', 5).style.backgroundColor = 'green';
          getCelda('MHI Mayoría', 2).style.backgroundColor = 'red';
        }
      }
      //Analisis Correspondiente a MHMillónMI Minoria
      if (coloresDigitos[5] !== 'gray' && coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {    //Para si hay un doji no hacer nada
        const minoritario = colorMenosRepetido([5, 6, 7, 8, 9]);
        if (minoritario === 'red') {
          getCelda('Millón Minoría', 2).style.backgroundColor = 'red';
          getCelda('Millón Mayoría', 5).style.backgroundColor = 'green';
        } else {
          getCelda('Millón Minoría', 5).style.backgroundColor = 'green';
          getCelda('Millón Mayoría', 2).style.backgroundColor = 'red';
        }
      }
      //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
      if (coloresDigitos[7] !== 'gray' && coloresDigitos[8] !== 'gray' && coloresDigitos[9] !== 'gray') {
        const minoritario = colorMenosRepetido([7, 8, 9]);
        if (minoritario === 'red') {
          getCelda('MHI 2 Minoría', 1).style.backgroundColor = 'red';
          getCelda('MHI 2 Minoría', 4).style.backgroundColor = 'red';
          getCelda('MHI 2 Mayoría', 1).style.backgroundColor = 'green';
          getCelda('MHI 2 Mayoría', 4).style.backgroundColor = 'green';
        } else if (minoritario === 'green') {
          getCelda('MHI 2 Minoría', 1).style.backgroundColor = 'green';
          getCelda('MHI 2 Minoría', 4).style.backgroundColor = 'green';
          getCelda('MHI 2 Mayoría', 1).style.backgroundColor = 'red';
          getCelda('MHI 2 Mayoría', 4).style.backgroundColor = 'red';
        }
      }
      //Analasis para Torres Gemelas
      getCelda('Torres Gemelas', 2).style.backgroundColor = '';
      getCelda('Torres Gemelas', 5).style.backgroundColor = '';
      if (coloresDigitos[5] !== 'gray') {
        if (coloresDigitos[5] !== coloresDigitos[9]) {
          if (coloresDigitos[5] === 'green') {
            getCelda('Torres Gemelas', 6).style.backgroundColor = coloresDigitos[0];
          } else {
            getCelda('Torres Gemelas', 3).style.backgroundColor = coloresDigitos[0];
          }
        }
      }
      //Analisis correspondiente a TRES MOSQUETEROS
      getCelda('Tres Mosqueteros', 3).style.backgroundColor = '';
      getCelda('Tres Mosqueteros', 6).style.backgroundColor = '';
      //Analisis correspondiente a TRES VECINOS
      getCelda('Tres Vecinos', 2).style.backgroundColor = '';
      getCelda('Tres Vecinos', 5).style.backgroundColor = '';
      if (coloresDigitos[8] !== 'gray') {
        if (coloresDigitos[8] !== coloresDigitos[9]) {
          if (coloresDigitos[8] === 'green') {
            getCelda('Tres Vecinos', 6).style.backgroundColor = 'green';
          } else {
            getCelda('Tres Vecinos', 3).style.backgroundColor = 'red';
          }
        }
      }
      //Analisis correspondiente a PATRON 23
      getCelda('Patrón 23', 1).style.backgroundColor = 'green';
      getCelda('Patrón 23', 4).style.backgroundColor = 'red';
      //Analisis Patron 3x1
      getCelda('Patron 3x1', 2).style.backgroundColor = '';
      getCelda('Patron 3x1', 5).style.backgroundColor = '';
      if (coloresDigitos[5] !== 'gray' && coloresDigitos[6] !== 'gray' && coloresDigitos[7] !== 'gray') {    //Para si hay un doji no hacer nada
        const minoritario = colorMenosRepetido([5, 6, 7]);
        if (minoritario !== coloresDigitos[4]) {
          if (minoritario === 'green') {
            getCelda('Patron 3x1', 6).style.backgroundColor = 'green';
          } else {
            getCelda('Patron 3x1', 3).style.backgroundColor = 'red';
          }
        }
      }
      // Analisis Patron Impar
      getCelda('Patrón Impar', 1).style.backgroundColor = '';
      getCelda('Patrón Impar', 4).style.backgroundColor = '';

      //MHI2 mayoria y minoria2
      if (coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray' && coloresDigitos[4] !== 'gray') {
        const minoritario = colorMenosRepetido([2, 3, 4]);
        if (minoritario !== coloresDigitos[7] && minoritario !== coloresDigitos[8] && minoritario === coloresDigitos[9]) {
          agregarAHistorico(historicoMHI3, "G2");
          actualizarHistorico("MHI_3_Minoría", historicoMHI3);
        } else if (minoritario !== coloresDigitos[7] && minoritario !== coloresDigitos[8] && minoritario !== coloresDigitos[9]) {
          agregarAHistorico(historicoMHI3, "L");
          actualizarHistorico("MHI_3_Minoría", historicoMHI3);
        }
        const mayoritario = colorMasRepetido([2, 3, 4]);
        if (mayoritario !== coloresDigitos[7] && mayoritario !== coloresDigitos[8] && mayoritario === coloresDigitos[9]) {
          agregarAHistorico(historicoMHI3MAY, "G2");
          actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
        } else if (mayoritario !== coloresDigitos[7] && mayoritario !== coloresDigitos[8] && mayoritario !== coloresDigitos[9]) {
          agregarAHistorico(historicoMHI3MAY, "L");
          actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
        }
      }
      //Torres Gemelas
      if (coloresDigitos[5] === 'gray') {
        agregarAHistorico(historicoTORRESGEMELAS, "E");
        actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
      } else {
        if (coloresDigitos[5] === coloresDigitos[9]) {
          agregarAHistorico(historicoTORRESGEMELAS, "D");
          actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
        }
      }
      //Mejor de 3
      if (coloresDigitos[1] !== 'gray' && coloresDigitos[2] !== 'gray' && coloresDigitos[3] !== 'gray') {
        const mayoritario = colorMasRepetido([1, 2, 3]);
        if (mayoritario !== coloresDigitos[7] && mayoritario !== coloresDigitos[8] && mayoritario === coloresDigitos[9]) {
          agregarAHistorico(historicoMEJOR3, "G2");
          actualizarHistorico("Mejor_de_3", historicoMEJOR3);
        } else if (mayoritario !== coloresDigitos[7] && mayoritario !== coloresDigitos[8] && mayoritario !== coloresDigitos[9]) {
          agregarAHistorico(historicoMEJOR3, "L");
          actualizarHistorico("Mejor_de_3", historicoMEJOR3);
        }
      }
      //Tres mosqueteros
      if (coloresDigitos[7] !== 'gray') {
        if (coloresDigitos[7] !== coloresDigitos[8] && coloresDigitos[7] === coloresDigitos[9]) {
          agregarAHistorico(historicoMOSQUETEROS, "G1");
          actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
        }
      }
      //Patron Impar
      if (coloresDigitos[2] !== 'gray') {
        if (coloresDigitos[2] !== coloresDigitos[5] && coloresDigitos[2] !== coloresDigitos[7] && coloresDigitos[2] === coloresDigitos[9]) {
          agregarAHistorico(historicoPATRONIMPAR, "G2");
          actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
        } else if (coloresDigitos[2] !== coloresDigitos[5] && coloresDigitos[2] !== coloresDigitos[7] && coloresDigitos[2] !== coloresDigitos[9]) {
          agregarAHistorico(historicoPATRONIMPAR, "L");
          actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
        }
      }
      //Tres Vecinos
      if (coloresDigitos[8] === 'gray') {
        agregarAHistorico(historicoTRESVECINOS, "E");
        actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
      } else {
        if (coloresDigitos[8] === coloresDigitos[9]) {
          agregarAHistorico(historicoTRESVECINOS, "D");
          actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
        }
      }
      //Patron 3x1
      if (coloresDigitos[5] === 'gray' || coloresDigitos[6] === 'gray' || coloresDigitos[7] === 'gray') {
        agregarAHistorico(historicoPATRON3X1, "E");
        actualizarHistorico("Patron_3x1", historicoPATRON3X1);
      } else {
        const minoritario = colorMenosRepetido([5, 6, 7]);
        if (minoritario === coloresDigitos[9]) {
          agregarAHistorico(historicoPATRON3X1, "D");
          actualizarHistorico("Patron_3x1", historicoPATRON3X1);
        }
      }
    }

    function getCelda(patron, columnaIndex) {
      const tabla = document.getElementById('tablaPatrones');
      for (let i = 1; i < tabla.rows.length; i++) { // saltamos encabezado
        const fila = tabla.rows[i];
        if (fila.cells[0].innerText.trim() === patron.trim()) {
          return fila.cells[columnaIndex];
        }
      }
      return null; // No encontrada
    }

    function colorMenosRepetido(indices) {
      let contador = { green: 0, red: 0 };
      for (let i of indices) {
        const color = coloresDigitos[i];
        if (color === 'green') contador.green++;
        else if (color === 'red') contador.red++;
      }
      const total = contador.green + contador.red;
      if (total === 0) return null;
      if (contador.green === indices.length) return 'red';
      if (contador.red === indices.length) return 'green';
      if (contador.green === contador.red) return 'empate';
      return contador.green < contador.red ? 'green' : 'red';
    }

    function colorMasRepetido(indices) {
      let contador = { green: 0, red: 0 };

      for (let i of indices) {
        const color = coloresDigitos[i];
        if (color === 'green') contador.green++;
        else if (color === 'red') contador.red++;
      }

      const total = contador.green + contador.red;
      if (total === 0) return null;

      if (contador.green === contador.red) return 'empate';

      // Devolver el más repetido
      return contador.green > contador.red ? 'green' : 'red';
    }

    async function actualizarHistorico(patronId, historicoPatron) {
      const cuadrosContainer = document.getElementById(patronId);
      if (!cuadrosContainer) {
        console.error(`No se encontró el patrón con ID: ${patronId}`);
        return;
      }
      if (historicoPatron.length === 0) {
        console.warn('No hay datos en historicoPatron para aplicar al patrón');
        return;
      }
      // Aplicar cada valor del histórico a su cuadro correspondiente
      historicoPatron.forEach((valor, index) => {
        const cuadroEspecifico = cuadrosContainer.querySelector(`.cuadro[data-index="${index}"]`);
        if (cuadroEspecifico) {
          // Aplicar estilo según el valor
          switch (valor) {
            case 'D':
              cuadroEspecifico.style.backgroundColor = "green";
              cuadroEspecifico.textContent = "";
              break;
            case 'G1':
              cuadroEspecifico.style.backgroundColor = "green";
              cuadroEspecifico.textContent = "G1";
              break;
            case 'G2':
              cuadroEspecifico.style.backgroundColor = "green";
              cuadroEspecifico.textContent = "G2";
              break;
            case 'L':
              cuadroEspecifico.style.backgroundColor = "red";
              cuadroEspecifico.textContent = "";
              break;
            case 'E':
              cuadroEspecifico.style.backgroundColor = "gray";
              cuadroEspecifico.textContent = "";
              break;
            default:
              console.warn(`Valor desconocido en historicoPatron: ${valor}`);
          }
        } else {
          console.warn(`No se encontró cuadro con data-index="${index}" en el patrón ${patronId}`);
        }
      });
    }

    function agregarAHistorico(historico, valor) {
      if (historico.length < 24) {
        historico.push(valor); // aún no llegamos a 24, solo añadimos
      } else {
        historico.shift();     // ya hay 24, quitamos el primero
        historico.push(valor); // y añadimos al final
      }
    }

  </script>






  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.39.5/dist/umd/supabase.min.js"></script>

  <script>



    document.addEventListener('DOMContentLoaded', () => {
      const patrones = [
        'MHI Minoría', 'MHI 2 Minoría', 'MHI 3 Minoría',
        'MHI Mayoría', 'MHI 2 Mayoría', 'MHI 3 Mayoría',
        'Millón Minoría', 'Millón Mayoría', 'Torres Gemelas',
        'Mejor de 3', 'Tres Mosqueteros', 'Patrón Impar',
        'Tres Vecinos', 'Patron 3x1', 'Patrón 23'
      ];
      const leftPanel = document.querySelector('.left-panel');
      patrones.forEach(nombre => {
        const patronDiv = document.createElement('div');
        patronDiv.className = 'patron';
        patronDiv.innerHTML = `
        <h3>${nombre}</h3>
        <div class="cuadros" id="${nombre.replace(/\s/g, '_')}">
          ${Array(24).fill().map((_, i) =>
          `<div class="cuadro" data-patron="${nombre}" data-index="${i}"></div>`
        ).join('')}
        </div>
      `;
        leftPanel.appendChild(patronDiv);
      });
    });

    cargarSignalConfiguracion();


    async function cargarSignalConfiguracion() {

      userId = "<%= user.id %>";
      try {
        const { data: config, error } = await supabase
          .from('configuracion_senal_usuario')
          .select('*')
          .eq('user_id', userId)
          .maybeSingle();
        if (error) throw error;

        if (config) {
          signalConfig = config
        }
      } catch (error) {
        console.error("Error al cargar configuración:", error.message);
      }
    }

  </script>

  <script>
    let modoAutomatico = false;
    let intervaloAutomatico = null;

    const btnSiguiente = document.getElementById("btnSiguiente");
    const btnAutomatico = document.getElementById("btnAutomatico");
    const tiempoEsperaInput = document.getElementById("tiempoEspera");

    function iniciarAutomatico() {
      modoAutomatico = true;
      btnAutomatico.innerHTML = "■ Detener";
      btnAutomatico.classList.remove("btn-success");
      btnAutomatico.classList.add("btn-danger");
      btnSiguiente.disabled = true;
      avanzarUnMinuto();
      ejecutarPasoAutomatico();
    }

    function pararAutomatico() {
      modoAutomatico = false;
      btnAutomatico.innerHTML = "▶ Automático";
      btnAutomatico.classList.remove("btn-danger");
      btnAutomatico.classList.add("btn-success");
      btnSiguiente.disabled = false;

      clearTimeout(intervaloAutomatico);
      intervaloAutomatico = null;
    }

    function ejecutarPasoAutomatico() {
      if (!modoAutomatico) return;

      if (indiceActual + 1 >= velasCargadas.length) {
        Swal.fire({
          title: '⚠️ No hay más velas disponibles',
          text: '¿Deseas resumir los resultados?',
          icon: 'question',
          showCancelButton: true,
          confirmButtonText: '📊 Sí, resumir',
          cancelButtonText: '❌ No',
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          allowOutsideClick: false
        }).then((result) => {
          if (result.isConfirmed) {
            exportarExcel();
          } else {
            console.log("El usuario decidió no resumir los resultados.");
          }
        });
        return;
      }
      indiceActual++;
      mostrarVelasDesdeIndice(indiceActual);
      velaActual = velasCargadas[indiceActual];
      analizarVelaPorDigito(velaActual);
      calcularPorcentajeNoPerdidasPorPatron();
      verificaAlertas();

      // 🔹 leer el valor actual del input en tiempo real
      const segundos = parseFloat(tiempoEsperaInput.value) || 1;

      intervaloAutomatico = setTimeout(() => {
        avanzarUnMinuto();
        ejecutarPasoAutomatico(); // recursivo para respetar nuevo valor
      }, segundos * 1000);
    }

    btnAutomatico.addEventListener("click", () => {
      if (!modoAutomatico) {
        iniciarAutomatico();
      } else {
        pararAutomatico();
      }
    });


  </script>

  <script>
    let signalConfig = null;
    async function verificaAlertas() {
      const ahora = new Date();
      const hora_final = ahora.getHours().toString().padStart(2, '0') + ':' +
        ahora.getMinutes().toString().padStart(2, '0');


      //Primero Confirmo si el usuario tiene las notificaciones activadas
      if (signalConfig.notificacion !== "none") {
        //Leer configuracion martingala
        let gale = "No usar Martin Gala";
        let condicion = "";
        let operacion = "";
        let cantGale = 0;
        if (signalConfig.martin_gala === "gale2") {
          gale = "Usar 2 Martin Gala";
          cantGale = 2
        } else if (signalConfig.martin_gala === "gale1directo" || signalConfig.martin_gala === "gale1trasperdida") {
          gale = "Usar 1 Martin Gala";
          cantGale = 1
        }

        if (signalConfig.confluencia) {  //Notificacion para la confluencia de patrones
          if (condicionConfluencia === ultimaVela) {
            confluenciaActiva = true;
          } else if (condicionConfluencia !== ultimaVela) {     //else if (condicionConfluencia !== null && condicionConfluencia !== ultimaVela) {
            confluenciaActiva = false;
            condicionConfluencia = null;
            direccionObjetivoConfluencia = null;
            firstLoss = 0;
          }

          if (confluenciaActiva) {

            if (signalConfig.martin_gala === "gale1trasperdida") {
              if (direccionObjetivoConfluencia === 'green') {
                if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                  mostrarPopup("Confluencia de Patrones", "Bajista", "CALL", gale, cantGale);
                }
              }
              if (direccionObjetivoConfluencia === 'red') {
                if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                  mostrarPopup("Confluencia de Patrones", "Alcista", "PUT", gale, cantGale);
                }
              }
              confluenciaActiva = false;
              condicionConfluencia = null;
              direccionObjetivoConfluencia = null;
              firstLoss = 0;
            }

            if (signalConfig.martin_gala === "nogale") {
              if (firstLoss === 0) {
                console.log("Se cumplo la condicion")
              }
              if (firstLoss === 1) {
                console.log("Perdio 1ra Entrada")
                if (direccionObjetivoConfluencia === 'green') {
                  if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                    mostrarPopup("Confluencia de Patrones", "Bajista", "CALL", gale, cantGale);
                  }
                }
                if (direccionObjetivoConfluencia === 'red') {
                  if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                    mostrarPopup("Confluencia de Patrones", "Alcista", "PUT", gale, cantGale);
                  }
                }
                confluenciaActiva = false;
                condicionConfluencia = null;
                direccionObjetivoConfluencia = null;
                firstLoss = 0;
              }
              if (firstLoss === 0 && direccionObjetivoConfluencia !== ultimaVela) {
                firstLoss++;
              }
            }
          }

          const conteo = contarCeldasColoreadas();
          const escenarios = [
            { cond: conteo.verde.verde === 6, log: "Si verde CALL", tipo: "Alcista", op: "CALL", color: 'green', dir: 'green' },
            { cond: conteo.verde.rojo === 6, log: "Si verde PUT", tipo: "Alcista", op: "PUT", color: 'green', dir: 'red' },
            { cond: conteo.rojo.verde === 6, log: "Si roja CALL", tipo: "Bajista", op: "CALL", color: 'red', dir: 'green' },
            { cond: conteo.rojo.rojo === 6, log: "Si roja PUT", tipo: "Bajista", op: "PUT", color: 'red', dir: 'red' }
          ];

          for (let e of escenarios) {
            if (e.cond) {
              console.log(e.log);

              if (["gale1directo", "gale2", "nogaledirecto"].includes(signalConfig.martin_gala)) {
                if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                  mostrarPopup("Confluencia de Patrones", e.tipo, e.op, gale, cantGale);
                }
              } else {
                condicionConfluencia = e.color;
                direccionObjetivoConfluencia = e.dir;
              }
            }
          }
        }

        if (signalConfig.alcanza_100) { // Notificación para cuando alcanza el 100%
          for (let patron in alcanza100) {
            if (alcanza100[patron]) {
              const filaTabla = [...document.querySelectorAll('#tablaPatrones tbody tr')].find(
                fila => fila.cells[0]?.textContent.trim() === patron.trim()
              );
              if (filaTabla) {
                let columnas = [];
                if (signalConfig.martin_gala === "gale2" || signalConfig.martin_gala === "gale1directo") {
                  columnas = [1, 4];
                } else if (signalConfig.martin_gala === "gale1trasperdida") {
                  columnas = [2, 5];
                } else if (signalConfig.martin_gala === "nogale") {
                  columnas = [3, 6];
                }
                let infoColores = [];
                for (let col of columnas) {
                  const cell = filaTabla.cells[col];
                  const bg = cell?.style.backgroundColor.toLowerCase();
                  if (bg === "green" || bg === "red") {
                    const condicion = (col <= 3) ? "Alcista" : "Bajista";
                    const operacion = (bg === "green") ? "CALL" : "PUT";
                    infoColores.push({ condicion, operacion });
                  }
                }
                if (infoColores.length > 0) {
                  // Evitamos duplicadas si las dos columnas tienen mismo color y condición
                  const operaciones = infoColores.map(i => i.operacion);
                  const operacionesUnicas = [...new Set(operaciones)];
                  if (operacionesUnicas.length === 1 && infoColores.length === 2) {
                    // Las dos son iguales → una sola alerta
                    const operacion = operacionesUnicas[0];
                    const condicion = infoColores[0].condicion; // Tomamos cualquiera

                    if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                      mostrarPopup(`${patron} alcanza 100%`, "Alc/Baj", operacion, gale, cantGale);
                    }
                  } else {
                    // Hay dos diferentes → mostramos ambas
                    for (let info of infoColores) {
                      if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                        mostrarPopup(`${patron} alcanza 100%`, info.condicion, info.operacion, gale, cantGale);
                      }
                    }
                  }
                  alcanza100[patron] = false;
                }
              }
            }
          }
        }

        if (signalConfig.pierde_100) { //Notificacion para cuando pierde el 100%
          for (let patron in pierde100) {
            if (pierde100[patron]) {
              const filaTabla = [...document.querySelectorAll('#tablaPatrones tbody tr')].find(
                fila => fila.cells[0]?.textContent.trim() === patron.trim()
              );
              if (filaTabla) {
                let columnas = [];
                if (signalConfig.martin_gala === "gale2" || signalConfig.martin_gala === "gale1directo") {
                  columnas = [1, 4];
                } else if (signalConfig.martin_gala === "gale1trasperdida") {
                  columnas = [2, 5];
                } else if (signalConfig.martin_gala === "nogale") {
                  columnas = [3, 6];
                }
                let infoColores = [];
                for (let col of columnas) {
                  const cell = filaTabla.cells[col];
                  const bg = cell?.style.backgroundColor.toLowerCase();
                  if (bg === "green" || bg === "red") {
                    const condicion = (col <= 3) ? "Alcista" : "Bajista";
                    const operacion = (bg === "green") ? "CALL" : "PUT";
                    infoColores.push({ condicion, operacion });
                  }
                }
                if (infoColores.length > 0) {
                  // Evitamos duplicadas si las dos columnas tienen mismo color y condición
                  const operaciones = infoColores.map(i => i.operacion);
                  const operacionesUnicas = [...new Set(operaciones)];
                  if (operacionesUnicas.length === 1 && infoColores.length === 2) {
                    // Las dos son iguales → una sola alerta
                    const operacion = operacionesUnicas[0];
                    const condicion = infoColores[0].condicion; // Tomamos cualquiera
                    if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                      mostrarPopup(`${patron} pierde 100%`, "Alc/Baj", operacion, gale, cantGale);

                    }
                  } else {
                    // Hay dos diferentes → mostramos ambas
                    for (let info of infoColores) {
                      if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                        mostrarPopup(`${patron} pierde 100%`, info.condicion, info.operacion, gale, cantGale);
                      }
                    }
                  }
                  pierde100[patron] = false;
                }
              }
            }
          }
        }

        if (signalConfig.perdidas_2) { // Notificación para dos pérdidas consecutivas
          detectarDosPerdidasSeguidas();
          for (let patron in dosPerdidasSeguidas) {
            if (dosPerdidasSeguidas[patron]) {
              const filaTabla = [...document.querySelectorAll('#tablaPatrones tbody tr')].find(
                fila => fila.cells[0]?.textContent.trim() === patron.trim()
              );
              if (filaTabla) {
                let columnas = [];
                if (signalConfig.martin_gala === "gale2" || signalConfig.martin_gala === "gale1directo") {
                  columnas = [1, 4];
                } else if (signalConfig.martin_gala === "gale1trasperdida") {
                  columnas = [2, 5];
                } else if (signalConfig.martin_gala === "nogale") {
                  columnas = [3, 6];
                }

                let infoColores = [];
                for (let col of columnas) {
                  const cell = filaTabla.cells[col];
                  const bg = cell?.style.backgroundColor.toLowerCase();
                  if (bg === "green" || bg === "red") {
                    const condicion = (col <= 3) ? "Alcista" : "Bajista";
                    const operacion = (bg === "green") ? "CALL" : "PUT";
                    infoColores.push({ condicion, operacion });
                  }
                }

                if (infoColores.length > 0) {
                  const operaciones = infoColores.map(i => i.operacion);
                  const operacionesUnicas = [...new Set(operaciones)];

                  if (operacionesUnicas.length === 1 && infoColores.length === 2) {
                    const operacion = operacionesUnicas[0];
                    const condicion = infoColores[0].condicion;

                    if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                      mostrarPopup(`${patron} con 2 pérdidas seguidas`, "Alc/Baj", operacion, gale, cantGale);
                    }

                  } else {
                    for (let info of infoColores) {
                      if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                        mostrarPopup(`${patron} con 2 pérdidas seguidas`, info.condicion, info.operacion, gale, cantGale);
                      }
                    }
                  }

                  dosPerdidasSeguidas[patron] = false; // Reseteamos
                }
              }
            }
          }
        }

        if (signalConfig.perdidas_3) { // Notificación para dos pérdidas consecutivas
          detectarTresPerdidasSeguidas();
          for (let patron in tresPerdidasSeguidas) {
            if (tresPerdidasSeguidas[patron]) {
              const filaTabla = [...document.querySelectorAll('#tablaPatrones tbody tr')].find(
                fila => fila.cells[0]?.textContent.trim() === patron.trim()
              );
              if (filaTabla) {
                let columnas = [];
                if (signalConfig.martin_gala === "gale2" || signalConfig.martin_gala === "gale1directo") {
                  columnas = [1, 4];
                } else if (signalConfig.martin_gala === "gale1trasperdida") {
                  columnas = [2, 5];
                } else if (signalConfig.martin_gala === "nogale") {
                  columnas = [3, 6];
                }

                let infoColores = [];
                for (let col of columnas) {
                  const cell = filaTabla.cells[col];
                  const bg = cell?.style.backgroundColor.toLowerCase();
                  if (bg === "green" || bg === "red") {
                    const condicion = (col <= 3) ? "Alcista" : "Bajista";
                    const operacion = (bg === "green") ? "CALL" : "PUT";
                    infoColores.push({ condicion, operacion });
                  }
                }

                if (infoColores.length > 0) {
                  const operaciones = infoColores.map(i => i.operacion);
                  const operacionesUnicas = [...new Set(operaciones)];

                  if (operacionesUnicas.length === 1 && infoColores.length === 2) {
                    const operacion = operacionesUnicas[0];
                    const condicion = infoColores[0].condicion;

                    if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                      mostrarPopup(`${patron} con 3 pérdidas seguidas`, "Alc/Baj", operacion, gale, cantGale);
                    }

                  } else {
                    for (let info of infoColores) {
                      if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                        mostrarPopup(`${patron} con 3 pérdidas seguidas`, info.condicion, info.operacion, gale, cantGale);
                      }
                    }
                  }

                  tresPerdidasSeguidas[patron] = false; // Reseteamos
                }
              }
            }
          }
        }


        if (signalConfig.cuadrante_doji) {
          detectarCaudranteConDoji();
          for (let patron in cuadranteConDoji) {
            if (cuadranteConDoji[patron]) {
              const filaTabla = [...document.querySelectorAll('#tablaPatrones tbody tr')].find(
                fila => fila.cells[0]?.textContent.trim() === patron.trim()
              );
              if (filaTabla) {
                let columnas = [];
                if (signalConfig.martin_gala === "gale2" || signalConfig.martin_gala === "gale1directo") {
                  columnas = [1, 4];
                } else if (signalConfig.martin_gala === "gale1trasperdida") {
                  columnas = [2, 5];
                } else if (signalConfig.martin_gala === "nogale") {
                  columnas = [3, 6];
                }

                let infoColores = [];
                for (let col of columnas) {
                  const cell = filaTabla.cells[col];
                  const bg = cell?.style.backgroundColor.toLowerCase();
                  if (bg === "green" || bg === "red") {
                    const condicion = (col <= 3) ? "Alcista" : "Bajista";
                    const operacion = (bg === "green") ? "CALL" : "PUT";
                    infoColores.push({ condicion, operacion });
                  }
                }

                if (infoColores.length > 0) {
                  const operaciones = infoColores.map(i => i.operacion);
                  const operacionesUnicas = [...new Set(operaciones)];

                  if (operacionesUnicas.length === 1 && infoColores.length === 2) {
                    const operacion = operacionesUnicas[0];
                    const condicion = infoColores[0].condicion;

                    if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                      mostrarPopup(`${patron} con con un cuadrante con Doji`, "Alc/Baj", operacion, gale, cantGale);
                    }

                  } else {
                    for (let info of infoColores) {
                      if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                        mostrarPopup(`${patron} con con un cuadrante con Doji`, info.condicion, info.operacion, gale, cantGale);
                      }
                    }
                  }
                  cuadranteConDoji[patron] = false; // Reseteamos
                }
              }
            }
          }

        }


      }

    }

    function contarCeldasColoreadas() {
      const tabla = document.getElementById('tablaPatrones');
      const resultados = {
        verde: { verde: 0, rojo: 0 }, // Para las columnas de vela verde (1-3)
        rojo: { verde: 0, rojo: 0 }   // Para las columnas de vela roja (4-6)
      };

      // Recorrer todas las filas excepto los encabezados
      for (let i = 2; i < tabla.rows.length; i++) {
        const fila = tabla.rows[i];

        // Contar para columnas de vela verde (columnas 1-3)
        for (let j = 1; j <= 3; j++) {
          const celda = fila.cells[j];
          const bgColor = celda.style.backgroundColor.toLowerCase();

          if (bgColor === 'green') {
            resultados.verde.verde++;
          } else if (bgColor === 'red') {
            resultados.verde.rojo++;
          }
        }

        // Contar para columnas de vela roja (columnas 4-6)
        for (let j = 4; j <= 6; j++) {
          const celda = fila.cells[j];
          const bgColor = celda.style.backgroundColor.toLowerCase();

          if (bgColor === 'green') {
            resultados.rojo.verde++;
          } else if (bgColor === 'red') {
            resultados.rojo.rojo++;
          }
        }
      }

      return resultados;
    }

    function detectarDosPerdidasSeguidas() {
      const patrones = document.querySelectorAll('.patron');
      patrones.forEach(patron => {
        const h3 = patron.querySelector('h3');
        const nombre = h3.innerText.split(' (')[0].trim();
        const cuadros = Array.from(patron.querySelectorAll('.cuadro'));
        const total = cuadros.length;

        // Si hay al menos 3 cuadros (por seguridad)
        if (total >= 24) {
          const antepenultimo = cuadros[total - 3];
          const penultimo = cuadros[total - 2];
          const ultimo = cuadros[total - 1];

          const colorPenultimo = penultimo.style.backgroundColor.toLowerCase();
          const colorUltimo = ultimo.style.backgroundColor.toLowerCase();
          const colorAntepenultimo = antepenultimo.style.backgroundColor.toLowerCase();

          // Condición: dos rojos seguidos y el tercero NO rojo
          if (colorPenultimo === 'red' && colorUltimo === 'red' && colorAntepenultimo !== 'red') {
            dosPerdidasSeguidas[nombre] = true;
          } else {
            dosPerdidasSeguidas[nombre] = false;
          }
        } else {
          dosPerdidasSeguidas[nombre] = false;
        }
      });
    }

    function detectarTresPerdidasSeguidas() {
      const patrones = document.querySelectorAll('.patron');
      patrones.forEach(patron => {
        const h3 = patron.querySelector('h3');
        const nombre = h3.innerText.split(' (')[0].trim();
        const cuadros = Array.from(patron.querySelectorAll('.cuadro'));
        const total = cuadros.length;
        // Si hay al menos 3 cuadros (por seguridad)
        if (total >= 24) {
          const anteantepenultimo = cuadros[total - 4];
          const antepenultimo = cuadros[total - 3];
          const penultimo = cuadros[total - 2];
          const ultimo = cuadros[total - 1];

          const colorPenultimo = penultimo.style.backgroundColor.toLowerCase();
          const colorUltimo = ultimo.style.backgroundColor.toLowerCase();
          const colorAntepenultimo = antepenultimo.style.backgroundColor.toLowerCase();
          const colorAnteAntepenultimo = anteantepenultimo.style.backgroundColor.toLowerCase();

          // Condición: dos rojos seguidos y el tercero NO rojo
          if (colorPenultimo === 'red' && colorUltimo === 'red' && colorAntepenultimo === 'red' && colorAnteAntepenultimo !== 'red') {
            tresPerdidasSeguidas[nombre] = true;
          } else {
            tresPerdidasSeguidas[nombre] = false;
          }
        } else {
          tresPerdidasSeguidas[nombre] = false;
        }
      });
    }

    function detectarCaudranteConDoji() {
      const patrones = document.querySelectorAll('.patron');
      patrones.forEach(patron => {
        const h3 = patron.querySelector('h3');
        const nombre = h3.innerText.split(' (')[0].trim();
        const cuadros = Array.from(patron.querySelectorAll('.cuadro'));
        const total = cuadros.length;
        // Si hay al menos 3 cuadros (por seguridad)
        if (total >= 24) {
          const penultimo = cuadros[total - 2];
          const ultimo = cuadros[total - 1];
          const colorPenultimo = penultimo.style.backgroundColor.toLowerCase();
          const colorUltimo = ultimo.style.backgroundColor.toLowerCase();

          // Condición: dos rojos seguidos y el tercero NO rojo
          if (colorPenultimo !== 'gray' && colorUltimo === 'gray') {
            cuadranteConDoji[nombre] = true;
          } else {
            cuadranteConDoji[nombre] = false;
          }
        } else {
          cuadranteConDoji[nombre] = false;
        }
      });
    }

    async function calcularPorcentajeNoPerdidasPorPatron() {
      const patrones = document.querySelectorAll('.patron');

      patrones.forEach(patron => {
        const h3 = patron.querySelector('h3');
        const nombreOriginal = h3.innerText.split(' (')[0]; // Quita porcentaje anterior
        const cuadros = patron.querySelectorAll('.cuadro');
        let perdidas = 0;
        let empate = 0;
        cuadros.forEach(cuadro => {
          if (cuadro.style.backgroundColor.toLowerCase() === 'red') {
            perdidas++;
          }
          if (cuadro.style.backgroundColor.toLowerCase() === 'gray') {
            empate++;
          }
        });
        const total = 24 - empate;
        const noPerdidas = total - perdidas;
        const porcentaje = ((noPerdidas / total) * 100).toFixed(0);
        h3.innerText = `${nombreOriginal} (${porcentaje}%)`;
        h3.style.color = porcentaje === "100" ? "green" : "";
        // Verificar cambio de estado
        const estabaEn100 = estadoAnteriorPatrones[nombreOriginal] === true;
        const estaEn100 = porcentaje === "100";
        // Guardar nuevo estado
        estadoAnteriorPatrones[nombreOriginal] = estaEn100;
        if (!estabaEn100 && estaEn100) {
          alcanza100[nombreOriginal] = true;
        } else if (estabaEn100 && !estaEn100) {
          pierde100[nombreOriginal] = true;
        }
      });

    }

    function mostrarPopup(signal, condicion, operacion, mg, cantGale) {
      const hora_final = document.getElementById("horaAnalizada").textContent.trim();
      const hora_final_str = hora_final;  // o lo que tengas en tu elemento
      const [horas, minutos] = hora_final_str.split(':').map(Number);
      const fechaHora = new Date();
      fechaHora.setHours(horas);
      fechaHora.setMinutes(minutos);
      fechaHora.setSeconds(0);
      fechaHora.setMilliseconds(0);
      // Sumar un minuto
      fechaHora.setMinutes(fechaHora.getMinutes() + 1);
      // Formatear a "HH:mm"
      const vela_condicional = fechaHora.toTimeString().slice(0, 5);

      const analisisPar = document.getElementById('selectorPar').value;
      const texto = `
                ${analisisPar}<br>
                ${signal}<br>
                Condición: Vela ${vela_condicional} ${condicion}<br>
                Operación: ${operacion}<br>
                ${mg}
                `;
      const container = document.getElementById("popup-container");

      const popup = document.createElement("div");
      popup.className = "popup-alert";
      popup.innerHTML = `
                <div class="popup-content">
                    <button class="cerrar-popup" onclick="this.parentElement.parentElement.remove()">✖</button>
                    <div class="popup-texto">${texto}</div>
                </div>
            `;
      container.appendChild(popup);
      let fechaCompleta = document.getElementById("fechaInicio").value;
      let fechaSolo = "";
      if (fechaCompleta) {
        let fechaObj = new Date(fechaCompleta);
        fechaSolo = fechaObj.toLocaleDateString("es-ES"); // ej: "08/08/2025"
      }

      // Guardar en array
      alertasExportar.push({
        Fecha: fechaSolo,
        Par: analisisPar,
        Señal: signal,
        "Vela Condicional": vela_condicional,
        Condición: condicion,
        Operación: operacion,
        "Martin Gala": cantGale,
        Resultado: ""
      });

    }

    let alertasImportadas = [];

    function convertirFechaHoraISO(fechaStr, horaStr) {
      // fechaStr formato "12/8/2025"
      const partes = fechaStr.split('/');
      if (partes.length !== 3) return null;
      const dd = partes[0].padStart(2, '0');
      const mm = partes[1].padStart(2, '0');
      const yyyy = partes[2];

      // Formato ISO parcial: YYYY-MM-DDTHH:mm
      return `${yyyy}-${mm}-${dd}T${horaStr}`;
    }

    function analizar_alerta(velas, condicion, operacion, martingala) {
      let condicionCumplida = true;
      // normalizamos strings
      const op = (operacion || '').toString().toLowerCase();
      condicion = condicion || 'Alc/Baj';
      martingala = parseInt(martingala) || 0;

      if (condicion === "Alcista") {
        if (!velas[0] || velas[0].color !== "green") condicionCumplida = false;
      } else if (condicion === "Bajista") {
        if (!velas[0] || velas[0].color !== "red") condicionCumplida = false;
      }

      if (!condicionCumplida) return "⚠️"; // condicion no cumplida

      // martingala 0 -> sólo comparar la segunda vela (index 1)
      if (martingala === 0) {
        return (velas[1] && op === velas[1].color) ? "✅" : "❌";
      }

      // martingala 1 -> segunda o tercera
      if (martingala === 1) {
        if (velas[1] && op === velas[1].color) return "✅";
        if (velas[2] && op === velas[2].color) return "✅¹";
        return "❌";
      }

      // martingala 2 -> segunda, tercera o cuarta
      if (martingala === 2) {
        if (velas[1] && op === velas[1].color) return "✅";
        if (velas[2] && op === velas[2].color) return "✅¹";
        if (velas[3] && op === velas[3].color) return "✅²";
        return "❌";
      }

      // fallback
      return "❌";
    }


    async function exportarExcel() {
      if (!alertasExportar || alertasExportar.length === 0) {
        alert("No hay alertas para exportar.");
        return;
      }

      const indicador = document.getElementById("indicador-carga");
      if (indicador) indicador.style.display = "block";

      try {
        for (let i = 0; i < alertasExportar.length; i++) {
          document.querySelector("#indicador-carga strong").textContent = `Analizando alerta ${i + 1} de ${alertasExportar.length}...`;
          const alerta = alertasExportar[i];
          // convertir fecha/hora a ISO que espera tu backend
          const fechaISO = convertirFechaHoraISO(alerta.Fecha, alerta["Vela Condicional"]);
          if (!fechaISO) {
            alertasExportar[i].Resultado = "Fecha inválida";
            console.warn("Fecha inválida para alerta:", alerta);
            continue;
          }

          // Llamada al backend exactamente igual que hacías al importar
          let resp;
          try {
            resp = await fetch('/analizar-alerta', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                par: alerta.Par,
                fechaHora: fechaISO,
                cantidad: 4
              })
            });
          } catch (fetchErr) {
            console.error("Fetch error:", fetchErr);
            alertasExportar[i].Resultado = "Error fetch";
            continue;
          }

          const data = await resp.json().catch(() => ({ velas: [] }));
          const velas = data.velas || [];

          // normalizar operacion a 'green'/'red'
          let operacion = alerta["Operación"] || alerta.Operacion || "";
          if (operacion.toString().toUpperCase() === "PUT") operacion = "red";
          else if (operacion.toString().toUpperCase() === "CALL") operacion = "green";

          const martingala = parseInt(alerta["Martin Gala"] || alerta["MartinGalA"] || 0) || 0;
          const condicion = alerta["Condición"] || alerta.Condicion || "Alc/Baj";

          const resultado = analizar_alerta(velas, condicion, operacion, martingala);
          alertasExportar[i].Resultado = resultado;
        }

        const parSeleccionado = document.getElementById('selectorPar').value;
        const fechaInicio = document.getElementById('fechaInicio').value;
        const fechaFin = document.getElementById('fechaFin').value;
        // Formatear las fechas
        const formatoFecha = (fechaString) => {
          const fecha = new Date(fechaString);

          // Formatear día (DD/MM/YYYY)
          const dia = fecha.getDate().toString().padStart(2, '0');
          const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');

          // Formatear hora (HH:MM)
          const horas = fecha.getHours().toString().padStart(2, '0');
          const minutos = fecha.getMinutes().toString().padStart(2, '0');

          return {
            diaCompleto: `${dia}/${mes}`,
            hora: `${horas}:${minutos}`
          };
        };
        const inicioFormateado = formatoFecha(fechaInicio);
        const finFormateado = formatoFecha(fechaFin);
        // Crear nombre del archivo
        const nombreArchivo = `Backtesting ${parSeleccionado} ${inicioFormateado.diaCompleto} (${inicioFormateado.hora} - ${finFormateado.hora})`;


        let ganadoDirecto = 0;
        let ganadoG1 = 0;
        let ganadoG2 = 0;
        let perdido = 0;
        let noCumplida = 0;
        console.log(alertasExportar);

        alertasExportar.forEach(a => {
          if (a.Resultado === "✅") ganadoDirecto++;
          else if (a.Resultado === "✅¹") ganadoG1++;
          else if (a.Resultado === "✅²") ganadoG2++;
          else if (a.Resultado === "❌") perdido++;
          else if (a.Resultado === "⚠️") noCumplida++;
        });

        Swal.fire({
          title: '📊 Resumen del Backtesting',
          html: `
        <div style="text-align:left; font-size:16px;">
            <b>✅ Ganado directo:</b> ${ganadoDirecto}<br>
            <b>✅¹ Ganado en G1:</b> ${ganadoG1}<br>
            <b>✅² Ganado en G2:</b> ${ganadoG2}<br>
            <b>❌ Perdido:</b> ${perdido}<br>
            <b>⚠️ Condición no cumplida:</b> ${noCumplida}
        </div>
    `,
          icon: 'info',
          showCancelButton: true,                  // ✅ habilitar segundo botón
          confirmButtonText: '📂 Exportar a Excel', // texto botón confirmar
          cancelButtonText: '❌ No exportar',       // texto botón cancelar
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          allowOutsideClick: false
        }).then((result) => {
          if (result.isConfirmed) {
            // crear workbook final y descargar
            const wb = XLSX.utils.book_new();
            const ws = XLSX.utils.json_to_sheet(alertasExportar);
            XLSX.utils.book_append_sheet(wb, ws, "Alertas");
            XLSX.writeFile(wb, `${nombreArchivo}.xlsx`);
          } else if (result.dismiss === Swal.DismissReason.cancel) {
            console.log("El usuario decidió no exportar.");
          }
        });


      } catch (err) {
        console.error("Error exportando:", err);
        alert("Error generando Excel: " + (err && err.message ? err.message : err));
      } finally {
        if (indicador) indicador.style.display = "none";
      }
    }

    function mostrarResumenBacktesting() {
      let ganadoDirecto = 0;
      let ganadoG1 = 0;
      let ganadoG2 = 0;
      let perdido = 0;
      let noCumplida = 0;
      console.log(alertasExportar);

      alertasExportar.forEach(a => {
        if (a.Resultado === "✅") ganadoDirecto++;
        else if (a.Resultado === "✅¹") ganadoG1++;
        else if (a.Resultado === "✅²") ganadoG2++;
        else if (a.Resultado === "❌") perdido++;
        else if (a.Resultado === "⚠️") noCumplida++;
      });

      Swal.fire({
        title: '📊 Resumen del Backtesting',
        html: `
            <div style="text-align:left; font-size:16px;">
                <b>✅ Ganado directo:</b> ${ganadoDirecto}<br>
                <b>✅¹ Ganado en G1:</b> ${ganadoG1}<br>
                <b>✅² Ganado en G2:</b> ${ganadoG2}<br>
                <b>❌ Perdido:</b> ${perdido}<br>
                <b>⚠️ Condición no cumplida:</b> ${noCumplida}
            </div>
        `,
        icon: 'info',
        confirmButtonText: 'Exportar a Excel',
        confirmButtonColor: '#3085d6',
        allowOutsideClick: false
      }).then((result) => {
        if (result.isConfirmed) {
          exportarExcel();
        }
      });
    }


  </script>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>







  <script>


    async function obtenerColoresDeVelas(cantidad) {

      const { data, error } = await clientesupabase
        .from(tablaPar)
        .select('candle_color, start_time, id')  // 👈 incluimos id también para depurar mejor
        .order('id', { ascending: false })       // ✅ ordenar por ID descendente
        .limit(cantidad + 10);

      if (error) {
        console.error("Error al leer de Supabase:", error);
        return [];
      }

      const dataOrdenada = data.reverse();  // ✅ ahora están en orden cronológico
      dataOrdenada.forEach((v, i) => {
        const hora = new Date(`1970-01-01T${v.start_time}`).toLocaleTimeString();
      });


      const colores = dataOrdenada.map(v => v.candle_color?.toLowerCase().trim() || 'gray');
      return colores;
    }
  </script>
























</body>

</html>