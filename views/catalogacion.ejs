<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Catálogo de Patrones</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        body {
            margin: 0;
            font-family: sans-serif;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        .candle-strip {
            display: flex;
            justify-content: center;
            padding: 15px;
            background: #f4f4f4;
            gap: 13px;
            flex-wrap: wrap;
        }

        .candle {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.6), rgba(0, 0, 0, 0.2));
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            border: 2px solid #000;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            color: #fff;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .candle:hover {
            transform: scale(1.1);
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.4);
        }

        .dropdown-wrapper {
            margin-right: 20px;
        }

        .main-container {
            display: flex;
            flex: 1;
        }

        .left-panel {
            width: 75%;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            align-items: start;
            padding: 10px;
            box-sizing: border-box;
            overflow-y: auto;
            border-right: 2px solid #ccc;
        }

        .right-panel {
            width: 25%;
            padding: 10px;
            box-sizing: border-box;
            background-color: #f8f9fa;
            border-left: 1px solid #dee2e6;
        }

        .patron {
            width: 100%;
            margin: 0;
        }


        .patron h3 {
            margin: 5px 0;
            text-align: left;
            font-size: 17px;
            font-weight: bold;
        }

        .cuadros {
            display: grid;
            grid-template-columns: repeat(9, 35px);
            gap: 3px;
        }

        .cuadro {
            display: flex;
            /* Habilita flexbox para centrado fácil */
            align-items: center;
            width: 35px;
            height: 25px;
            border: 2px solid black;
            background-color: white;
            justify-content: center;
            font-weight: bold;
            color: white;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background-color: #fdfdfd;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        table th,
        table td {
            padding: 5px 3px !important;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #dee2e6;
            font-size: 14px;
        }

        table th {
            background-color: #e9ecef;
            font-weight: 600;
        }


        #popup-señal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #222;
            color: #fff;
            padding: 20px 30px;
            border-radius: 10px;
            box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);
            z-index: 9999;
            min-width: 300px;
            max-width: 90%;
            display: none;
        }

        .popup-content {
            position: relative;
        }

        .cerrar-popup {
            position: absolute;
            top: 5px;
            right: 8px;
            background: transparent;
            color: #fff;
            border: none;
            font-size: 18px;
            cursor: pointer;
        }

        #popup-texto {
            font-size: 18px;
            text-align: center;
            padding-top: 10px;
        }

        #popup-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .popup-alert {
            background: #222;
            color: #fff;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
            min-width: 250px;
            max-width: 300px;
            position: relative;
            animation: slideIn 0.3s ease-out;
        }

        .popup-texto {
            font-size: 14px;
            text-align: left;
        }

        .cinta-informativa {
            position: fixed;
            bottom: 0;
            /* Cambia a bottom: 0; si la quieres abajo */
            left: 0;
            width: 100%;
            background: #333;
            color: #fff;
            overflow: hidden;
            white-space: nowrap;
            z-index: 9999;
            height: 30px;
            display: flex;
            align-items: center;
        }

        .contenido-cinta {
            display: inline-block;
            padding-left: 100%;
            animation: scrollCinta 30s linear infinite;
            font-size: 14px;
        }

        @keyframes scrollCinta {
            0% {
                transform: translateX(0%);
            }

            100% {
                transform: translateX(-100%);
            }
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Media queries para ajustar el tamaño mínimo según el tamaño de pantalla */
        @media (max-width: 1200px) {
            .left-panel {
                grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            }
        }

        @media (max-width: 900px) {
            .left-panel {
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .cinta-informativa {
                position: fixed;
                top: 0;
            }


            .main-container {
                position: relative;
            }

            .left-panel {
                width: 100%;
                border-right: none;
                grid-template-columns: 1fr;
                padding: 10px 5px;
            }

            .right-panel {
                position: fixed;
                top: 0;
                right: -100%;
                width: 100%;
                height: 100vh;
                background: #f8f9fa;
                z-index: 1000;
                border-left: none;
                transition: right 0.3s ease;
                padding-top: 60px;
                overflow-y: auto;
            }

            .right-panel.show {
                right: 0;
            }

            .close-panel {
                position: absolute;
                top: 10px;
                right: 10px;
                background: #dc3545;
                color: white;
                border: none;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                font-size: 18px;
                cursor: pointer;
                display: none;
                align-items: center;
                justify-content: center;
                z-index: 1001;
            }

            .right-panel.show .close-panel {
                display: flex;
            }

            /* Overlay para cerrar paneles tocando fuera */
            .panel-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.5);
                z-index: 999;
                display: none;
            }

            .panel-overlay.show {
                display: block;
            }

        }

        @media (max-width: 480px) {
            .left-panel {
                padding: 5px;
                gap: 15px;
            }

            .patron h3 {
                font-size: 14px;
            }

            .cuadros {
                grid-template-columns: repeat(9, 30px);
            }

            .cuadro {
                width: 30px;
                height: 20px;
            }

            .mobile-btn {
                padding: 6px 12px;
                font-size: 12px;
            }
        }
    </style>
</head>

<body>

    <div class="candle-strip" id="candle-strip">

        <div class="dropdown-wrapper">
            <select class="form-select" id="pair-selector" onchange="cambiarParSeleccionado(this)">
                <option value="AUDCAD-OTC">AUDCAD-OTC</option>
                <option value="EURUSD-OTC">EURUSD-OTC</option>
                <option value="EURGBP-OTC">EURGBP-OTC</option>
                <option value="GBPUSD-OTC">GBPUSD-OTC</option>
                <option value="EURJPY-OTC">EURJPY-OTC</option>
                <option value="USDCHF-OTC">USDCHF-OTC</option>
                <!-- Puedes agregar más pares aquí -->
            </select>
        </div>

        <!-- Se insertarán dinámicamente -->
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
        <div class="candle"></div>
    </div>

    <div class="mobile-controls">
        <button id="toggle-sidebar" class="mobile-btn">
            <span>⚙️</span>
        </button>
        <button id="toggle-right-panel" class="mobile-btn">
            <span>☷</span>
        </button>
    </div>

    <div class="main-container">
        <!-- PANEL IZQUIERDO: PATRONES -->
        <div class="left-panel">
            <!-- Agregar más patrones dinámicamente -->
        </div>

        <!-- PANEL DERECHO: GUÍA DE INTERPRETACIÓN -->
        <div class="right-panel">
            <table id="tablaPatrones" class="table table-hover table-striped table-bordered">

                <thead>
                    <tr>
                        <th>Patrón</th>
                        <th colspan="3">Vela verde</th>
                        <th colspan="3">Vela roja</th>
                    </tr>
                    <tr>
                        <th></th>
                        <th>Dir</th>
                        <th>G1</th>
                        <th>G2</th>
                        <th>Dir</th>
                        <th>G1</th>
                        <th>G2</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>MHI Minoría</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>

                    <tr>
                        <td>MHI 2 Minoría</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>MHI 3 Minoría</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>Millón Minoría</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>MHI Mayoría</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>MHI 2 Mayoría</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>MHI 3 Mayoría</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>Millón Mayoría</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>Torres Gemelas</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>Mejor de 3</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>Tres Mosqueteros</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>Patrón Impar</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>Tres Vecinos</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>Patron 3x1</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                    <tr>
                        <td>Patrón 23</td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                        <td> </td>
                    </tr>
                </tbody>
            </table>
            <div id="estadisticas-globales"
                style="padding: 10px; background-color: #f0f0f0; border-top: 2px solid #ccc; font-size: 14px; line-height: 1.6;">
                <!-- Las estadísticas aparecerán aquí -->
            </div>


        </div>

    </div>


    <div class="cinta-informativa">
        <div class="contenido-cinta" id="contenido-cinta">
            🔥 Bienvenido al panel de catalogación | 📢 Para generar señales de entrada recuerda configurar por primera
            vez como deseas operar
            | 🚀 Nuevas funciones funciones en desarrollo disponibles próximamente.
        </div>
    </div>

    <!-- Contenedor de todas las alertas -->
    <div id="popup-container"></div>






    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.39.5/dist/umd/supabase.min.js"></script>

    <script>
        //import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';
        const supabaseUrl = 'https://lmhyfgagksvojfkbnygx.supabase.co';
        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxtaHlmZ2Fna3N2b2pma2JueWd4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MjA4MzksImV4cCI6MjA2NTk5NjgzOX0.bD-j6tXajDumkB7cuck_9aNMGkrAdnAJLzQACoRYaJo'; // tu key completa
        const clientesupabase = supabase.createClient(supabaseUrl, supabaseKey);
        const coloresDigitos = new Array(10).fill(null); // Inicialmente vacío


        let hiloActual = null;
        let abortController = null;
        let continuarEsperando = true; // Control de ejecución

        let historicoMHI = [], historicoMHI2 = [], historicoMHI3 = [], historicoMILLONMIN = [];
        let historicoMHIMAY = [], historicoMHI2MAY = [], historicoMHI3MAY = [], historicoMILLONMAY = [];
        let historicoTORRESGEMELAS = [], historicoMEJOR3 = [], historicoMOSQUETEROS = [], historicoPATRONIMPAR = []
        let historicoTRESVECINOS = [], historicoPATRON3X1 = [], historicoPADRON23 = []

        let ultimoMinutoProcesado = null; // Variable global para rastrear el último minuto procesado
        let bloqueoProcesamiento = false; // Evita solapamientos
        let ultimaVelaProcesada = null; // Almacenará el ID o timestamp de la última vela procesada
        let preciosCierre = []; // Arreglo global para guardar los precios de cierre

        let parActual = null;
        let activo = null;
        let signalConfig = null;
        let userId = null;
        let RSI = null;
        let primeraOperacion = true;


        document.addEventListener('DOMContentLoaded', () => {
            const patrones = [
                'MHI Minoría', 'MHI 2 Minoría', 'MHI 3 Minoría',
                'MHI Mayoría', 'MHI 2 Mayoría', 'MHI 3 Mayoría',
                'Millón Minoría', 'Millón Mayoría', 'Torres Gemelas',
                'Mejor de 3', 'Tres Mosqueteros', 'Patrón Impar',
                'Tres Vecinos', 'Patron 3x1', 'Patrón 23'
            ];
            const leftPanel = document.querySelector('.left-panel');
            patrones.forEach(nombre => {
                const patronDiv = document.createElement('div');
                patronDiv.className = 'patron';
                patronDiv.innerHTML = `
            <h3>${nombre}</h3>
            <div class="cuadros" id="${nombre.replace(/\s/g, '_')}">
                ${Array(24).fill().map((_, i) =>
                    `<div class="cuadro" data-patron="${nombre}" data-index="${i}"></div>`
                ).join('')}
            </div>
        `;
                leftPanel.appendChild(patronDiv);
            });
        });





        async function cargarVelas(parActual) {
            const { data, error } = await clientesupabase
                .from(parActual)
                .select('*')
                .order('id', { ascending: false })  // ✅ Ordenamos por ID descendente
                .limit(15);

            if (!data || data.length === 0) {
                return;
            }

            // Limpiamos precios anteriores
            preciosCierre = [];

            const container = document.getElementById('candle-strip');

            // Conserva el select si está dentro
            const select = document.getElementById('pair-selector');
            const wrapper = document.createElement('div');
            wrapper.className = 'dropdown-wrapper';
            wrapper.appendChild(select);

            container.innerHTML = '';
            container.appendChild(wrapper);

            // Mostramos las velas en orden cronológico (de más vieja a más nueva)
            for (let i = data.length - 1; i >= 0; i--) {
                const vela = data[i];

                // Guardamos el precio de cierre
                preciosCierre.push(vela.end_price);

                // Crear div de la vela
                const div = document.createElement('div');
                div.classList.add('candle');

                const color = vela.candle_color?.toLowerCase().trim() || 'gray';
                div.style.backgroundColor = color === 'green' ? 'green' : color === 'red' ? 'red' : 'gray';

                const horaStr = vela.start_time.toString();
                const minuto = horaStr.split(':')[1] || '00';
                const digito = minuto % 10;
                coloresDigitos[digito] = color;

                div.innerText = minuto;
                container.appendChild(div);
            }
            RSI = calcularRSIDesdePrecios(preciosCierre);
        }




        //RSI > 75 → Activo sobrecomprado
        //RSI < 25 → Activo sobrevendido
        //RSI ≈ 50 → Zona neutral
        function calcularRSIDesdePrecios(preciosCierre) {
            if (preciosCierre.length < 15) {
                throw new Error("Se requieren al menos 15 precios de cierre para calcular el RSI de 14 períodos.");
            }
            let ganancias = [];
            let perdidas = [];
            // Cálculo de diferencias entre precios de cierre consecutivos
            for (let i = 1; i < 15; i++) {
                const delta = preciosCierre[i] - preciosCierre[i - 1];

                if (delta > 0) {
                    ganancias.push(delta);
                    perdidas.push(0);
                } else {
                    ganancias.push(0);
                    perdidas.push(Math.abs(delta));
                }
            }
            const promedioGanancia = ganancias.reduce((a, b) => a + b, 0) / 14;
            const promedioPerdida = perdidas.reduce((a, b) => a + b, 0) / 14;
            const RS = promedioPerdida === 0 ? 100 : promedioGanancia / promedioPerdida;
            const RSI = 100 - (100 / (1 + RS));
            return RSI.toFixed(2);

        }

        async function esperarNuevaVela(par, signal) {
            while (!signal.aborted) {
                if (bloqueoProcesamiento) {
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    continue;
                }
                bloqueoProcesamiento = true;
                try {
                    const { data, error } = await clientesupabase
                        .from(par)
                        .select('id, start_time, candle_color')
                        .order('id', { ascending: false })
                        .limit(1);
                    if (!error && data.length > 0) {
                        const velaActual = data[0];
                        if (!ultimaVelaProcesada || ultimaVelaProcesada.id !== velaActual.id) {
                            ultimaVelaProcesada = velaActual;
                            await cargarVelas(par);
                            analizarVelaPorDigito(velaActual);
                            calcularPorcentaje();
                            calcularPorcentajeNoPerdidasPorPatron();
                            verificaAlertas();


                        }
                    }
                } catch (e) {
                    if (signal.aborted) {
                        console.warn("🛑 Hilo abortado para", par);
                        break;
                    }
                    console.error("⚠️ Error leyendo velas:", e);
                }
                bloqueoProcesamiento = false;
                const sleep_time = calculateSecondsToNextMinute() - 2
                await new Promise(resolve => setTimeout(resolve, sleep_time));
            }
        }

        function calculateSecondsToNextMinute() {
            const now = new Date();
            const secondsCurrentMinute = now.getSeconds();
            const milliseconds = now.getMilliseconds() / 1000;
            let secondsToNextMinute = 60 - secondsCurrentMinute - milliseconds;
            secondsToNextMinute += 0.1
            return Math.max(0.1, secondsToNextMinute); // Mínimo 0.1 segundos
        }

        window.cambiarParSeleccionado = async function (selectElement) {
            limpiarTablaPatrones(); // ✅ Limpiar colores viejos antes de todo

            nuevoPar = selectElement.value.toLowerCase().replace(/-/g, '_');
            activo = selectElement.value;

            // Cancelar hilo anterior si existe
            if (abortController) {
                abortController.abort();
            }

            // Crear nuevo controlador
            abortController = new AbortController();
            const signal = abortController.signal;

            // Cargar velas y procesar
            await cargarVelas(nuevoPar);

            const cantidadDeVelas = calcularCantidadDeVelas();
            const colores = await obtenerColoresDeVelas(nuevoPar, cantidadDeVelas);

            procesarAnalisisMHI(colores);
            actualizarHistorico("MHI_Minoría", historicoMHI);
            procesarAnalisisMHImayoria(colores);
            actualizarHistorico("MHI_Mayoría", historicoMHIMAY);

            procesarAnalisisMHI2(colores);
            actualizarHistorico("MHI_2_Minoría", historicoMHI2);
            procesarAnalisisMHImayoria2(colores);
            actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);

            procesarAnalisisMHI3(colores);
            actualizarHistorico("MHI_3_Minoría", historicoMHI3);
            procesarAnalisisMHImayoria3(colores);
            actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);

            procesarAnalisisMILLONminoria(colores);
            actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
            procesarAnalisisMILLONmayoria(colores);
            actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);

            procesarAnalisisTorresGemelas(colores);
            actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);

            procesarAnalisisPatron23(colores);
            actualizarHistorico("Patrón_23", historicoPADRON23);

            procesarAnalisisTresMosqueteros(colores);
            actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);

            procesarAnalisisTresVecinos(colores);
            actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);

            procesarAnalisisMejor3(colores);
            actualizarHistorico("Mejor_de_3", historicoMEJOR3);

            procesarAnalisisPatron3x1(colores);
            actualizarHistorico("Patron_3x1", historicoPATRON3X1);

            procesarAnalisisPatronImpar(colores);
            actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);

            // Lanzar nuevo hilo
            hiloActual = esperarNuevaVela(nuevoPar, signal);
        };

        window.addEventListener('DOMContentLoaded', async () => {
            const select = document.getElementById('pair-selector');
            const par = select.value.toLowerCase().replace(/-/g, '_');
            activo = select.value;

            cargarSignalConfiguracion();

            // Cancelar hilo anterior si lo hubiera
            if (abortController) {
                abortController.abort();
            }

            // Crear nuevo controlador y signal
            abortController = new AbortController();
            const signal = abortController.signal;

            await cargarVelas(par);

            const cantidadDeVelas = calcularCantidadDeVelas();
            const colores = await obtenerColoresDeVelas(par, cantidadDeVelas);

            procesarAnalisisMHI(colores);
            actualizarHistorico("MHI_Minoría", historicoMHI);
            procesarAnalisisMHImayoria(colores);
            actualizarHistorico("MHI_Mayoría", historicoMHIMAY);

            procesarAnalisisMHI2(colores);
            actualizarHistorico("MHI_2_Minoría", historicoMHI2);
            procesarAnalisisMHImayoria2(colores);
            actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);

            procesarAnalisisMHI3(colores);
            actualizarHistorico("MHI_3_Minoría", historicoMHI3);
            procesarAnalisisMHImayoria3(colores);
            actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);

            procesarAnalisisMILLONminoria(colores);
            actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
            procesarAnalisisMILLONmayoria(colores);
            actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);

            procesarAnalisisTorresGemelas(colores);
            actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);

            procesarAnalisisPatron23(colores);
            actualizarHistorico("Patrón_23", historicoPADRON23);

            procesarAnalisisTresMosqueteros(colores);
            actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);

            procesarAnalisisTresVecinos(colores);
            actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);

            procesarAnalisisMejor3(colores);
            actualizarHistorico("Mejor_de_3", historicoMEJOR3);

            procesarAnalisisPatron3x1(colores);
            actualizarHistorico("Patron_3x1", historicoPATRON3X1);

            procesarAnalisisPatronImpar(colores);
            actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);

            // Iniciar hilo correctamente con el signal definido
            hiloActual = esperarNuevaVela(par, signal);
        });

        function analizarVelaPorDigito(vela) {
            const horaStr = vela.start_time.toString();
            const minuto = parseInt(horaStr.split(':')[1] || '0');
            const digito = minuto % 10;
            const funciones = [
                digito0, digito1, digito2, digito3, digito4,
                digito5, digito6, digito7, digito8, digito9
            ];
            const funcion = funciones[digito];
            if (funcion) funcion(vela);
        }

        function getCelda(patron, columnaIndex) {
            const tabla = document.getElementById('tablaPatrones');
            for (let i = 1; i < tabla.rows.length; i++) { // saltamos encabezado
                const fila = tabla.rows[i];
                if (fila.cells[0].innerText.trim() === patron.trim()) {
                    return fila.cells[columnaIndex];
                }
            }
            return null; // No encontrada
        }

        function colorMenosRepetido(indices) {
            let contador = { green: 0, red: 0 };
            for (let i of indices) {
                const color = coloresDigitos[i];
                if (color === 'green') contador.green++;
                else if (color === 'red') contador.red++;
            }
            const total = contador.green + contador.red;
            if (total === 0) return null;
            if (contador.green === indices.length) return 'red';
            if (contador.red === indices.length) return 'green';
            if (contador.green === contador.red) return 'empate';
            return contador.green < contador.red ? 'green' : 'red';
        }

        function colorMasRepetido(indices) {
            let contador = { green: 0, red: 0 };

            for (let i of indices) {
                const color = coloresDigitos[i];
                if (color === 'green') contador.green++;
                else if (color === 'red') contador.red++;
            }

            const total = contador.green + contador.red;
            if (total === 0) return null;

            if (contador.green === contador.red) return 'empate';

            // Devolver el más repetido
            return contador.green > contador.red ? 'green' : 'red';
        }

        async function obtenerColoresDeVelas(parActual, cantidad) {
            const { data, error } = await clientesupabase
                .from(parActual)
                .select('candle_color, start_time, id')  // 👈 incluimos id también para depurar mejor
                .order('id', { ascending: false })       // ✅ ordenar por ID descendente
                .limit(cantidad + 10);

            if (error) {
                console.error("Error al leer de Supabase:", error);
                return [];
            }

            const dataOrdenada = data.reverse();  // ✅ ahora están en orden cronológico
            dataOrdenada.forEach((v, i) => {
                const hora = new Date(`1970-01-01T${v.start_time}`).toLocaleTimeString();
            });


            const colores = dataOrdenada.map(v => v.candle_color?.toLowerCase().trim() || 'gray');
            return colores;
        }

        async function actualizarHistorico(patronId, historicoPatron) {

            const cuadrosContainer = document.getElementById(patronId);
            if (!cuadrosContainer) {
                console.error(`No se encontró el patrón con ID: ${patronId}`);
                return;
            }
            if (historicoPatron.length === 0) {
                console.warn('No hay datos en historicoPatron para aplicar al patrón');
                return;
            }
            // Aplicar cada valor del histórico a su cuadro correspondiente
            historicoPatron.forEach((valor, index) => {
                const cuadroEspecifico = cuadrosContainer.querySelector(`.cuadro[data-index="${index}"]`);
                if (cuadroEspecifico) {
                    // Aplicar estilo según el valor
                    switch (valor) {
                        case 'D':
                            cuadroEspecifico.style.backgroundColor = "green";
                            cuadroEspecifico.textContent = "";
                            break;
                        case 'G1':
                            cuadroEspecifico.style.backgroundColor = "green";
                            cuadroEspecifico.textContent = "G1";
                            break;
                        case 'G2':
                            cuadroEspecifico.style.backgroundColor = "green";
                            cuadroEspecifico.textContent = "G2";
                            break;
                        case 'L':
                            cuadroEspecifico.style.backgroundColor = "red";
                            cuadroEspecifico.textContent = "";
                            break;
                        case 'E':
                            cuadroEspecifico.style.backgroundColor = "gray";
                            cuadroEspecifico.textContent = "";
                            break;
                        default:
                            console.warn(`Valor desconocido en historicoPatron: ${valor}`);
                    }
                } else {
                    console.warn(`No se encontró cuadro con data-index="${index}" en el patrón ${patronId}`);
                }
            });
        }

        function limpiarTablaPatrones() {
            const tabla = document.getElementById("tablaPatrones");
            if (!tabla) return;

            const celdas = tabla.querySelectorAll("td");
            celdas.forEach(celda => {
                celda.style.backgroundColor = ""; // Borra el fondo de cada celda
            });
        }



    </script>


    <script>
        let condicionCoincidencia = null;
        let velaBuscadaCoincidencia = null;
        let estadisticasTotales = null;
        let estadisticasPorcentual = null;
        let estadoAnteriorPatrones = {};
        let twoLoss = {};
        let threeloss = {};
        let alcanza100 = {};
        let pierde100 = {};

        async function verificaAlertas() {
            const ahora = new Date();
            const hora_final = ahora.getHours().toString().padStart(2, '0') + ':' +
                ahora.getMinutes().toString().padStart(2, '0');


            //Primero Confirmo si el usuario tiene las notificaciones activadas
            if (signalConfig.notificacion !== "none") {
                //Leer configuracion martingala
                let gale = "No usar Martin Gala";
                let condicion = "";
                let operacion = "";
                let cantGale = 0;
                if (signalConfig.martin_gala === "gale2") {
                    gale = "Usar 2 Martin Gala";
                    cantGale = 2
                } else if (signalConfig.martin_gala === "gale1directo" || signalConfig.martin_gala === "gale1trasperdida") {
                    gale = "Usar 1 Martin Gala";
                    cantGale = 1
                }


                if (signalConfig.confluencia) {  //Notificacion para la confluencia de patrones
                    const conteo = contarCeldasColoreadas();
                    if (signalConfig.martin_gala === "gale1trasperdida") {
                        if (condicionCoincidencia === ultimaVela) {
                            if (velaBuscadaCoincidencia === 'CALL') {
                                guardarAlertaEnSupabase("Confluencia de Patrones", hora_final, "Bajista", velaBuscadaCoincidencia, cantGale)
                                if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                                    mostrarPopup("Confluencia de Patrones", "Bajista", velaBuscadaCoincidencia, gale);
                                }
                                if (signalConfig.notificacion === "telegram" || signalConfig.notificacion === "ambos") {
                                    envioTelegram("Confluencia de Patrones", "Bajista", velaBuscadaCoincidencia, gale)
                                }
                            }
                            if (velaBuscadaCoincidencia === 'PUT') {
                                guardarAlertaEnSupabase("Confluencia de Patrones", hora_final, "Alcista", velaBuscadaCoincidencia, cantGale)
                                if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                                    mostrarPopup("Confluencia de Patrones", "Alcista", velaBuscadaCoincidencia, gale);
                                }
                                if (signalConfig.notificacion === "telegram" || signalConfig.notificacion === "ambos") {
                                    envioTelegram("Confluencia de Patrones", "Alcista", velaBuscadaCoincidencia, gale)
                                }
                            }
                            condicionCoincidencia = null;
                        } else {
                            condicionCoincidencia = null;
                        }
                    }



                    if (conteo.verde.verde === 6) {
                        condicionCoincidencia = null;
                        condicion = "Alcista";
                        operacion = "CALL"
                        condicionCoincidencia = 'green'
                        velaBuscadaCoincidencia = "CALL"
                        if (signalConfig.martin_gala === "gale1directo" || signalConfig.martin_gala === "gale2") {
                            guardarAlertaEnSupabase("Confluencia de Patrones", hora_final, condicion, operacion, cantGale)
                            if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                                mostrarPopup("Confluencia de Patrones", condicion, operacion, gale);
                            }
                            if (signalConfig.notificacion === "telegram" || signalConfig.notificacion === "ambos") {
                                envioTelegram("Confluencia de Patrones", condicion, operacion, gale)
                            }
                        }

                    }
                    if (conteo.verde.rojo === 6) {
                        condicion = "Alcista";
                        operacion = "PUT"
                        condicionCoincidencia = 'green'
                        velaBuscadaCoincidencia = "PUT"
                        if (signalConfig.martin_gala === "gale1directo" || signalConfig.martin_gala === "gale2") {
                            guardarAlertaEnSupabase("Confluencia de Patrones", hora_final, condicion, operacion, cantGale)
                            if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                                mostrarPopup("Confluencia de Patrones", condicion, operacion, gale);
                            }
                            if (signalConfig.notificacion === "telegram" || signalConfig.notificacion === "ambos") {
                                envioTelegram("Confluencia de Patrones", condicion, operacion, gale)
                            }
                        }
                    }
                    if (conteo.rojo.verde === 6) {
                        condicion = "Bajista";
                        operacion = "CALL"
                        condicionCoincidencia = 'red'
                        velaBuscadaCoincidencia = "CALL"
                        if (signalConfig.martin_gala === "gale1directo" || signalConfig.martin_gala === "gale2") {
                            guardarAlertaEnSupabase("Confluencia de Patrones", hora_final, condicion, operacion, cantGale)
                            if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                                mostrarPopup("Confluencia de Patrones", condicion, operacion, gale);
                            }
                            if (signalConfig.notificacion === "telegram" || signalConfig.notificacion === "ambos") {
                                envioTelegram("Confluencia de Patrones", condicion, operacion, gale)
                            }
                        }
                    }
                    if (conteo.rojo.rojo === 6) {
                        condicion = "Bajista";
                        operacion = "PUT"
                        condicionCoincidencia = 'red'
                        velaBuscadaCoincidencia = "PUT"
                        if (signalConfig.martin_gala === "gale1directo" || signalConfig.martin_gala === "gale2") {
                            guardarAlertaEnSupabase("Confluencia de Patrones", hora_final, condicion, operacion, cantGale)
                            if (signalConfig.notificacion === "navegador" || signalConfig.notificacion === "ambos") {
                                mostrarPopup("Confluencia de Patrones", condicion, operacion, gale);
                            }
                            if (signalConfig.notificacion === "telegram" || signalConfig.notificacion === "ambos") {
                                envioTelegram("Confluencia de Patrones", condicion, operacion, gale)
                            }
                        }
                    }
                }



                if (signalConfig.alcanza_100) { //Notificacion para cuando alcanza el 100%
                    for (let patron in alcanza100) {
                        if (alcanza100[patron]) {
                            const filaTabla = [...document.querySelectorAll('#tablaPatrones tbody tr')].find(
                                fila => fila.cells[0]?.textContent.trim() === patron.trim()
                            );

                            if (filaTabla) {
                                let columnas = [];

                                if (signalConfig.martin_gala === "gale2"  || signalConfig.martin_gala === "gale1directo") {
                                    columnas = [1, 4];
                                } else if (signalConfig.martin_gala === "gale1trasperdida") {
                                    columnas = [2, 5];
                                } else if (signalConfig.martin_gala === "nogale") {
                                    columnas = [3, 6];
                                }
                                let hayColor = false;
                                for (let col of columnas) {
                                    const bg = filaTabla.cells[col]?.style.backgroundColor.toLowerCase();
                                    if (bg === "green" || bg === "red") {
                                        hayColor = true;
                                        break;
                                    }
                                }
                                if (hayColor) {
                                    console.log("Hora de Operar por alcanzar el 100");
                                    alcanza100[patron] = false;
                                }
                            }
                        }
                    }

                }

            




                if (signalConfig.pierde_100) { //Notificacion para cuando pierde el 100%
                    for (let patron in pierde100) {
                        if (pierde100[patron]) {
                            const filaTabla = [...document.querySelectorAll('#tablaPatrones tbody tr')].find(
                                fila => fila.cells[0]?.textContent.trim() === patron.trim()
                            );

                            if (filaTabla) {
                                let columnas = [];

                                if (signalConfig.martin_gala === "gale2"  || signalConfig.martin_gala === "gale1directo") {
                                    columnas = [1, 4];
                                } else if (signalConfig.martin_gala === "gale1trasperdida") {
                                    columnas = [2, 5];
                                } else if (signalConfig.martin_gala === "nogale") {
                                    columnas = [3, 6];
                                }
                                let hayColor = false;
                                for (let col of columnas) {
                                    const bg = filaTabla.cells[col]?.style.backgroundColor.toLowerCase();
                                    if (bg === "green" || bg === "red") {
                                        hayColor = true;
                                        break;
                                    }
                                }
                                if (hayColor) {
                                    console.log("Hora de Operar por perida del 100");
                                    pierde100[patron] = false;
                                }
                            }
                        }
                    }

                }
            }

        }

        async function guardarAlertaEnSupabase(signal, vela, condicion, operacion, numeroDeGale) {
            const alerta = {
                user_id: userId,
                señal: signal,
                par: activo,
                vela_condicional: vela || null,
                condicion: condicion,
                operacion: operacion,
                loss: estadisticasPorcentual.rojo,
                rsi: RSI,
                martingala: numeroDeGale,
                resultado: null
            };
            const { data, error } = await clientesupabase
                .from("registro_alertas")
                .insert([alerta]);

            if (error) {
                console.error("Error guardando alerta en Supabase:", error.message);
            }
        }

        async function cargarSignalConfiguracion() {
            userId = "<%= user.id %>";
            try {
                const { data: config, error } = await clientesupabase
                    .from('configuracion_senal_usuario')
                    .select('*')
                    .eq('user_id', userId)
                    .maybeSingle();
                if (error) throw error;

                if (config) {
                    signalConfig = config
                }
            } catch (error) {
                console.error("Error al cargar configuración:", error.message);
            }
        }

        function mostrarPopup(signal, condicion, operacion, mg) {
            const ahora = new Date();
            const hora_final = ahora.getHours().toString().padStart(2, '0') + ':' +
                ahora.getMinutes().toString().padStart(2, '0');
            const texto = `
                Activo: ${activo}<br>
                %Loss del Activo: ${estadisticasPorcentual.rojo}<br>
                Señal: ${signal}<br>
                Condición: Vela ${hora_final} ${condicion}<br>
                Operación: ${operacion}<br>
                ${mg}
                `;
            const container = document.getElementById("popup-container");

            const popup = document.createElement("div");
            popup.className = "popup-alert";
            popup.innerHTML = `
                <div class="popup-content">
                    <button class="cerrar-popup" onclick="this.parentElement.parentElement.remove()">✖</button>
                    <div class="popup-texto">${texto}</div>
                </div>
            `;
            container.appendChild(popup);
        }

        async function envioTelegram(signal, condicion, operacion, mg) {
            // Obtener la hora actual formateada
            const ahora = new Date();
            const hora_final = ahora.getHours().toString().padStart(2, '0') + ':' +
                ahora.getMinutes().toString().padStart(2, '0');



            // Construir el mensaje
            const texto = `
            Activo: ${activo}
            %Loss del Activo: ${estadisticasPorcentual.rojo}
        Señal: ${signal}
        Condición: Vela ${hora_final} ${condicion}
        Operación: ${operacion}
        ${mg}
        Resultado: 
        `;

            const token = '7546421284:AAF9tYOspTlSQYZIF3VNqWzE_UfUDEZQA4A';

            try {
                const url = `https://api.telegram.org/bot${token}/sendMessage`;

                const formData = new FormData();
                formData.append('chat_id', '@signalTradingProbabilistico');
                formData.append('text', texto);
                formData.append('parse_mode', 'HTML');

                const response = await fetch(url, {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    console.error('Detalles del error:', errorData);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                return true;
            } catch (error) {
                console.error('Error completo al enviar a Telegram:', {
                    error: error.message,
                    condicion,
                    operacion
                });
                return false;
            }
        }

        function calcularCantidadDeVelas() {
            const ahora = new Date();
            const ahoraTimestamp = ahora.getTime();// Hora actual
            const haceDosHoras = new Date(ahora);// Restar 2 horas
            haceDosHoras.setHours(haceDosHoras.getHours() - 2);
            const minutos = haceDosHoras.getMinutes();// Redondear los minutos hacia atrás al múltiplo de 10
            const minutosRedondeados = Math.floor(minutos / 10) * 10;
            haceDosHoras.setMinutes(minutosRedondeados, 0, 0); // también pone segundos y ms en 0

            const inicioTimestamp = haceDosHoras.getTime();
            // ✅ Mostrar hora legible


            const diferenciaMinutos = Math.floor((ahoraTimestamp - inicioTimestamp) / 60000);// Calcular diferencia en minutos
            return diferenciaMinutos;
        }

        function contarCeldasColoreadas() {
            const tabla = document.getElementById('tablaPatrones');
            const resultados = {
                verde: { verde: 0, rojo: 0 }, // Para las columnas de vela verde (1-3)
                rojo: { verde: 0, rojo: 0 }   // Para las columnas de vela roja (4-6)
            };

            // Recorrer todas las filas excepto los encabezados
            for (let i = 2; i < tabla.rows.length; i++) {
                const fila = tabla.rows[i];

                // Contar para columnas de vela verde (columnas 1-3)
                for (let j = 1; j <= 3; j++) {
                    const celda = fila.cells[j];
                    const bgColor = celda.style.backgroundColor.toLowerCase();

                    if (bgColor === 'green') {
                        resultados.verde.verde++;
                    } else if (bgColor === 'red') {
                        resultados.verde.rojo++;
                    }
                }

                // Contar para columnas de vela roja (columnas 4-6)
                for (let j = 4; j <= 6; j++) {
                    const celda = fila.cells[j];
                    const bgColor = celda.style.backgroundColor.toLowerCase();

                    if (bgColor === 'green') {
                        resultados.rojo.verde++;
                    } else if (bgColor === 'red') {
                        resultados.rojo.rojo++;
                    }
                }
            }

            return resultados;
        }

        function cerrarPopup() {
            document.getElementById("popup-señal").style.display = "none";
        }

        async function calcularPorcentaje() {
            const cuadros = document.querySelectorAll('.cuadro');
            estadisticasTotales = {
                rojo: 0,
                gris: 0,
                verde: 0,
                verde_G1: 0,
                verde_G2: 0
            };

            cuadros.forEach(cuadro => {
                const bg = cuadro.style.backgroundColor.toLowerCase();
                const txt = cuadro.textContent.trim().toUpperCase();

                if (bg === 'red' && txt === '') {
                    estadisticasTotales.rojo++;
                } else if (bg === 'gray' && txt === '') {
                    estadisticasTotales.gris++;
                } else if (bg === 'green' && txt === '') {
                    estadisticasTotales.verde++;
                } else if (bg === 'green' && txt === 'G1') {
                    estadisticasTotales.verde_G1++;
                } else if (bg === 'green' && txt === 'G2') {
                    estadisticasTotales.verde_G2++;
                }
            });

            const total = Object.values(estadisticasTotales).reduce((a, b) => a + b, 0);

            estadisticasPorcentual = {};
            for (let tipo in estadisticasTotales) {
                const cantidad = estadisticasTotales[tipo];
                const porcentaje = total > 0 ? ((cantidad / total) * 100).toFixed(2) : 0;
                estadisticasPorcentual[tipo] = porcentaje;
            }

            const divEstadisticas = document.getElementById("estadisticas-globales");
            if (divEstadisticas) {
                const total = Object.values(estadisticasTotales).reduce((a, b) => a + b, 0);
                const texto = `
                    <strong>Efectividad General de todos los patrones:</strong><br>
                    Cantidad de Win Directos: ${estadisticasTotales.verde} (${estadisticasPorcentual.verde}%)<br>
                    Cantidad en Gale 1: ${estadisticasTotales.verde_G1} (${estadisticasPorcentual.verde_G1}%)<br>
                    Cantidad en Gale 2: ${estadisticasTotales.verde_G2} (${estadisticasPorcentual.verde_G2}%)<br>
                    Cantidad de Pass: ${estadisticasTotales.gris} (${estadisticasPorcentual.gris}%)<br>
                    Cantidad de Pérdidas: ${estadisticasTotales.rojo} (${estadisticasPorcentual.rojo}%)<br>
                `;
                divEstadisticas.innerHTML = texto;
            }



            return { estadisticasTotales, estadisticasPorcentual };
        }

        async function calcularPorcentajeNoPerdidasPorPatron() {
            const patrones = document.querySelectorAll('.patron');

            patrones.forEach(patron => {
                const h3 = patron.querySelector('h3');
                const nombreOriginal = h3.innerText.split(' (')[0]; // Quita porcentaje anterior
                const cuadros = patron.querySelectorAll('.cuadro');
                let perdidas = 0;
                let empate = 0;
                cuadros.forEach(cuadro => {
                    if (cuadro.style.backgroundColor.toLowerCase() === 'red') {
                        perdidas++;
                    }
                    if (cuadro.style.backgroundColor.toLowerCase() === 'gray') {
                        empate++;
                    }
                });
                const total = 24 - empate;
                const noPerdidas = total - perdidas;
                const porcentaje = ((noPerdidas / total) * 100).toFixed(0);
                h3.innerText = `${nombreOriginal} (${porcentaje}%)`;
                h3.style.color = porcentaje === "100" ? "green" : "";
                // Verificar cambio de estado
                const estabaEn100 = estadoAnteriorPatrones[nombreOriginal] === true;
                const estaEn100 = porcentaje === "100";
                // Guardar nuevo estado
                estadoAnteriorPatrones[nombreOriginal] = estaEn100;
                
                
                if (!estabaEn100 && estaEn100) {
                    console.log(`✅ El patrón "${nombreOriginal}" ha llegado al 100%`);
                    alcanza100[nombreOriginal] = true;
                } else if (estabaEn100 && !estaEn100) {
                    console.log(`❌ El patrón "${nombreOriginal}" ha perdido el 100%`);
                    pierde100[nombreOriginal] = true;
                }
            });

        }



    </script>


    <script>
        function procesarAnalisisMHI(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoMHI = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 7) {
                    const velaM2 = colores[2];
                    const velaM3 = colores[3];
                    const velaM4 = colores[4];
                    const velaM5 = colores[5];
                    const velaM6 = colores[6];
                    const velaM7 = colores[7];
                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM2.includes("doji") || velaM3.includes("doji") || velaM4.includes("doji")) {
                        historicoMHI.push("E");
                    } else {
                        // Contar R y V en M2, M3, M4
                        const conteo = { 'red': 0, 'green': 0 };
                        [velaM2, velaM3, velaM4].forEach(vela => {
                            if (conteo.hasOwnProperty(vela)) {
                                conteo[vela]++;
                            }
                        });
                        let Menor
                        if (conteo['red'] > conteo['green']) {
                            Menor = "green";
                        } else {
                            Menor = "red";
                        }
                        // Evaluar posición del menor
                        if (Menor === velaM5) {
                            historicoMHI.push("D");
                        } else if (Menor !== velaM5 && Menor === velaM6) {
                            historicoMHI.push("G1");
                        } else if (Menor !== velaM5 && Menor !== velaM6 && Menor === velaM7) {
                            historicoMHI.push("G2");
                        } else {
                            historicoMHI.push("L");
                        }
                    }
                }
                if (historicoMHI.length > 24) {
                    historicoMHI.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisMHImayoria(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoMHIMAY = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 7) {
                    const velaM2 = colores[2];
                    const velaM3 = colores[3];
                    const velaM4 = colores[4];
                    const velaM5 = colores[5];
                    const velaM6 = colores[6];
                    const velaM7 = colores[7];
                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM2.includes("doji") || velaM3.includes("doji") || velaM4.includes("doji")) {
                        historicoMHIMAY.push("E");
                    } else {
                        // Contar R y V en M2, M3, M4
                        const conteo = { 'red': 0, 'green': 0 };
                        [velaM2, velaM3, velaM4].forEach(vela => {
                            if (conteo.hasOwnProperty(vela)) {
                                conteo[vela]++;
                            }
                        });
                        let Mayor
                        if (conteo['red'] > conteo['green']) {
                            Mayor = "red";
                        } else {
                            Mayor = "green";
                        }
                        // Evaluar posición del menor
                        if (Mayor === velaM5) {
                            historicoMHIMAY.push("D");
                        } else if (Mayor !== velaM5 && Mayor === velaM6) {
                            historicoMHIMAY.push("G1");
                        } else if (Mayor !== velaM5 && Mayor !== velaM6 && Mayor === velaM7) {
                            historicoMHIMAY.push("G2");
                        } else {
                            historicoMHIMAY.push("L");
                        }
                    }
                }
                if (historicoMHIMAY.length > 24) {
                    historicoMHIMAY.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisMHI2(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoMHI2 = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 8) {
                    const velaM2 = colores[2];
                    const velaM3 = colores[3];
                    const velaM4 = colores[4];
                    const velaM5 = colores[6];
                    const velaM6 = colores[7];
                    const velaM7 = colores[8];
                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM2.includes("doji") || velaM3.includes("doji") || velaM4.includes("doji")) {
                        historicoMHI2.push("E");
                    } else {
                        // Contar R y V en M2, M3, M4
                        const conteo = { 'red': 0, 'green': 0 };
                        [velaM2, velaM3, velaM4].forEach(vela => {
                            if (conteo.hasOwnProperty(vela)) {
                                conteo[vela]++;
                            }
                        });
                        let Menor
                        if (conteo['red'] > conteo['green']) {
                            Menor = "green";
                        } else {
                            Menor = "red";
                        }
                        // Evaluar posición del menor
                        if (Menor === velaM5) {
                            historicoMHI2.push("D");
                        } else if (Menor !== velaM5 && Menor === velaM6) {
                            historicoMHI2.push("G1");
                        } else if (Menor !== velaM5 && Menor !== velaM6 && Menor === velaM7) {
                            historicoMHI2.push("G2");
                        } else {
                            historicoMHI2.push("L");
                        }
                    }
                }
                if (historicoMHI2.length > 24) {
                    historicoMHI2.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisMHImayoria2(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoMHI2MAY = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);
            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 8) {
                    const velaM2 = colores[2];
                    const velaM3 = colores[3];
                    const velaM4 = colores[4];
                    const velaM5 = colores[6];
                    const velaM6 = colores[7];
                    const velaM7 = colores[8];
                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM2.includes("doji") || velaM3.includes("doji") || velaM4.includes("doji")) {
                        historicoMHI2MAY.push("E");
                    } else {
                        // Contar R y V en M2, M3, M4
                        const conteo = { 'red': 0, 'green': 0 };
                        [velaM2, velaM3, velaM4].forEach(vela => {
                            if (conteo.hasOwnProperty(vela)) {
                                conteo[vela]++;
                            }
                        });
                        let Mayor
                        if (conteo['red'] > conteo['green']) {
                            Mayor = "red";
                        } else {
                            Mayor = "green";
                        }
                        // Evaluar posición del menor
                        if (Mayor === velaM5) {
                            historicoMHI2MAY.push("D");
                        } else if (Mayor !== velaM5 && Mayor === velaM6) {
                            historicoMHI2MAY.push("G1");
                        } else if (Mayor !== velaM5 && Mayor !== velaM6 && Mayor === velaM7) {
                            historicoMHI2MAY.push("G2");
                        } else {
                            historicoMHI2MAY.push("L");
                        }
                    }
                }
                if (historicoMHI2MAY.length > 24) {
                    historicoMHI2MAY.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisMHI3(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoMHI3 = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 9) {
                    const velaM2 = colores[2];
                    const velaM3 = colores[3];
                    const velaM4 = colores[4];
                    const velaM5 = colores[7];
                    const velaM6 = colores[8];
                    const velaM7 = colores[9];
                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM2.includes("doji") || velaM3.includes("doji") || velaM4.includes("doji")) {
                        historicoMHI3.push("E");
                    } else {
                        // Contar R y V en M2, M3, M4
                        const conteo = { 'red': 0, 'green': 0 };
                        [velaM2, velaM3, velaM4].forEach(vela => {
                            if (conteo.hasOwnProperty(vela)) {
                                conteo[vela]++;
                            }
                        });
                        let Menor
                        if (conteo['red'] > conteo['green']) {
                            Menor = "green";
                        } else {
                            Menor = "red";
                        }
                        // Evaluar posición del menor
                        if (Menor === velaM5) {
                            historicoMHI3.push("D");
                        } else if (Menor !== velaM5 && Menor === velaM6) {
                            historicoMHI3.push("G1");
                        } else if (Menor !== velaM5 && Menor !== velaM6 && Menor === velaM7) {
                            historicoMHI3.push("G2");
                        } else {
                            historicoMHI3.push("L");
                        }
                    }
                }
                if (historicoMHI3.length > 24) {
                    historicoMHI3.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisMHImayoria3(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoMHI3MAY = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 9) {
                    const velaM2 = colores[2];
                    const velaM3 = colores[3];
                    const velaM4 = colores[4];
                    const velaM5 = colores[7];
                    const velaM6 = colores[8];
                    const velaM7 = colores[9];
                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM2.includes("doji") || velaM3.includes("doji") || velaM4.includes("doji")) {
                        historicoMHI3MAY.push("E");
                    } else {
                        // Contar R y V en M2, M3, M4
                        const conteo = { 'red': 0, 'green': 0 };
                        [velaM2, velaM3, velaM4].forEach(vela => {
                            if (conteo.hasOwnProperty(vela)) {
                                conteo[vela]++;
                            }
                        });
                        let Mayor
                        if (conteo['red'] > conteo['green']) {
                            Mayor = "red";
                        } else {
                            Mayor = "green";
                        }
                        // Evaluar posición del menor
                        if (Mayor === velaM5) {
                            historicoMHI3MAY.push("D");
                        } else if (Mayor !== velaM5 && Mayor === velaM6) {
                            historicoMHI3MAY.push("G1");
                        } else if (Mayor !== velaM5 && Mayor !== velaM6 && Mayor === velaM7) {
                            historicoMHI3MAY.push("G2");
                        } else {
                            historicoMHI3MAY.push("L");
                        }
                    }
                }
                if (historicoMHI3MAY.length > 24) {
                    historicoMHI3MAY.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisMILLONminoria(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoMILLONMIN = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 7) {
                    const velaM0 = colores[0];
                    const velaM1 = colores[1];
                    const velaM2 = colores[2];
                    const velaM3 = colores[3];
                    const velaM4 = colores[4];
                    const velaM5 = colores[5];
                    const velaM6 = colores[6];
                    const velaM7 = colores[7];

                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM0.includes("doji") || velaM1.includes("doji") || velaM2.includes("doji") || velaM3.includes("doji") || velaM4.includes("doji")) {
                        historicoMILLONMIN.push("E");
                    } else {
                        // Contar R y V en M2, M3, M4
                        const conteo = { 'red': 0, 'green': 0 };
                        [velaM0, velaM1, velaM2, velaM3, velaM4].forEach(vela => {
                            if (conteo.hasOwnProperty(vela)) {
                                conteo[vela]++;
                            }
                        });
                        let Menor
                        if (conteo['red'] > conteo['green']) {
                            Menor = "green";
                        } else {
                            Menor = "red";
                        }
                        // Evaluar posición del menor
                        if (Menor === velaM5) {
                            historicoMILLONMIN.push("D");
                        } else if (Menor !== velaM5 && Menor === velaM6) {
                            historicoMILLONMIN.push("G1");
                        } else if (Menor !== velaM5 && Menor !== velaM6 && Menor === velaM7) {
                            historicoMILLONMIN.push("G2");
                        } else {
                            historicoMILLONMIN.push("L");
                        }
                    }
                }
                if (historicoMILLONMIN.length > 24) {
                    historicoMILLONMIN.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisMILLONmayoria(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoMILLONMAY = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                if (colores.length > 7) {
                    const velaM0 = colores[0];
                    const velaM1 = colores[1];
                    const velaM2 = colores[2];
                    const velaM3 = colores[3];
                    const velaM4 = colores[4];
                    const velaM5 = colores[5];
                    const velaM6 = colores[6];
                    const velaM7 = colores[7];

                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM0.includes("doji") || velaM1.includes("doji") || velaM2.includes("doji") || velaM3.includes("doji") || velaM4.includes("doji")) {
                        historicoMILLONMAY.push("E");
                    } else {
                        // Contar R y V en M2, M3, M4
                        const conteo = { 'red': 0, 'green': 0 };
                        [velaM0, velaM1, velaM2, velaM3, velaM4].forEach(vela => {
                            if (conteo.hasOwnProperty(vela)) {
                                conteo[vela]++;
                            }
                        });
                        let Mayor
                        if (conteo['red'] > conteo['green']) {
                            Mayor = "red";
                        } else {
                            Mayor = "green";
                        }
                        // Evaluar posición del menor
                        if (Mayor === velaM5) {
                            historicoMILLONMAY.push("D");
                        } else if (Mayor !== velaM5 && Mayor === velaM6) {
                            historicoMILLONMAY.push("G1");
                        } else if (Mayor !== velaM5 && Mayor !== velaM6 && Mayor === velaM7) {
                            historicoMILLONMAY.push("G2");
                        } else {
                            historicoMILLONMAY.push("L");
                        }
                    }
                }
                if (historicoMILLONMAY.length > 24) {
                    historicoMILLONMAY.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisTorresGemelas(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoTORRESGEMELAS = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 6) {
                    const velaM0 = colores[0];
                    const velaM4 = colores[4];
                    const velaM5 = colores[5];
                    const velaM6 = colores[6];

                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM0.includes("doji")) {
                        historicoTORRESGEMELAS.push("E");
                    } else {
                        if (velaM0 === velaM4) {
                            historicoTORRESGEMELAS.push("D");
                        } else if (velaM0 !== velaM4 && velaM0 === velaM5) {
                            historicoTORRESGEMELAS.push("G1");
                        } else if (velaM0 !== velaM4 && velaM0 !== velaM5 && velaM0 === velaM6) {
                            historicoTORRESGEMELAS.push("G2");
                        } else {
                            historicoTORRESGEMELAS.push("L");
                        }
                    }
                }
                if (historicoTORRESGEMELAS.length > 24) {
                    historicoTORRESGEMELAS.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisPatron23(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoPADRON23 = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 3) {
                    const velaM0 = colores[0];
                    const velaM1 = colores[1];
                    const velaM2 = colores[2];
                    const velaM3 = colores[3];

                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM0.includes("doji")) {
                        historicoPADRON23.push("E");
                    } else {
                        if (velaM0 === velaM1) {
                            historicoPADRON23.push("D");
                        } else if (velaM0 !== velaM1 && velaM0 === velaM2) {
                            historicoPADRON23.push("G1");
                        } else if (velaM0 !== velaM1 && velaM0 !== velaM2 && velaM0 === velaM3) {
                            historicoPADRON23.push("G2");
                        } else {
                            historicoPADRON23.push("L");
                        }
                    }
                }
                if (historicoPADRON23.length > 24) {
                    historicoPADRON23.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisTresMosqueteros(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoMOSQUETEROS = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 5) {
                    const velaM2 = colores[2];
                    const velaM3 = colores[3];
                    const velaM4 = colores[4];
                    const velaM5 = colores[5];

                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM2.includes("doji")) {
                        historicoMOSQUETEROS.push("E");
                    } else {
                        if (velaM2 === velaM3) {
                            historicoMOSQUETEROS.push("D");
                        } else if (velaM2 !== velaM3 && velaM2 === velaM4) {
                            historicoMOSQUETEROS.push("G1");
                        } else if (velaM2 !== velaM3 && velaM2 !== velaM4 && velaM2 === velaM5) {
                            historicoMOSQUETEROS.push("G2");
                        } else {
                            historicoMOSQUETEROS.push("L");
                        }
                    }
                }
                if (historicoMOSQUETEROS.length > 24) {
                    historicoMOSQUETEROS.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisTresVecinos(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoTRESVECINOS = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 6) {
                    const velaM3 = colores[3];
                    const velaM4 = colores[4];
                    const velaM5 = colores[5];
                    const velaM6 = colores[6];

                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM3.includes("doji")) {
                        historicoTRESVECINOS.push("E");
                    } else {
                        if (velaM3 === velaM4) {
                            historicoTRESVECINOS.push("D");
                        } else if (velaM3 !== velaM4 && velaM3 === velaM5) {
                            historicoTRESVECINOS.push("G1");
                        } else if (velaM3 !== velaM4 && velaM3 !== velaM5 && velaM3 === velaM6) {
                            historicoTRESVECINOS.push("G2");
                        } else {
                            historicoTRESVECINOS.push("L");
                        }
                    }
                }
                if (historicoTRESVECINOS.length > 24) {
                    historicoTRESVECINOS.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisMejor3(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoMEJOR3 = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);
            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 9) {
                    const velaM1 = colores[1];
                    const velaM2 = colores[2];
                    const velaM3 = colores[3];
                    const velaM7 = colores[7];
                    const velaM8 = colores[8];
                    const velaM9 = colores[9];
                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM1.includes("doji") || velaM2.includes("doji") || velaM3.includes("doji")) {
                        historicoMEJOR3.push("E");
                    } else {
                        // Contar R y V en M2, M3, M4
                        const conteo = { 'red': 0, 'green': 0 };
                        [velaM1, velaM2, velaM3].forEach(vela => {
                            if (conteo.hasOwnProperty(vela)) {
                                conteo[vela]++;
                            }
                        });
                        let Mayor
                        if (conteo['red'] > conteo['green']) {
                            Mayor = "red";
                        } else {
                            Mayor = "green";
                        }
                        // Evaluar posición del menor
                        if (Mayor === velaM7) {
                            historicoMEJOR3.push("D");
                        } else if (Mayor !== velaM7 && Mayor === velaM8) {
                            historicoMEJOR3.push("G1");
                        } else if (Mayor !== velaM7 && Mayor !== velaM8 && Mayor === velaM9) {
                            historicoMEJOR3.push("G2");
                        } else {
                            historicoMEJOR3.push("L");
                        }
                    }
                }
                if (historicoMEJOR3.length > 24) {
                    historicoMEJOR3.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisPatron3x1(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoPATRON3X1 = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 6) {
                    const velaM0 = colores[0];
                    const velaM1 = colores[1];
                    const velaM2 = colores[2];
                    const velaM4 = colores[4];
                    const velaM5 = colores[5];
                    const velaM6 = colores[6];
                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM0.includes("doji") || velaM1.includes("doji") || velaM2.includes("doji")) {
                        historicoPATRON3X1.push("E");
                    } else {
                        // Contar R y V en M2, M3, M4
                        const conteo = { 'red': 0, 'green': 0 };
                        [velaM0, velaM1, velaM2].forEach(vela => {
                            if (conteo.hasOwnProperty(vela)) {
                                conteo[vela]++;
                            }
                        });
                        let Menor
                        if (conteo['red'] > conteo['green']) {
                            Menor = "green";
                        } else {
                            Menor = "red";
                        }
                        // Evaluar posición del menor
                        if (Menor === velaM4) {
                            historicoPATRON3X1.push("D");
                        } else if (Menor !== velaM4 && Menor === velaM5) {
                            historicoPATRON3X1.push("G1");
                        } else if (Menor !== velaM4 && Menor !== velaM5 && Menor === velaM6) {
                            historicoPATRON3X1.push("G2");
                        } else {
                            historicoPATRON3X1.push("L");
                        }
                    }
                }
                if (historicoPATRON3X1.length > 24) {
                    historicoPATRON3X1.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }

        function procesarAnalisisPatronImpar(colores) {
            // Reiniciar arrays para nuevo análisis
            historicoPATRONIMPAR = [];
            const cantidadCuadrantes = Math.floor(colores.length / 5);

            for (let i = 0; i < cantidadCuadrantes; i++) {
                // Análisis de MHI y MHI Mayoría
                if (colores.length > 9) {
                    const velaM2 = colores[2];
                    const velaM5 = colores[5];
                    const velaM7 = colores[7];
                    const velaM9 = colores[9];

                    // Verificar si hay Doji en M2, M3 o M4
                    if (velaM2.includes("doji")) {
                        historicoPATRONIMPAR.push("E");
                    } else {
                        if (velaM2 === velaM5) {
                            historicoPATRONIMPAR.push("D");
                        } else if (velaM2 !== velaM5 && velaM2 === velaM7) {
                            historicoPATRONIMPAR.push("G1");
                        } else if (velaM2 !== velaM5 && velaM2 !== velaM7 && velaM2 === velaM9) {
                            historicoPATRONIMPAR.push("G2");
                        } else {
                            historicoPATRONIMPAR.push("L");
                        }
                    }
                }
                if (historicoPATRONIMPAR.length > 24) {
                    historicoPATRONIMPAR.shift(); // Eliminar el primer elemento
                }
                // Mover el historial 5 posiciones
                colores = colores.slice(5);
            }
        }


    </script>

    <script>
        let ultimaVela = null;
        function digito0(vela) {
            ultimaVela = coloresDigitos[0];
            ['MHI Minoría', 'MHI Mayoría', 'Millón Minoría', 'Millón Mayoría'].forEach(patron => {
                getCelda(patron, 2).style.backgroundColor = '';
                getCelda(patron, 5).style.backgroundColor = '';
            });
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario === coloresDigitos[0]) {
                    // Gana MHI Minoría, pierde MHI Mayoría
                    if (minoritario === 'green') {
                        getCelda('MHI Mayoría', 3).style.backgroundColor = 'red';
                    } else if (minoritario === 'red') {
                        getCelda('MHI Mayoría', 6).style.backgroundColor = 'green';
                    }
                } else {
                    // Gana MHI Mayoría, pierde MHI Minoría
                    if (minoritario === 'green') {
                        getCelda('MHI Minoría', 6).style.backgroundColor = 'green';
                    } else if (minoritario === 'red') {
                        getCelda('MHI Minoría', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analisis Millon Minoria y Millon Minoria
            if (coloresDigitos[5] !== 'doji' && coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {    //Para si hay un doji no hacer nada
                const minoritario = colorMenosRepetido([5, 6, 7, 8, 9]);
                if (minoritario === coloresDigitos[0]) {   //Se gana mill minoria y se pierde mill mayoria
                    if (minoritario === 'green') {
                        getCelda('Millón Mayoría', 3).style.backgroundColor = 'red';
                    }
                    if (minoritario === 'red') {
                        getCelda('Millón Mayoría', 6).style.backgroundColor = 'green';
                    }
                } else {
                    if (minoritario === 'green') {
                        getCelda('Millón Minoría', 6).style.backgroundColor = 'green';
                    }
                    if (minoritario === 'red') {
                        getCelda('Millón Minoría', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
            getCelda('MHI 2 Minoría', 1).style.backgroundColor = '';
            getCelda('MHI 2 Minoría', 4).style.backgroundColor = '';
            getCelda('MHI 2 Mayoría', 1).style.backgroundColor = '';
            getCelda('MHI 2 Mayoría', 4).style.backgroundColor = '';
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario === 'green') {
                    getCelda('MHI 2 Minoría', 5).style.backgroundColor = 'green';
                    getCelda('MHI 2 Mayoría', 2).style.backgroundColor = 'red';
                } else {
                    getCelda('MHI 2 Minoría', 2).style.backgroundColor = 'red';
                    getCelda('MHI 2 Mayoría', 5).style.backgroundColor = 'green';

                }
            }
            //Analisis Correspondiente a MMHI3 Minoria MHI3 Mayoria
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario === 'red') {
                    getCelda('MHI 3 Minoría', 1).style.backgroundColor = 'red';
                    getCelda('MHI 3 Minoría', 4).style.backgroundColor = 'red';
                    getCelda('MHI 3 Mayoría', 1).style.backgroundColor = 'green';
                    getCelda('MHI 3 Mayoría', 4).style.backgroundColor = 'green';
                } else if (minoritario === 'green') {
                    getCelda('MHI 3 Minoría', 1).style.backgroundColor = 'green';
                    getCelda('MHI 3 Minoría', 4).style.backgroundColor = 'green';
                    getCelda('MHI 3 Mayoría', 1).style.backgroundColor = 'red';
                    getCelda('MHI 3 Mayoría', 4).style.backgroundColor = 'red';

                }
            }
            //Analasis para Torres Gemelas
            getCelda('Torres Gemelas', 3).style.backgroundColor = '';
            getCelda('Torres Gemelas', 6).style.backgroundColor = '';
            //Analisis correspondiente a TRES VECINOS
            getCelda('Tres Vecinos', 3).style.backgroundColor = '';
            getCelda('Tres Vecinos', 6).style.backgroundColor = '';
            //Analisis correspondiente a PATRON 23
            getCelda('Patrón 23', 1).style.backgroundColor = '';
            getCelda('Patrón 23', 4).style.backgroundColor = '';
            if (coloresDigitos[0] !== 'doji') {
                if (coloresDigitos[0] === 'green') {
                    getCelda('Patrón 23', 5).style.backgroundColor = 'green';
                } else {
                    getCelda('Patrón 23', 2).style.backgroundColor = 'red';
                }
            }
            //Analasis para MEJOR DE TRES
            if (coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji') {
                const minoritario = colorMenosRepetido([6, 7, 8]);
                if (minoritario === 'green') {
                    getCelda('Mejor de 3', 1).style.backgroundColor = 'red';
                    getCelda('Mejor de 3', 4).style.backgroundColor = 'red';
                } else {
                    getCelda('Mejor de 3', 1).style.backgroundColor = 'green';
                    getCelda('Mejor de 3', 4).style.backgroundColor = 'green';
                }
            }
            //Analisis Patron 3x1
            getCelda('Patron 3x1', 3).style.backgroundColor = '';
            getCelda('Patron 3x1', 6).style.backgroundColor = '';
            // Analisis Patron Impar
            if (coloresDigitos[7] !== 'doji') {
                if (coloresDigitos[7] !== coloresDigitos[0]) {
                    if (coloresDigitos[7] === 'green') {
                        getCelda('Patrón Impar', 2).style.backgroundColor = 'green';
                        getCelda('Patrón Impar', 5).style.backgroundColor = 'green';
                    } else {
                        getCelda('Patrón Impar', 2).style.backgroundColor = 'red';
                        getCelda('Patrón Impar', 5).style.backgroundColor = 'red';
                    }
                }
            }

            //Analisis de las que pueden ganar en este digito:
            //MHI mayoria y minoria
            if (coloresDigitos[7] === 'doji' || coloresDigitos[8] === 'doji' || coloresDigitos[9] === coloresDigitos == 'doji') {
                historicoMHI.shift();
                historicoMHI.push("E");
                actualizarHistorico("MHI_Minoría", historicoMHI);
                historicoMHIMAY.shift();
                historicoMHIMAY.push("E");
                actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
            } else {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario === coloresDigitos[0]) {
                    historicoMHI.shift();
                    historicoMHI.push("D");
                    actualizarHistorico("MHI_Minoría", historicoMHI);
                }
                const mayoritario = colorMasRepetido([7, 8, 9]);

                if (mayoritario === coloresDigitos[0]) {
                    historicoMHIMAY.shift();
                    historicoMHIMAY.push("D");
                    actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
                }
            }
            //MILLON mayoria y minoria
            if (coloresDigitos[5] === 'doji' || coloresDigitos[6] === 'doji' || coloresDigitos[7] === 'doji' || coloresDigitos[8] === 'doji' || coloresDigitos[9] === coloresDigitos == 'doji') {
                historicoMILLONMIN.shift();
                historicoMILLONMIN.push("E");
                actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
                historicoMILLONMAY.shift();
                historicoMILLONMAY.push("E");
                actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
            } else {
                const minoritario = colorMenosRepetido([5, 6, 7, 8, 9]);
                if (minoritario === coloresDigitos[0]) {
                    historicoMILLONMIN.shift();
                    historicoMILLONMIN.push("D");
                    actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
                }
                const mayoritario = colorMasRepetido([5, 6, 7, 8, 9]);

                if (mayoritario === coloresDigitos[0]) {
                    historicoMILLONMAY.shift();
                    historicoMILLONMAY.push("D");
                    actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
                }
            }
            //Torres Gemelas
            if (coloresDigitos[5] !== 'doji') {
                if (coloresDigitos[5] !== coloresDigitos[9] && coloresDigitos[5] === coloresDigitos[0]) {
                    historicoTORRESGEMELAS.shift();
                    historicoTORRESGEMELAS.push("G1");
                    actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
                }
            }
            //Tres Mosqueteros
            if (coloresDigitos[7] !== 'doji') {
                if (coloresDigitos[7] !== coloresDigitos[8] && coloresDigitos[7] !== coloresDigitos[9] && coloresDigitos[7] === coloresDigitos[0]) {
                    historicoMOSQUETEROS.shift();
                    historicoMOSQUETEROS.push("G2");
                    actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
                } else if (coloresDigitos[7] !== coloresDigitos[8] && coloresDigitos[7] !== coloresDigitos[9] && coloresDigitos[7] !== coloresDigitos[0]) {
                    historicoMOSQUETEROS.shift();
                    historicoMOSQUETEROS.push("L");
                    actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
                }
            }
            //Patron Impar
            if (coloresDigitos[7] === 'doji') {
                historicoPATRONIMPAR.shift();
                historicoPATRONIMPAR.push("E");
                actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
            } else {
                if (coloresDigitos[7] === coloresDigitos[0]) {
                    historicoPATRONIMPAR.shift();
                    historicoPATRONIMPAR.push("D");
                    actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
                }
            }
            //Tres Vecinos
            if (coloresDigitos[8] !== 'doji') {
                if (coloresDigitos[8] !== coloresDigitos[9] && coloresDigitos[8] === coloresDigitos[0]) {
                    historicoTRESVECINOS.shift();
                    historicoTRESVECINOS.push("G1");
                    actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
                }
            }
            //Patron 3x1
            if (coloresDigitos[5] !== 'doji' && coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji') {
                const minoritario = colorMenosRepetido([5, 6, 7]);
                if (minoritario !== coloresDigitos[9] && minoritario === coloresDigitos[0]) {
                    historicoPATRON3X1.shift();
                    historicoPATRON3X1.push("G1");
                    actualizarHistorico("Patron_3x1", historicoPATRON3X1);
                }
            }
        }

        function digito1(vela) {
            ultimaVela = coloresDigitos[1];
            ['MHI Minoría', 'MHI Mayoría', 'Millón Minoría', 'Millón Mayoría'].forEach(patron => {
                getCelda(patron, 3).style.backgroundColor = '';
                getCelda(patron, 6).style.backgroundColor = '';
            });
            //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
            getCelda('MHI 2 Minoría', 2).style.backgroundColor = '';
            getCelda('MHI 2 Minoría', 5).style.backgroundColor = '';
            getCelda('MHI 2 Mayoría', 2).style.backgroundColor = '';
            getCelda('MHI 2 Mayoría', 5).style.backgroundColor = '';
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario === coloresDigitos[1]) {
                    if (minoritario === 'green') {
                        getCelda('MHI 2 Mayoría', 3).style.backgroundColor = 'red';
                    }
                    else {
                        getCelda('MHI 2 Mayoría', 6).style.backgroundColor = 'green';
                    }
                } else {
                    if (minoritario === 'green') {
                        getCelda('MHI 2 Minoría', 6).style.backgroundColor = 'green';
                    }
                    else {
                        getCelda('MHI 2 Minoría', 3).style.backgroundColor = 'red';
                    }
                }
            }//Analisis Correspondiente a MMHI3 Minoria MHI3 Mayoria
            getCelda('MHI 3 Minoría', 1).style.backgroundColor = '';
            getCelda('MHI 3 Minoría', 4).style.backgroundColor = '';
            getCelda('MHI 3 Mayoría', 1).style.backgroundColor = '';
            getCelda('MHI 3 Mayoría', 4).style.backgroundColor = '';
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario === 'green') {
                    getCelda('MHI 3 Minoría', 5).style.backgroundColor = 'green';
                    getCelda('MHI 3 Mayoría', 2).style.backgroundColor = 'red';
                } else {
                    getCelda('MHI 3 Minoría', 2).style.backgroundColor = 'red';
                    getCelda('MHI 3 Mayoría', 5).style.backgroundColor = 'green';
                }
            }
            //Analisis correspondiente a TRES MOSQUETEROS
            getCelda('Tres Mosqueteros', 1).style.backgroundColor = 'green';
            getCelda('Tres Mosqueteros', 4).style.backgroundColor = 'red';
            //Analisis correspondiente a PATRON 23
            getCelda('Patrón 23', 2).style.backgroundColor = '';
            getCelda('Patrón 23', 5).style.backgroundColor = '';
            if (coloresDigitos[0] !== 'doji') {
                if (coloresDigitos[0] !== coloresDigitos[1]) {
                    if (coloresDigitos[0] === 'green') {
                        getCelda('Patrón 23', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('Patrón 23', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analasis para MEJOR DE TRES
            getCelda('Mejor de 3', 1).style.backgroundColor = '';
            getCelda('Mejor de 3', 4).style.backgroundColor = '';
            if (coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji') {
                const minoritario = colorMenosRepetido([6, 7, 8]);
                if (minoritario === "green") {
                    getCelda('Mejor de 3', 2).style.backgroundColor = 'red';
                } else {
                    getCelda('Mejor de 3', 5).style.backgroundColor = 'green';
                }
            }
            // Analisis Patron Impar
            getCelda('Patrón Impar', 2).style.backgroundColor = '';
            getCelda('Patrón Impar', 5).style.backgroundColor = '';

            //Analisis de las que pueden ganar en este digito:
            //MHI mayoria y minoria
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario !== coloresDigitos[0] && minoritario === coloresDigitos[1]) {
                    historicoMHI.shift();
                    historicoMHI.push("G1");
                    actualizarHistorico("MHI_Minoría", historicoMHI);
                }
                const mayoritario = colorMasRepetido([7, 8, 9]);
                if (mayoritario !== coloresDigitos[0] && mayoritario === coloresDigitos[1]) {
                    historicoMHIMAY.shift();
                    historicoMHIMAY.push("G1");
                    actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
                }
            }
            //MHI2 mayoria y minoria2
            if (coloresDigitos[7] === 'doji' || coloresDigitos[8] === 'doji' || coloresDigitos[9] === coloresDigitos == 'doji') {
                historicoMHI2.shift();
                historicoMHI2.push("E");
                actualizarHistorico("MHI_2_Minoría", historicoMHI2);
                historicoMHI2MAY.shift();
                historicoMHI2MAY.push("E");
                actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
            } else {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario === coloresDigitos[1]) {
                    historicoMHI2.shift();
                    historicoMHI2.push("D");
                    actualizarHistorico("MHI_2_Minoría", historicoMHI2);
                }
                const mayoritario = colorMasRepetido([7, 8, 9]);
                if (mayoritario === coloresDigitos[1]) {
                    historicoMHI2MAY.shift();
                    historicoMHI2MAY.push("D");
                    actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
                }
            }
            //MHI mayoria y minoria
            if (coloresDigitos[5] !== 'doji' && coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([5, 6, 7, 8, 9]);
                if (minoritario !== coloresDigitos[0] && minoritario === coloresDigitos[1]) {
                    historicoMILLONMIN.shift();
                    historicoMILLONMIN.push("G1");
                    actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
                }
                const mayoritario = colorMasRepetido([5, 6, 7, 8, 9]);
                if (mayoritario !== coloresDigitos[0] && mayoritario === coloresDigitos[1]) {
                    historicoMILLONMAY.shift();
                    historicoMILLONMAY.push("G1");
                    actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
                }
            }
            //Torres Gemelas
            if (coloresDigitos[5] !== 'doji') {
                if (coloresDigitos[5] !== coloresDigitos[9] && coloresDigitos[5] !== coloresDigitos[0] && coloresDigitos[5] === coloresDigitos[1]) {
                    historicoTORRESGEMELAS.shift();
                    historicoTORRESGEMELAS.push("G2");
                    actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
                } else if (coloresDigitos[5] !== coloresDigitos[9] && coloresDigitos[5] !== coloresDigitos[0] && coloresDigitos[5] !== coloresDigitos[1]) {
                    historicoTORRESGEMELAS.shift();
                    historicoTORRESGEMELAS.push("L");
                    actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
                }
            }
            //Tres Vecinos
            if (coloresDigitos[8] !== 'doji') {
                if (coloresDigitos[8] !== coloresDigitos[9] && coloresDigitos[8] !== coloresDigitos[0] && coloresDigitos[8] === coloresDigitos[1]) {
                    historicoTRESVECINOS.shift();
                    historicoTRESVECINOS.push("G2");
                    actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
                } else if (coloresDigitos[8] !== coloresDigitos[9] && coloresDigitos[8] !== coloresDigitos[0] && coloresDigitos[8] !== coloresDigitos[1]) {
                    historicoTRESVECINOS.shift();
                    historicoTRESVECINOS.push("L");
                    actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
                }
            }
            //Patron 3x1
            if (coloresDigitos[5] !== 'doji' && coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji') {
                const minoritario = colorMenosRepetido([5, 6, 7]);
                if (minoritario !== coloresDigitos[9] && minoritario !== coloresDigitos[0] && minoritario === coloresDigitos[1]) {
                    historicoPATRON3X1.shift();
                    historicoPATRON3X1.push("G2");
                    actualizarHistorico("Patron_3x1", historicoPATRON3X1);
                } else if (minoritario !== coloresDigitos[9] && minoritario !== coloresDigitos[0] && minoritario !== coloresDigitos[1]) {
                    historicoPATRON3X1.shift();
                    historicoPATRON3X1.push("L");
                    actualizarHistorico("Patron_3x1", historicoPATRON3X1);
                }
            }
            //Patron 23
            if (coloresDigitos[0] === 'doji') {
                historicoPADRON23.shift();
                historicoPADRON23.push("E");
                actualizarHistorico("Patrón_23", historicoPADRON23);
            } else {
                if (coloresDigitos[0] === coloresDigitos[1]) {
                    historicoPADRON23.shift();
                    historicoPADRON23.push("D");
                    actualizarHistorico("Patrón_23", historicoPADRON23);
                }
            }
        }

        function digito2(vela) {
            ultimaVela = coloresDigitos[2];
            //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
            getCelda('MHI 2 Minoría', 3).style.backgroundColor = '';
            getCelda('MHI 2 Minoría', 6).style.backgroundColor = '';
            getCelda('MHI 2 Mayoría', 3).style.backgroundColor = '';
            getCelda('MHI 2 Mayoría', 6).style.backgroundColor = '';
            getCelda('MHI 3 Minoría', 2).style.backgroundColor = '';
            getCelda('MHI 3 Minoría', 5).style.backgroundColor = '';
            getCelda('MHI 3 Mayoría', 2).style.backgroundColor = '';
            getCelda('MHI 3 Mayoría', 5).style.backgroundColor = '';
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario === coloresDigitos[2]) {
                    if (minoritario == 'green') {
                        getCelda('MHI 3 Mayoría', 3).style.backgroundColor = 'red';
                    } else {
                        getCelda('MHI 3 Mayoría', 6).style.backgroundColor = 'green';
                    }
                } else {
                    if (minoritario === 'green') {
                        getCelda('MHI 3 Minoría', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('MHI 3 Minoría', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analasis para Torres Gemelas
            if (coloresDigitos[0] !== 'doji') {
                getCelda('Torres Gemelas', 1).style.backgroundColor = coloresDigitos[0];
                getCelda('Torres Gemelas', 4).style.backgroundColor = coloresDigitos[0];
            }
            //Analisis correspondiente a TRES MOSQUETEROS
            getCelda('Tres Mosqueteros', 1).style.backgroundColor = '';
            getCelda('Tres Mosqueteros', 4).style.backgroundColor = '';
            if (coloresDigitos[2] !== 'doji') {
                if (coloresDigitos[2] === 'green') {
                    getCelda('Tres Mosqueteros', 5).style.backgroundColor = 'green';
                } else {
                    getCelda('Tres Mosqueteros', 2).style.backgroundColor = 'red';
                }
            }
            //Analisis correspondiente a TRES VECINOS
            getCelda('Tres Vecinos', 1).style.backgroundColor = 'green';
            getCelda('Tres Vecinos', 4).style.backgroundColor = 'red';
            //Analisis correspondiente a PATRON 23
            getCelda('Patrón 23', 3).style.backgroundColor = '';
            getCelda('Patrón 23', 6).style.backgroundColor = '';
            //Analasis para MEJOR DE TRES
            getCelda('Mejor de 3', 2).style.backgroundColor = '';
            getCelda('Mejor de 3', 5).style.backgroundColor = '';
            if (coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji') {
                const minoritario = colorMenosRepetido([5, 7, 8]);
                if (minoritario === coloresDigitos[2]) {
                    if (minoritario === "green") {
                        getCelda('Mejor de 3', 3).style.backgroundColor = 'red';
                    } else {
                        getCelda('Mejor de 3', 6).style.backgroundColor = 'green';
                    }
                }
            }
            //Analisis Patron 3x1
            if (coloresDigitos[0] !== 'doji' && coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji') {    //Para si hay un doji no hacer nada
                const minoritario = colorMenosRepetido([0, 1, 2]);
                getCelda('Patron 3x1', 1).style.backgroundColor = minoritario;
                getCelda('Patron 3x1', 4).style.backgroundColor = minoritario;

            }
            // Analisis Patron Impar
            if (coloresDigitos[7] !== 'doji') {
                if (coloresDigitos[7] !== coloresDigitos[0] && coloresDigitos[7] !== coloresDigitos[2]) {
                    if (coloresDigitos[7] === 'green') {
                        getCelda('Patrón Impar', 3).style.backgroundColor = 'green';
                        getCelda('Patrón Impar', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('Patrón Impar', 3).style.backgroundColor = 'red';
                        getCelda('Patrón Impar', 6).style.backgroundColor = 'red';
                    }
                }
            }

            //Analisis de las que pueden ganar en este digito:
            //MHI mayoria y minoria
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario !== coloresDigitos[0] && minoritario !== coloresDigitos[1] && minoritario === coloresDigitos[2]) {
                    historicoMHI.shift();
                    historicoMHI.push("G2");
                    actualizarHistorico("MHI_Minoría", historicoMHI);
                } else if (minoritario !== coloresDigitos[0] && minoritario !== coloresDigitos[1] && minoritario !== coloresDigitos[2]) {
                    historicoMHI.shift();
                    historicoMHI.push("L");
                    actualizarHistorico("MHI_Minoría", historicoMHI);
                }
                const mayoritario = colorMasRepetido([7, 8, 9]);
                if (mayoritario !== coloresDigitos[0] && mayoritario !== coloresDigitos[1] && mayoritario === coloresDigitos[2]) {
                    historicoMHIMAY.shift();
                    historicoMHIMAY.push("G2");
                    actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
                } else if (mayoritario !== coloresDigitos[0] && mayoritario !== coloresDigitos[1] && mayoritario !== coloresDigitos[2]) {
                    historicoMHIMAY.shift();
                    historicoMHIMAY.push("L");
                    actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
                }
            }
            //MHI mayoria2 y minoria2
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario !== coloresDigitos[1] && minoritario === coloresDigitos[2]) {
                    historicoMHI2.shift();
                    historicoMHI2.push("G1");
                    actualizarHistorico("MHI_2_Minoría", historicoMHI2);
                }
                const mayoritario = colorMasRepetido([7, 8, 9]);
                if (mayoritario !== coloresDigitos[1] && mayoritario === coloresDigitos[2]) {
                    historicoMHI2MAY.shift();
                    historicoMHI2MAY.push("G1");
                    actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
                }
            }
            //MHI3 mayoria y minoria3
            if (coloresDigitos[7] === 'doji' || coloresDigitos[8] === 'doji' || coloresDigitos[9] === coloresDigitos == 'doji') {
                historicoMHI3.shift();
                historicoMHI3.push("E");
                actualizarHistorico("MHI_3_Minoría", historicoMHI3);
                historicoMHI3MAY.shift();
                historicoMHI3MAY.push("E");
                actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
            } else {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario === coloresDigitos[2]) {
                    historicoMHI3.shift();
                    historicoMHI3.push("D");
                    actualizarHistorico("MHI_3_Minoría", historicoMHI3);
                }
                const mayoritario = colorMasRepetido([7, 8, 9]);
                if (mayoritario === coloresDigitos[2]) {
                    historicoMHI3MAY.shift();
                    historicoMHI3MAY.push("D");
                    actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
                }
            }
            if (coloresDigitos[5] !== 'doji' && coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([5, 6, 7, 8, 9]);
                if (minoritario !== coloresDigitos[0] && minoritario !== coloresDigitos[1] && minoritario === coloresDigitos[2]) {
                    historicoMILLONMIN.shift();
                    historicoMILLONMIN.push("G2");
                    actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
                } else if (minoritario !== coloresDigitos[0] && minoritario !== coloresDigitos[1] && minoritario !== coloresDigitos[2]) {
                    historicoMILLONMIN.shift();
                    historicoMILLONMIN.push("L");
                    actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
                }
                const mayoritario = colorMasRepetido([5, 6, 7, 8, 9]);
                if (mayoritario !== coloresDigitos[0] && mayoritario !== coloresDigitos[1] && mayoritario === coloresDigitos[2]) {
                    historicoMILLONMAY.shift();
                    historicoMILLONMAY.push("G2");
                    actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
                } else if (mayoritario !== coloresDigitos[0] && mayoritario !== coloresDigitos[1] && mayoritario !== coloresDigitos[2]) {
                    historicoMILLONMAY.shift();
                    historicoMILLONMAY.push("L");
                    actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
                }
            }
            //Mejor de 3
            if (coloresDigitos[6] === 'doji' || coloresDigitos[7] === 'doji' || coloresDigitos[8] === coloresDigitos == 'doji') {
                historicoMEJOR3.shift();
                historicoMEJOR3.push("E");
                actualizarHistorico("Mejor_de_3", historicoMEJOR3);
            } else {
                const mayoritario = colorMasRepetido([6, 7, 8]);
                if (mayoritario === coloresDigitos[2]) {
                    historicoMEJOR3.shift();
                    historicoMEJOR3.push("D");
                    actualizarHistorico("Mejor_de_3", historicoMEJOR3);
                }
            }
            //Patron Impar
            if (coloresDigitos[7] !== 'doji') {
                if (coloresDigitos[7] !== coloresDigitos[0] && coloresDigitos[7] === coloresDigitos[2]) {
                    historicoPATRONIMPAR.shift();
                    historicoPATRONIMPAR.push("G1");
                    actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
                }
            }
            //Patron 23
            if (coloresDigitos[0] !== 'doji') {
                if (coloresDigitos[0] !== coloresDigitos[1] && coloresDigitos[0] === coloresDigitos[2]) {
                    historicoPADRON23.shift();
                    historicoPADRON23.push("G1");
                    actualizarHistorico("Patrón_23", historicoPADRON23);
                }
            }
        }

        function digito3(vela) {
            ultimaVela = coloresDigitos[3];
            //MHI Minoria y MHI Mayoria
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji') {
                if (coloresDigitos[2] === coloresDigitos[3]) {
                    const opuesto = coloresDigitos[2] === 'red' ? 'green' : 'red';
                    getCelda('MHI Minoría', 1).style.backgroundColor = opuesto;
                    getCelda('MHI Minoría', 4).style.backgroundColor = opuesto;
                    getCelda('MHI Mayoría', 1).style.backgroundColor = coloresDigitos[2];
                    getCelda('MHI Mayoría', 4).style.backgroundColor = coloresDigitos[2];
                } else {
                    getCelda('MHI Minoría', 1).style.backgroundColor = 'red';
                    getCelda('MHI Minoría', 4).style.backgroundColor = 'green';
                    getCelda('MHI Mayoría', 1).style.backgroundColor = 'green';
                    getCelda('MHI Mayoría', 4).style.backgroundColor = 'red';
                }
            }
            //Millon Minoria y Millon Mayoria
            if (coloresDigitos[0] !== 'doji' && coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji') {
                const minoritario = colorMenosRepetido([0, 1, 2, 3]);
                if (minoritario === 'empate') {
                    getCelda('Millón Minoría', 1).style.backgroundColor = 'red';
                    getCelda('Millón Minoría', 4).style.backgroundColor = 'green';
                    getCelda('Millón Mayoría', 1).style.backgroundColor = 'green';
                    getCelda('Millón Mayoría', 4).style.backgroundColor = 'red';
                }
                else if (minoritario === 'red') {
                    getCelda('Millón Minoría', 1).style.backgroundColor = 'red';
                    getCelda('Millón Minoría', 4).style.backgroundColor = 'red';
                    getCelda('Millón Mayoría', 1).style.backgroundColor = 'green';
                    getCelda('Millón Mayoría', 4).style.backgroundColor = 'green';
                }
                else {
                    getCelda('Millón Minoría', 1).style.backgroundColor = 'green';
                    getCelda('Millón Minoría', 4).style.backgroundColor = 'green';
                    getCelda('Millón Mayoría', 1).style.backgroundColor = 'red';
                    getCelda('Millón Mayoría', 4).style.backgroundColor = 'red';
                }
            }
            getCelda('MHI 3 Minoría', 3).style.backgroundColor = '';
            getCelda('MHI 3 Minoría', 6).style.backgroundColor = '';
            getCelda('MHI 3 Mayoría', 3).style.backgroundColor = '';
            getCelda('MHI 3 Mayoría', 6).style.backgroundColor = '';
            //Analasis para Torres Gemelas
            getCelda('Torres Gemelas', 1).style.backgroundColor = '';
            getCelda('Torres Gemelas', 4).style.backgroundColor = '';
            if (coloresDigitos[0] !== 'doji') {
                if (coloresDigitos[0] === 'green') {
                    getCelda('Torres Gemelas', 5).style.backgroundColor = coloresDigitos[0];
                } else {
                    getCelda('Torres Gemelas', 2).style.backgroundColor = coloresDigitos[0];
                }
            }
            //Analisis correspondiente a TRES MOSQUETEROS
            getCelda('Tres Mosqueteros', 2).style.backgroundColor = '';
            getCelda('Tres Mosqueteros', 5).style.backgroundColor = '';
            if (coloresDigitos[2] !== 'doji') {
                if (coloresDigitos[2] !== coloresDigitos[3]) {
                    if (coloresDigitos[2] === 'green') {
                        getCelda('Tres Mosqueteros', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('Tres Mosqueteros', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analisis correspondiente a TRES VECINOS
            getCelda('Tres Vecinos', 1).style.backgroundColor = '';
            getCelda('Tres Vecinos', 4).style.backgroundColor = '';
            if (coloresDigitos[3] !== 'doji') {
                if (coloresDigitos[3] === 'green') {
                    getCelda('Tres Vecinos', 5).style.backgroundColor = 'green';
                } else {
                    getCelda('Tres Vecinos', 2).style.backgroundColor = 'red';
                }
            }
            //Analasis para MEJOR DE TRES
            getCelda('Mejor de 3', 3).style.backgroundColor = '';
            getCelda('Mejor de 3', 6).style.backgroundColor = '';
            //Analisis Patron 3x1
            getCelda('Patron 3x1', 1).style.backgroundColor = '';
            getCelda('Patron 3x1', 4).style.backgroundColor = '';
            if (coloresDigitos[0] !== 'doji' && coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji') {    //Para si hay un doji no hacer nada
                const minoritario = colorMenosRepetido([0, 1, 2]);
                if (minoritario == 'green') {
                    getCelda('Patron 3x1', 5).style.backgroundColor = 'green';
                } else {
                    getCelda('Patron 3x1', 2).style.backgroundColor = 'red';
                }
            }
            // Analisis Patron Impar
            getCelda('Patrón Impar', 3).style.backgroundColor = '';
            getCelda('Patrón Impar', 6).style.backgroundColor = '';
            if (coloresDigitos[2] !== 'doji') {
                getCelda('Patrón Impar', 1).style.backgroundColor = coloresDigitos[2];
                getCelda('Patrón Impar', 4).style.backgroundColor = coloresDigitos[2];
            }

            //Analisis de las que pueden ganar en este digito:
            //MHI mayoria2 y minoria2
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario !== coloresDigitos[1] && minoritario !== coloresDigitos[2] && minoritario === coloresDigitos[3]) {
                    historicoMHI2.shift();
                    historicoMHI2.push("G2");
                    actualizarHistorico("MHI_2_Minoría", historicoMHI2);
                } else if (minoritario !== coloresDigitos[1] && minoritario !== coloresDigitos[2] && minoritario !== coloresDigitos[3]) {
                    historicoMHI2.shift();
                    historicoMHI2.push("L");
                    actualizarHistorico("MHI_2_Minoría", historicoMHI2);
                }
                const mayoritario = colorMasRepetido([7, 8, 9]);
                if (mayoritario !== coloresDigitos[1] && mayoritario !== coloresDigitos[2] && mayoritario === coloresDigitos[3]) {
                    historicoMHI2MAY.shift();
                    historicoMHI2MAY.push("G2");
                    actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
                } else if (mayoritario !== coloresDigitos[1] && mayoritario !== coloresDigitos[2] && mayoritario !== coloresDigitos[3]) {
                    historicoMHI2MAY.shift();
                    historicoMHI2MAY.push("L");
                    actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
                }
            }
            //MHI mayoria3 y minoria3
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario !== coloresDigitos[2] && minoritario === coloresDigitos[3]) {
                    historicoMHI3.shift();
                    historicoMHI3.push("G1");
                    actualizarHistorico("MHI_3_Minoría", historicoMHI3);
                }
                const mayoritario = colorMasRepetido([7, 8, 9]);
                if (mayoritario !== coloresDigitos[2] && mayoritario === coloresDigitos[3]) {
                    historicoMHI3MAY.shift();
                    historicoMHI3MAY.push("G1");
                    actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
                }
            }
            if (coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji') {
                const mayoritario = colorMasRepetido([6, 7, 8]);
                if (mayoritario !== coloresDigitos[2] && mayoritario === coloresDigitos[3]) {
                    historicoMEJOR3.shift();
                    historicoMEJOR3.push("G1");
                    actualizarHistorico("Mejor_de_3", historicoMEJOR3);
                }
            }
            //Tres Mosqueteros
            if (coloresDigitos[2] === 'doji') {
                historicoMOSQUETEROS.shift();
                historicoMOSQUETEROS.push("E");
                actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
            } else {
                if (coloresDigitos[2] === coloresDigitos[3]) {
                    historicoMOSQUETEROS.shift();
                    historicoMOSQUETEROS.push("D");
                    actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
                }
            }
            //Patron 23
            if (coloresDigitos[0] !== 'doji') {
                if (coloresDigitos[0] !== coloresDigitos[1] && coloresDigitos[0] !== coloresDigitos[2] && coloresDigitos[0] === coloresDigitos[3]) {
                    historicoPADRON23.shift();
                    historicoPADRON23.push("G2");
                    actualizarHistorico("Patrón_23", historicoPADRON23);
                } else if (coloresDigitos[0] !== coloresDigitos[1] && coloresDigitos[0] !== coloresDigitos[2] && coloresDigitos[0] !== coloresDigitos[3]) {
                    historicoPADRON23.shift();
                    historicoPADRON23.push("L");
                    actualizarHistorico("Patrón_23", historicoPADRON23);
                }
            }
        }

        function digito4(vela) {
            ultimaVela = coloresDigitos[4];
            //Analisis Correspondiente a MHMI Minoria MHI Mayoria
            ['MHI Minoría', 'MHI Mayoría', 'Millón Minoría', 'Millón Mayoría'].forEach(patron => {
                getCelda(patron, 1).style.backgroundColor = '';
                getCelda(patron, 4).style.backgroundColor = '';
            });
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario === 'red') {
                    getCelda('MHI Minoría', 2).style.backgroundColor = 'red';
                    getCelda('MHI Mayoría', 5).style.backgroundColor = 'green';
                } else if (minoritario === 'green') {
                    getCelda('MHI Minoría', 5).style.backgroundColor = 'green';
                    getCelda('MHI Mayoría', 2).style.backgroundColor = 'red';
                }
            }
            //Analisis Correspondiente a Millón Minoria Millón Mayoria
            if (coloresDigitos[0] !== 'doji' && coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {    //Para si hay un doji no hacer nada
                const minoritario = colorMenosRepetido([0, 1, 2, 3, 4]);
                if (minoritario === 'red') {
                    getCelda('Millón Minoría', 2).style.backgroundColor = 'red';
                    getCelda('Millón Mayoría', 5).style.backgroundColor = 'green';
                } else {
                    getCelda('Millón Minoría', 5).style.backgroundColor = 'green';
                    getCelda('Millón Mayoría', 2).style.backgroundColor = 'red';
                }
            }

            //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario === 'red') {
                    getCelda('MHI 2 Minoría', 1).style.backgroundColor = 'red';
                    getCelda('MHI 2 Minoría', 4).style.backgroundColor = 'red';
                    getCelda('MHI 2 Mayoría', 1).style.backgroundColor = 'green';
                    getCelda('MHI 2 Mayoría', 4).style.backgroundColor = 'green';
                } else if (minoritario === 'green') {
                    getCelda('MHI 2 Minoría', 1).style.backgroundColor = 'green';
                    getCelda('MHI 2 Minoría', 4).style.backgroundColor = 'green';
                    getCelda('MHI 2 Mayoría', 1).style.backgroundColor = 'red';
                    getCelda('MHI 2 Mayoría', 4).style.backgroundColor = 'red';

                }
            }
            //Analasis para Torres Gemelas
            getCelda('Torres Gemelas', 2).style.backgroundColor = '';
            getCelda('Torres Gemelas', 5).style.backgroundColor = '';
            if (coloresDigitos[0] !== 'doji') {
                if (coloresDigitos[0] !== coloresDigitos[4]) {
                    if (coloresDigitos[0] === 'green') {
                        getCelda('Torres Gemelas', 6).style.backgroundColor = coloresDigitos[0];
                    } else {
                        getCelda('Torres Gemelas', 3).style.backgroundColor = coloresDigitos[0];
                    }
                }
            }
            //Analisis correspondiente a TRES MOSQUETEROS
            getCelda('Tres Mosqueteros', 3).style.backgroundColor = '';
            getCelda('Tres Mosqueteros', 6).style.backgroundColor = '';
            //Analisis correspondiente a TRES VECINOS
            getCelda('Tres Vecinos', 2).style.backgroundColor = '';
            getCelda('Tres Vecinos', 5).style.backgroundColor = '';
            if (coloresDigitos[3] !== 'doji') {
                if (coloresDigitos[3] !== coloresDigitos[4]) {
                    if (coloresDigitos[3] === 'green') {
                        getCelda('Tres Vecinos', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('Tres Vecinos', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analisis correspondiente a PATRON 23
            getCelda('Patrón 23', 1).style.backgroundColor = 'green';
            getCelda('Patrón 23', 4).style.backgroundColor = 'red';
            //Analisis Patron 3x1
            getCelda('Patron 3x1', 2).style.backgroundColor = '';
            getCelda('Patron 3x1', 5).style.backgroundColor = '';
            if (coloresDigitos[0] !== 'doji' && coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji') {    //Para si hay un doji no hacer nada
                const minoritario = colorMenosRepetido([0, 1, 2]);
                if (minoritario !== coloresDigitos[4]) {
                    if (minoritario === 'green') {
                        getCelda('Patron 3x1', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('Patron 3x1', 3).style.backgroundColor = 'red';
                    }
                }
            }
            // Analisis Patron Impar
            getCelda('Patrón Impar', 1).style.backgroundColor = '';
            getCelda('Patrón Impar', 4).style.backgroundColor = '';

            //MHI mayoria3 y minoria3
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario !== coloresDigitos[2] && minoritario !== coloresDigitos[3] && minoritario === coloresDigitos[4]) {
                    historicoMHI3.shift();
                    historicoMHI3.push("G2");
                    actualizarHistorico("MHI_3_Minoría", historicoMHI3);
                } else if (minoritario !== coloresDigitos[2] && minoritario !== coloresDigitos[3] && minoritario !== coloresDigitos[4]) {
                    historicoMHI3.shift();
                    historicoMHI3.push("L");
                    actualizarHistorico("MHI_3_Minoría", historicoMHI3);
                }
                const mayoritario = colorMasRepetido([7, 8, 9]);
                if (mayoritario !== coloresDigitos[2] && mayoritario !== coloresDigitos[3] && mayoritario === coloresDigitos[4]) {
                    historicoMHI3MAY.shift();
                    historicoMHI3MAY.push("G2");
                    actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
                } else if (mayoritario !== coloresDigitos[2] && mayoritario !== coloresDigitos[3] && mayoritario !== coloresDigitos[4]) {
                    historicoMHI3MAY.shift();
                    historicoMHI3MAY.push("L");
                    actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
                }
            }
            //Torres Gemelas
            if (coloresDigitos[0] === 'doji') {
                historicoTORRESGEMELAS.shift();
                historicoTORRESGEMELAS.push("E");
                actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
            } else {
                if (coloresDigitos[0] === coloresDigitos[4]) {
                    historicoTORRESGEMELAS.shift();
                    historicoTORRESGEMELAS.push("D");
                    actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
                }
            }
            if (coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji') {
                const mayoritario = colorMasRepetido([6, 7, 8]);
                if (mayoritario !== coloresDigitos[2] && mayoritario !== coloresDigitos[3] && mayoritario === coloresDigitos[4]) {
                    historicoMEJOR3.shift();
                    historicoMEJOR3.push("G2");
                    actualizarHistorico("Mejor_de_3", historicoMEJOR3);
                } else if (mayoritario !== coloresDigitos[2] && mayoritario !== coloresDigitos[3] && mayoritario !== coloresDigitos[4]) {
                    historicoMEJOR3.shift();
                    historicoMEJOR3.push("L");
                    actualizarHistorico("Mejor_de_3", historicoMEJOR3);
                }
            }
            //Tres mosqueteros
            if (coloresDigitos[2] !== 'doji') {
                if (coloresDigitos[2] !== coloresDigitos[3] && coloresDigitos[2] === coloresDigitos[4]) {
                    historicoMOSQUETEROS.shift();
                    historicoMOSQUETEROS.push("G1");
                    actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
                }
            }
            //Patron Impar
            if (coloresDigitos[7] !== 'doji') {
                if (coloresDigitos[7] !== coloresDigitos[0] && coloresDigitos[7] !== coloresDigitos[2] && coloresDigitos[7] === coloresDigitos[4]) {
                    historicoPATRONIMPAR.shift();
                    historicoPATRONIMPAR.push("G2");
                    actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
                } else if (coloresDigitos[7] !== coloresDigitos[0] && coloresDigitos[7] !== coloresDigitos[0] && coloresDigitos[7] !== coloresDigitos[0]) {
                    historicoPATRONIMPAR.shift();
                    historicoPATRONIMPAR.push("L");
                    actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
                }
            }
            //Tres Vecinos
            if (coloresDigitos[3] === 'doji') {
                historicoTRESVECINOS.shift();
                historicoTRESVECINOS.push("E");
                actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
            } else {
                if (coloresDigitos[3] === coloresDigitos[4]) {
                    historicoTRESVECINOS.shift();
                    historicoTRESVECINOS.push("D");
                    actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
                }
            }
            //Patron 3x1
            if (coloresDigitos[0] === 'doji' || coloresDigitos[1] === 'doji' || coloresDigitos[2] === coloresDigitos == 'doji') {
                historicoPATRON3X1.shift();
                historicoPATRON3X1.push("E");
                actualizarHistorico("Patron_3x1", historicoPATRON3X1);
            } else {
                const minoritario = colorMenosRepetido([0, 1, 2]);
                if (minoritario === coloresDigitos[4]) {
                    historicoPATRON3X1.shift();
                    historicoPATRON3X1.push("D");
                    actualizarHistorico("Patron_3x1", historicoPATRON3X1);
                }
            }
        }

        function digito5(vela) {
            ultimaVela = coloresDigitos[5];
            ['MHI Minoría', 'MHI Mayoría', 'Millón Minoría', 'Millón Mayoría'].forEach(patron => {
                getCelda(patron, 2).style.backgroundColor = '';
                getCelda(patron, 5).style.backgroundColor = '';
            });
            //Analisis Correspondiente a NHI Minoria MHI Mayoria
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario === coloresDigitos[5]) {
                    // Gana MHI Minoría, pierde MHI Mayoría
                    if (minoritario === 'green') {
                        getCelda('MHI Mayoría', 3).style.backgroundColor = 'red';
                    } else if (minoritario === 'red') {
                        getCelda('MHI Mayoría', 6).style.backgroundColor = 'green';
                    }
                } else {
                    // Gana MHI Mayoría, pierde MHI Minoría
                    if (minoritario === 'green') {
                        getCelda('MHI Minoría', 6).style.backgroundColor = 'green';
                    } else if (minoritario === 'red') {
                        getCelda('MHI Minoría', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analisis Correspondiente a Millón Minoria Millón Mayoria
            if (coloresDigitos[0] !== 'doji' && coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {    //Para si hay un doji no hacer nada
                const minoritario = colorMenosRepetido([0, 1, 2, 3, 4]);
                if (minoritario === coloresDigitos[5]) {   //Se gana mill minoria y se pierde mill mayoria
                    if (minoritario === 'green') {
                        getCelda('Millón Mayoría', 3).style.backgroundColor = 'red';
                    }
                    if (minoritario === 'red') {
                        getCelda('Millón Mayoría', 6).style.backgroundColor = 'green';
                    }
                } else {
                    if (minoritario === 'green') {
                        getCelda('Millón Minoría', 6).style.backgroundColor = 'green';
                    }
                    if (minoritario === 'red') {
                        getCelda('Millón Minoría', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
            getCelda('MHI 2 Minoría', 1).style.backgroundColor = '';
            getCelda('MHI 2 Minoría', 4).style.backgroundColor = '';
            getCelda('MHI 2 Mayoría', 1).style.backgroundColor = '';
            getCelda('MHI 2 Mayoría', 4).style.backgroundColor = '';
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario === 'green') {
                    getCelda('MHI 2 Minoría', 5).style.backgroundColor = 'green';
                    getCelda('MHI 2 Mayoría', 2).style.backgroundColor = 'red';
                } else {
                    getCelda('MHI 2 Minoría', 2).style.backgroundColor = 'red';
                    getCelda('MHI 2 Mayoría', 5).style.backgroundColor = 'green';
                }
            }
            //Analisis Correspondiente a MMHI3 Minoria MHI3 Mayoria
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario === 'red') {
                    getCelda('MHI 3 Minoría', 1).style.backgroundColor = 'red';
                    getCelda('MHI 3 Minoría', 4).style.backgroundColor = 'red';
                    getCelda('MHI 3 Mayoría', 1).style.backgroundColor = 'green';
                    getCelda('MHI 3 Mayoría', 4).style.backgroundColor = 'green';
                } else if (minoritario === 'green') {
                    getCelda('MHI 3 Minoría', 1).style.backgroundColor = 'green';
                    getCelda('MHI 3 Minoría', 4).style.backgroundColor = 'green';
                    getCelda('MHI 3 Mayoría', 1).style.backgroundColor = 'red';
                    getCelda('MHI 3 Mayoría', 4).style.backgroundColor = 'red';
                }
            }
            //Analasis para Torres Gemelas
            getCelda('Torres Gemelas', 3).style.backgroundColor = '';
            getCelda('Torres Gemelas', 6).style.backgroundColor = '';
            //Analisis correspondiente a TRES VECINOS
            getCelda('Tres Vecinos', 3).style.backgroundColor = '';
            getCelda('Tres Vecinos', 6).style.backgroundColor = '';
            //Analisis correspondiente a PATRON 23
            getCelda('Patrón 23', 1).style.backgroundColor = '';
            getCelda('Patrón 23', 4).style.backgroundColor = '';
            if (coloresDigitos[5] !== 'doji') {
                if (coloresDigitos[5] === 'green') {
                    getCelda('Patrón 23', 5).style.backgroundColor = 'green';
                } else {
                    getCelda('Patrón 23', 2).style.backgroundColor = 'red';
                }
            }
            //Analasis para MEJOR DE TRES
            if (coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji') {
                const minoritario = colorMenosRepetido([1, 2, 3]);
                if (minoritario === 'green') {
                    getCelda('Mejor de 3', 1).style.backgroundColor = 'red';
                    getCelda('Mejor de 3', 4).style.backgroundColor = 'red';
                } else {
                    getCelda('Mejor de 3', 1).style.backgroundColor = 'green';
                    getCelda('Mejor de 3', 4).style.backgroundColor = 'green';
                }
            }
            //Analisis Patron 3x1
            getCelda('Patron 3x1', 3).style.backgroundColor = '';
            getCelda('Patron 3x1', 6).style.backgroundColor = '';
            // Analisis Patron Impar
            if (coloresDigitos[2] !== 'doji') {
                if (coloresDigitos[2] !== coloresDigitos[5]) {
                    if (coloresDigitos[2] === 'green') {
                        getCelda('Patrón Impar', 2).style.backgroundColor = 'green';
                        getCelda('Patrón Impar', 5).style.backgroundColor = 'green';
                    } else {
                        getCelda('Patrón Impar', 2).style.backgroundColor = 'red';
                        getCelda('Patrón Impar', 5).style.backgroundColor = 'red';
                    }
                }
            }
            //Analisis de las que pueden ganar en este digito:
            //MHI mayoria y minoria
            if (coloresDigitos[2] === 'doji' || coloresDigitos[3] === 'doji' || coloresDigitos[4] === coloresDigitos == 'doji') {
                historicoMHI.shift();
                historicoMHI.push("E");
                actualizarHistorico("MHI_Minoría", historicoMHI);
                historicoMHIMAY.shift();
                historicoMHIMAY.push("E");
                actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
            } else {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario === coloresDigitos[5]) {
                    historicoMHI.shift();
                    historicoMHI.push("D");
                    actualizarHistorico("MHI_Minoría", historicoMHI);
                }
                const mayoritario = colorMasRepetido([2, 3, 4]);
                if (mayoritario === coloresDigitos[5]) {
                    historicoMHIMAY.shift();
                    historicoMHIMAY.push("D");
                    actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
                }
            }
            //MHI mayoria y minoria
            if (coloresDigitos[0] === 'doji' || coloresDigitos[1] === 'doji' || coloresDigitos[2] === 'doji' || coloresDigitos[3] === 'doji' || coloresDigitos[4] === coloresDigitos == 'doji') {
                historicoMILLONMIN.shift();
                historicoMILLONMIN.push("E");
                actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
                historicoMILLONMAY.shift();
                historicoMILLONMAY.push("E");
                actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
            } else {
                const minoritario = colorMenosRepetido([0, 1, 2, 3, 4]);
                if (minoritario === coloresDigitos[5]) {
                    historicoMILLONMIN.shift();
                    historicoMILLONMIN.push("D");
                    actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
                }
                const mayoritario = colorMasRepetido([0, 1, 2, 3, 4]);
                if (mayoritario === coloresDigitos[5]) {
                    historicoMILLONMAY.shift();
                    historicoMILLONMAY.push("D");
                    actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
                }
            }
            //Torres Gemelas
            if (coloresDigitos[0] !== 'doji') {
                if (coloresDigitos[0] !== coloresDigitos[4] && coloresDigitos[0] === coloresDigitos[5]) {
                    historicoTORRESGEMELAS.shift();
                    historicoTORRESGEMELAS.push("G1");
                    actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
                }
            }
            //Tres Mosqueteros
            if (coloresDigitos[2] !== 'doji') {
                if (coloresDigitos[2] !== coloresDigitos[3] && coloresDigitos[2] !== coloresDigitos[4] && coloresDigitos[2] === coloresDigitos[5]) {
                    historicoMOSQUETEROS.shift();
                    historicoMOSQUETEROS.push("G2");
                    actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
                } else if (coloresDigitos[2] !== coloresDigitos[3] && coloresDigitos[2] !== coloresDigitos[4] && coloresDigitos[2] !== coloresDigitos[5]) {
                    historicoMOSQUETEROS.shift();
                    historicoMOSQUETEROS.push("L");
                    actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
                }
            }
            //Patron Impar
            if (coloresDigitos[2] === 'doji') {
                historicoPATRONIMPAR.shift();
                historicoPATRONIMPAR.push("E");
                actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
            } else {
                if (coloresDigitos[2] === coloresDigitos[5]) {
                    historicoPATRONIMPAR.shift();
                    historicoPATRONIMPAR.push("D");
                    actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
                }
            }
            //Tres Vecinos
            if (coloresDigitos[3] !== 'doji') {
                if (coloresDigitos[3] !== coloresDigitos[4] && coloresDigitos[3] === coloresDigitos[5]) {
                    historicoTRESVECINOS.shift();
                    historicoTRESVECINOS.push("G1");
                    actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
                }
            }
            //Patron 3x1
            if (coloresDigitos[0] !== 'doji' && coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji') {
                const minoritario = colorMenosRepetido([0, 1, 2]);
                if (minoritario !== coloresDigitos[4] && minoritario === coloresDigitos[5]) {
                    historicoPATRON3X1.shift();
                    historicoPATRON3X1.push("G1");
                    actualizarHistorico("Patron_3x1", historicoPATRON3X1);
                }
            }



        }

        function digito6(vela) {
            ultimaVela = coloresDigitos[6];
            ['MHI Minoría', 'MHI Mayoría', 'Millón Minoría', 'Millón Mayoría'].forEach(patron => {
                getCelda(patron, 3).style.backgroundColor = '';
                getCelda(patron, 6).style.backgroundColor = '';
            });
            //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
            getCelda('MHI 2 Minoría', 2).style.backgroundColor = '';
            getCelda('MHI 2 Minoría', 5).style.backgroundColor = '';
            getCelda('MHI 2 Mayoría', 2).style.backgroundColor = '';
            getCelda('MHI 2 Mayoría', 5).style.backgroundColor = '';
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario === coloresDigitos[6]) {
                    if (minoritario === 'green') {
                        getCelda('MHI 2 Mayoría', 3).style.backgroundColor = 'red';
                    }
                    else {
                        getCelda('MHI 2 Mayoría', 6).style.backgroundColor = 'green';
                    }
                } else {
                    if (minoritario === 'green') {
                        getCelda('MHI 2 Minoría', 6).style.backgroundColor = 'green';
                    }
                    else {
                        getCelda('MHI 2 Minoría', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analisis Correspondiente a MMHI3 Minoria MHI3 Mayoria
            getCelda('MHI 3 Minoría', 1).style.backgroundColor = '';
            getCelda('MHI 3 Minoría', 4).style.backgroundColor = '';
            getCelda('MHI 3 Mayoría', 1).style.backgroundColor = '';
            getCelda('MHI 3 Mayoría', 4).style.backgroundColor = '';
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario === 'green') {
                    getCelda('MHI 3 Minoría', 5).style.backgroundColor = 'green';
                    getCelda('MHI 3 Mayoría', 2).style.backgroundColor = 'red';
                } else {
                    getCelda('MHI 3 Minoría', 2).style.backgroundColor = 'red';
                    getCelda('MHI 3 Mayoría', 5).style.backgroundColor = 'green';
                }
            }
            //Analisis correspondiente a TRES MOSQUETEROS
            getCelda('Tres Mosqueteros', 1).style.backgroundColor = 'green';
            getCelda('Tres Mosqueteros', 4).style.backgroundColor = 'red';
            //Analisis correspondiente a PATRON 23
            getCelda('Patrón 23', 2).style.backgroundColor = '';
            getCelda('Patrón 23', 5).style.backgroundColor = '';
            if (coloresDigitos[5] !== 'doji') {
                if (coloresDigitos[5] !== coloresDigitos[6]) {
                    if (coloresDigitos[5] === 'green') {
                        getCelda('Patrón 23', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('Patrón 23', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analasis para MEJOR DE TRES
            getCelda('Mejor de 3', 1).style.backgroundColor = '';
            getCelda('Mejor de 3', 4).style.backgroundColor = '';
            if (coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji') {
                const minoritario = colorMenosRepetido([1, 2, 3]);
                if (minoritario === "green") {
                    getCelda('Mejor de 3', 2).style.backgroundColor = 'red';
                } else {
                    getCelda('Mejor de 3', 5).style.backgroundColor = 'green';
                }
            }
            // Analisis Patron Impar
            getCelda('Patrón Impar', 2).style.backgroundColor = '';
            getCelda('Patrón Impar', 5).style.backgroundColor = '';

            //Analisis de las que pueden ganar en este digito:
            //MHI mayoria y minoria
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario !== coloresDigitos[5] && minoritario === coloresDigitos[6]) {
                    historicoMHI.shift();
                    historicoMHI.push("G1");
                    actualizarHistorico("MHI_Minoría", historicoMHI);
                }
                const mayoritario = colorMasRepetido([2, 3, 4]);
                if (mayoritario !== coloresDigitos[5] && mayoritario === coloresDigitos[6]) {
                    historicoMHIMAY.shift();
                    historicoMHIMAY.push("G1");
                    actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
                }
            }
            //MHI mayoria2 y minoria2
            if (coloresDigitos[2] === 'doji' || coloresDigitos[3] === 'doji' || coloresDigitos[4] === coloresDigitos == 'doji') {
                historicoMHI2.shift();
                historicoMHI2.push("E");
                actualizarHistorico("MHI_2_Minoría", historicoMHI2);
                historicoMHI2MAY.shift();
                historicoMHI2MAY.push("E");
                actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
            } else {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario === coloresDigitos[6]) {
                    historicoMHI2.shift();
                    historicoMHI2.push("D");
                    actualizarHistorico("MHI_2_Minoría", historicoMHI2);
                }
                const mayoritario = colorMasRepetido([2, 3, 4]);
                if (mayoritario === coloresDigitos[6]) {
                    historicoMHI2MAY.shift();
                    historicoMHI2MAY.push("D");
                    actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
                }
            }
            //MHI mayoria y minoria
            if (coloresDigitos[0] !== 'doji' && coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([0, 1, 2, 3, 4]);
                if (minoritario !== coloresDigitos[5] && minoritario === coloresDigitos[6]) {
                    historicoMILLONMIN.shift();
                    historicoMILLONMIN.push("G1");
                    actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
                }
                const mayoritario = colorMasRepetido([0, 1, 2, 3, 4]);
                if (mayoritario !== coloresDigitos[5] && mayoritario === coloresDigitos[6]) {
                    historicoMILLONMAY.shift();
                    historicoMILLONMAY.push("G1");
                    actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
                }
            }
            //Torres Gemelas
            if (coloresDigitos[0] !== 'doji') {
                if (coloresDigitos[0] !== coloresDigitos[4] && coloresDigitos[0] !== coloresDigitos[5] && coloresDigitos[0] === coloresDigitos[6]) {
                    historicoTORRESGEMELAS.shift();
                    historicoTORRESGEMELAS.push("G2");
                    actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
                } else if (coloresDigitos[0] !== coloresDigitos[4] && coloresDigitos[0] !== coloresDigitos[5] && coloresDigitos[0] !== coloresDigitos[6]) {
                    historicoTORRESGEMELAS.shift();
                    historicoTORRESGEMELAS.push("L");
                    actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
                }
            }
            //Tres Vecinos
            if (coloresDigitos[3] !== 'doji') {
                if (coloresDigitos[3] !== coloresDigitos[4] && coloresDigitos[3] !== coloresDigitos[5] && coloresDigitos[3] === coloresDigitos[6]) {
                    historicoTRESVECINOS.shift();
                    historicoTRESVECINOS.push("G2");
                    actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
                } else if (coloresDigitos[3] !== coloresDigitos[4] && coloresDigitos[3] !== coloresDigitos[5] && coloresDigitos[3] !== coloresDigitos[6]) {
                    historicoTRESVECINOS.shift();
                    historicoTRESVECINOS.push("L");
                    actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
                }
            }
            //Patron 3x1
            if (coloresDigitos[0] !== 'doji' && coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji') {
                const minoritario = colorMenosRepetido([0, 1, 2]);
                if (minoritario !== coloresDigitos[4] && minoritario !== coloresDigitos[5] && minoritario === coloresDigitos[6]) {
                    historicoPATRON3X1.shift();
                    historicoPATRON3X1.push("G2");
                    actualizarHistorico("Patron_3x1", historicoPATRON3X1);
                } else if (minoritario !== coloresDigitos[4] && minoritario !== coloresDigitos[5] && minoritario !== coloresDigitos[6]) {
                    historicoPATRON3X1.shift();
                    historicoPATRON3X1.push("L");
                    actualizarHistorico("Patron_3x1", historicoPATRON3X1);
                }
            }
            //Patron 23
            if (coloresDigitos[5] === 'doji') {
                historicoPADRON23.shift();
                historicoPADRON23.push("E");
                actualizarHistorico("Patrón_23", historicoPADRON23);
            } else {
                if (coloresDigitos[5] === coloresDigitos[6]) {
                    historicoPADRON23.shift();
                    historicoPADRON23.push("D");
                    actualizarHistorico("Patrón_23", historicoPADRON23);
                }
            }

        }

        function digito7(vela) {
            ultimaVela = coloresDigitos[7];
            //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
            getCelda('MHI 2 Minoría', 3).style.backgroundColor = '';
            getCelda('MHI 2 Minoría', 6).style.backgroundColor = '';
            getCelda('MHI 2 Mayoría', 3).style.backgroundColor = '';
            getCelda('MHI 2 Mayoría', 6).style.backgroundColor = '';
            getCelda('MHI 3 Minoría', 2).style.backgroundColor = '';
            getCelda('MHI 3 Minoría', 5).style.backgroundColor = '';
            getCelda('MHI 3 Mayoría', 2).style.backgroundColor = '';
            getCelda('MHI 3 Mayoría', 5).style.backgroundColor = '';
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario === coloresDigitos[7]) {
                    if (minoritario == 'green') {
                        getCelda('MHI 3 Mayoría', 3).style.backgroundColor = 'red';
                    } else {
                        getCelda('MHI 3 Mayoría', 6).style.backgroundColor = 'green';
                    }
                } else {
                    if (minoritario === 'green') {
                        getCelda('MHI 3 Minoría', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('MHI 3 Minoría', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analasis para Torres Gemelas
            if (coloresDigitos[5] !== 'doji') {
                getCelda('Torres Gemelas', 1).style.backgroundColor = coloresDigitos[5];
                getCelda('Torres Gemelas', 4).style.backgroundColor = coloresDigitos[5];
            }
            //Analisis correspondiente a TRES MOSQUETEROS
            getCelda('Tres Mosqueteros', 1).style.backgroundColor = '';
            getCelda('Tres Mosqueteros', 4).style.backgroundColor = '';
            if (coloresDigitos[7] !== 'doji') {
                if (coloresDigitos[7] === 'green') {
                    getCelda('Tres Mosqueteros', 5).style.backgroundColor = 'green';
                } else {
                    getCelda('Tres Mosqueteros', 2).style.backgroundColor = 'red';
                }
            }
            //Analisis correspondiente a TRES VECINOS
            getCelda('Tres Vecinos', 1).style.backgroundColor = 'green';
            getCelda('Tres Vecinos', 4).style.backgroundColor = 'red';
            //Analisis correspondiente a PATRON 23
            getCelda('Patrón 23', 3).style.backgroundColor = '';
            getCelda('Patrón 23', 6).style.backgroundColor = '';
            //Analasis para MEJOR DE TRES
            getCelda('Mejor de 3', 2).style.backgroundColor = '';
            getCelda('Mejor de 3', 5).style.backgroundColor = '';
            if (coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji') {
                const minoritario = colorMenosRepetido([1, 2, 3]);
                if (minoritario === coloresDigitos[7]) {
                    if (minoritario === "green") {
                        getCelda('Mejor de 3', 3).style.backgroundColor = 'red';
                    } else {
                        getCelda('Mejor de 3', 6).style.backgroundColor = 'green';
                    }
                }
            }
            //Analasis para MEJOR DE TRES
            getCelda('Mejor de 3', 3).style.backgroundColor = '';
            getCelda('Mejor de 3', 6).style.backgroundColor = '';
            //Analisis Patron 3x1
            if (coloresDigitos[5] !== 'doji' && coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji') {    //Para si hay un doji no hacer nada
                const minoritario = colorMenosRepetido([5, 6, 7]);
                getCelda('Patron 3x1', 1).style.backgroundColor = minoritario;
                getCelda('Patron 3x1', 4).style.backgroundColor = minoritario;

            }
            // Analisis Patron Impar
            if (coloresDigitos[2] !== 'doji') {
                if (coloresDigitos[2] !== coloresDigitos[5] && coloresDigitos[2] !== coloresDigitos[2]) {
                    if (coloresDigitos[2] === 'green') {
                        getCelda('Patrón Impar', 3).style.backgroundColor = 'green';
                        getCelda('Patrón Impar', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('Patrón Impar', 3).style.backgroundColor = 'red';
                        getCelda('Patrón Impar', 6).style.backgroundColor = 'red';
                    }
                }
            }

            //Analisis de las que pueden ganar en este digito:
            //MHI mayoria y minoria
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario !== coloresDigitos[5] && minoritario !== coloresDigitos[6] && minoritario === coloresDigitos[7]) {
                    historicoMHI.shift();
                    historicoMHI.push("G2");
                    actualizarHistorico("MHI_Minoría", historicoMHI);
                } else if (minoritario !== coloresDigitos[5] && minoritario !== coloresDigitos[6] && minoritario !== coloresDigitos[7]) {
                    historicoMHI.shift();
                    historicoMHI.push("L");
                    actualizarHistorico("MHI_Minoría", historicoMHI);
                }
                const mayoritario = colorMasRepetido([2, 3, 4]);
                if (mayoritario !== coloresDigitos[5] && mayoritario !== coloresDigitos[6] && mayoritario === coloresDigitos[7]) {
                    historicoMHIMAY.shift();
                    historicoMHIMAY.push("G2");
                    actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
                } else if (mayoritario !== coloresDigitos[5] && mayoritario !== coloresDigitos[6] && mayoritario !== coloresDigitos[7]) {
                    historicoMHIMAY.shift();
                    historicoMHIMAY.push("L");
                    actualizarHistorico("MHI_Mayoría", historicoMHIMAY);
                }
            }
            //MHI mayoria2 y minoria2
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario !== coloresDigitos[6] && minoritario === coloresDigitos[7]) {
                    historicoMHI2.shift();
                    historicoMHI2.push("G1");
                    actualizarHistorico("MHI_2_Minoría", historicoMHI2);
                }
                const mayoritario = colorMasRepetido([2, 3, 4]);
                if (mayoritario !== coloresDigitos[6] && mayoritario === coloresDigitos[7]) {
                    historicoMHI2MAY.shift();
                    historicoMHI2MAY.push("G1");
                    actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
                }
            }
            //MHI mayoria3 y minoria3
            if (coloresDigitos[2] === 'doji' || coloresDigitos[3] === 'doji' || coloresDigitos[4] === coloresDigitos == 'doji') {
                historicoMHI3.shift();
                historicoMHI3.push("E");
                actualizarHistorico("MHI_3_Minoría", historicoMHI3);
                historicoMHI3MAY.shift();
                historicoMHI3MAY.push("E");
                actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
            } else {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario === coloresDigitos[7]) {
                    historicoMHI3.shift();
                    historicoMHI3.push("D");
                    actualizarHistorico("MHI_3_Minoría", historicoMHI3);
                }
                const mayoritario = colorMasRepetido([2, 3, 4]);
                if (mayoritario === coloresDigitos[7]) {
                    historicoMHI3MAY.shift();
                    historicoMHI3MAY.push("D");
                    actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
                }
            }
            //MHI mayoria y minoria
            if (coloresDigitos[0] !== 'doji' && coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([0, 1, 2, 3, 4]);
                if (minoritario !== coloresDigitos[5] && minoritario !== coloresDigitos[6] && minoritario === coloresDigitos[7]) {
                    historicoMILLONMIN.shift();
                    historicoMILLONMIN.push("G2");
                    actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
                } else if (minoritario !== coloresDigitos[5] && minoritario !== coloresDigitos[6] && minoritario !== coloresDigitos[7]) {
                    historicoMILLONMIN.shift();
                    historicoMILLONMIN.push("L");
                    actualizarHistorico("Millón_Minoría", historicoMILLONMIN);
                }
                const mayoritario = colorMasRepetido([0, 1, 2, 3, 4]);
                if (mayoritario !== coloresDigitos[5] && mayoritario !== coloresDigitos[6] && mayoritario === coloresDigitos[7]) {
                    historicoMILLONMAY.shift();
                    historicoMILLONMAY.push("G2");
                    actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
                } else if (mayoritario !== coloresDigitos[5] && mayoritario !== coloresDigitos[6] && mayoritario !== coloresDigitos[7]) {
                    historicoMILLONMAY.shift();
                    historicoMILLONMAY.push("L");
                    actualizarHistorico("Millón_Mayoría", historicoMILLONMAY);
                }
            }
            //Mejor de 3
            if (coloresDigitos[1] === 'doji' || coloresDigitos[2] === 'doji' || coloresDigitos[3] === coloresDigitos == 'doji') {
                historicoMEJOR3.shift();
                historicoMEJOR3.push("E");
                actualizarHistorico("Mejor_de_3", historicoMEJOR3);
            } else {
                const mayoritario = colorMasRepetido([1, 2, 3]);
                if (mayoritario === coloresDigitos[7]) {
                    historicoMEJOR3.shift();
                    historicoMEJOR3.push("D");
                    actualizarHistorico("Mejor_de_3", historicoMEJOR3);
                }
            }
            // Analisis Patron Impar
            if (coloresDigitos[2] !== 'doji') {
                if (coloresDigitos[2] !== coloresDigitos[5] && coloresDigitos[2] !== coloresDigitos[7]) {
                    if (coloresDigitos[2] === 'green') {
                        getCelda('Patrón Impar', 3).style.backgroundColor = 'green';
                        getCelda('Patrón Impar', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('Patrón Impar', 3).style.backgroundColor = 'red';
                        getCelda('Patrón Impar', 6).style.backgroundColor = 'red';
                    }
                }
            }
            //Patron 23
            if (coloresDigitos[5] !== 'doji') {
                if (coloresDigitos[5] !== coloresDigitos[6] && coloresDigitos[5] === coloresDigitos[7]) {
                    historicoPADRON23.shift();
                    historicoPADRON23.push("G1");
                    actualizarHistorico("Patrón_23", historicoPADRON23);
                }
            }

        }

        function digito8(vela) {
            ultimaVela = coloresDigitos[8];
            //MHI Minoria y MHI Mayoria
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji') {
                if (coloresDigitos[7] === coloresDigitos[8]) {
                    const opuesto = coloresDigitos[7] === 'red' ? 'green' : 'red';
                    getCelda('MHI Minoría', 1).style.backgroundColor = opuesto;
                    getCelda('MHI Minoría', 4).style.backgroundColor = opuesto;
                    getCelda('MHI Mayoría', 1).style.backgroundColor = coloresDigitos[7];
                    getCelda('MHI Mayoría', 4).style.backgroundColor = coloresDigitos[7];
                } else {
                    getCelda('MHI Minoría', 1).style.backgroundColor = 'red';
                    getCelda('MHI Minoría', 4).style.backgroundColor = 'green';
                    getCelda('MHI Mayoría', 1).style.backgroundColor = 'green';
                    getCelda('MHI Mayoría', 4).style.backgroundColor = 'red';
                }
            }
            //Millon Minoria y Millon Mayoria
            if (coloresDigitos[5] !== 'doji' && coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji') {
                const minoritario = colorMenosRepetido([5, 6, 7, 8]);
                if (minoritario === 'empate') {
                    getCelda('Millón Minoría', 1).style.backgroundColor = 'red';
                    getCelda('Millón Minoría', 4).style.backgroundColor = 'green';
                    getCelda('Millón Mayoría', 1).style.backgroundColor = 'green';
                    getCelda('Millón Mayoría', 4).style.backgroundColor = 'red';
                }
                else if (minoritario === 'red') {
                    getCelda('Millón Minoría', 1).style.backgroundColor = 'red';
                    getCelda('Millón Minoría', 4).style.backgroundColor = 'red';
                    getCelda('Millón Mayoría', 1).style.backgroundColor = 'green';
                    getCelda('Millón Mayoría', 4).style.backgroundColor = 'green';
                }
                else {
                    getCelda('Millón Minoría', 1).style.backgroundColor = 'green';
                    getCelda('Millón Minoría', 4).style.backgroundColor = 'green';
                    getCelda('Millón Mayoría', 1).style.backgroundColor = 'red';
                    getCelda('Millón Mayoría', 4).style.backgroundColor = 'red';
                }
            }
            getCelda('MHI 3 Minoría', 3).style.backgroundColor = '';
            getCelda('MHI 3 Minoría', 6).style.backgroundColor = '';
            getCelda('MHI 3 Mayoría', 3).style.backgroundColor = '';
            getCelda('MHI 3 Mayoría', 6).style.backgroundColor = '';
            //Analasis para Torres Gemelas
            getCelda('Torres Gemelas', 1).style.backgroundColor = '';
            getCelda('Torres Gemelas', 4).style.backgroundColor = '';
            if (coloresDigitos[5] !== 'doji') {
                if (coloresDigitos[5] === 'green') {
                    getCelda('Torres Gemelas', 5).style.backgroundColor = coloresDigitos[5];
                } else {
                    getCelda('Torres Gemelas', 2).style.backgroundColor = coloresDigitos[5];
                }
            }
            //Analisis correspondiente a TRES MOSQUETEROS
            getCelda('Tres Mosqueteros', 2).style.backgroundColor = '';
            getCelda('Tres Mosqueteros', 5).style.backgroundColor = '';
            if (coloresDigitos[7] !== 'doji') {
                if (coloresDigitos[7] !== coloresDigitos[8]) {
                    if (coloresDigitos[7] === 'green') {
                        getCelda('Tres Mosqueteros', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('Tres Mosqueteros', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analisis correspondiente a TRES VECINOS
            getCelda('Tres Vecinos', 1).style.backgroundColor = '';
            getCelda('Tres Vecinos', 4).style.backgroundColor = '';
            if (coloresDigitos[8] !== 'doji') {
                if (coloresDigitos[8] === 'green') {
                    getCelda('Tres Vecinos', 5).style.backgroundColor = 'green';
                } else {
                    getCelda('Tres Vecinos', 2).style.backgroundColor = 'red';
                }
            }
            //Analisis Patron 3x1
            getCelda('Patron 3x1', 1).style.backgroundColor = '';
            getCelda('Patron 3x1', 4).style.backgroundColor = '';
            if (coloresDigitos[5] !== 'doji' && coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji') {    //Para si hay un doji no hacer nada
                const minoritario = colorMenosRepetido([5, 6, 7]);
                if (minoritario == 'green') {
                    getCelda('Patron 3x1', 5).style.backgroundColor = 'green';
                } else {
                    getCelda('Patron 3x1', 2).style.backgroundColor = 'red';
                }
            }
            // Analisis Patron Impar
            getCelda('Patrón Impar', 3).style.backgroundColor = '';
            getCelda('Patrón Impar', 6).style.backgroundColor = '';
            if (coloresDigitos[7] !== 'doji') {
                getCelda('Patrón Impar', 1).style.backgroundColor = coloresDigitos[7];
                getCelda('Patrón Impar', 4).style.backgroundColor = coloresDigitos[7];
            }
            //Analisis de las que pueden ganar en este digito:
            //MHI2 mayoria y minoria2
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario !== coloresDigitos[6] && minoritario !== coloresDigitos[7] && minoritario === coloresDigitos[8]) {
                    historicoMHI2.shift();
                    historicoMHI2.push("G2");
                    actualizarHistorico("MHI_2_Minoría", historicoMHI2);
                } else if (minoritario !== coloresDigitos[6] && minoritario !== coloresDigitos[7] && minoritario !== coloresDigitos[8]) {
                    historicoMHI2.shift();
                    historicoMHI2.push("L");
                    actualizarHistorico("MHI_2_Minoría", historicoMHI2);
                }
                const mayoritario = colorMasRepetido([2, 3, 4]);
                if (mayoritario !== coloresDigitos[6] && mayoritario !== coloresDigitos[7] && mayoritario === coloresDigitos[8]) {
                    historicoMHI2MAY.shift();
                    historicoMHI2MAY.push("G2");
                    actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
                } else if (mayoritario !== coloresDigitos[6] && mayoritario !== coloresDigitos[7] && mayoritario !== coloresDigitos[8]) {
                    historicoMHI2MAY.shift();
                    historicoMHI2MAY.push("L");
                    actualizarHistorico("MHI_2_Mayoría", historicoMHI2MAY);
                }
            }
            //MHI mayoria3 y minoria3
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario !== coloresDigitos[7] && minoritario === coloresDigitos[8]) {
                    historicoMHI3.shift();
                    historicoMHI3.push("G1");
                    actualizarHistorico("MHI_3_Minoría", historicoMHI3);
                }
                const mayoritario = colorMasRepetido([2, 3, 4]);
                if (mayoritario !== coloresDigitos[7] && mayoritario === coloresDigitos[8]) {
                    historicoMHI3MAY.shift();
                    historicoMHI3MAY.push("G1");
                    actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
                }
            }
            if (coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji') {
                const mayoritario = colorMasRepetido([1, 2, 3]);
                if (mayoritario !== coloresDigitos[7] && mayoritario === coloresDigitos[8]) {
                    historicoMEJOR3.shift();
                    historicoMEJOR3.push("G1");
                    actualizarHistorico("Mejor_de_3", historicoMEJOR3);
                }
            }
            //Tres Mosqueteros
            if (coloresDigitos[7] === 'doji') {
                historicoMOSQUETEROS.shift();
                historicoMOSQUETEROS.push("E");
                actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
            } else {
                if (coloresDigitos[7] === coloresDigitos[8]) {
                    historicoMOSQUETEROS.shift();
                    historicoMOSQUETEROS.push("D");
                    actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
                }
            }
            //Patron 23
            if (coloresDigitos[5] !== 'doji') {
                if (coloresDigitos[5] !== coloresDigitos[6] && coloresDigitos[5] !== coloresDigitos[7] && coloresDigitos[5] === coloresDigitos[8]) {
                    historicoPADRON23.shift();
                    historicoPADRON23.push("G2");
                    actualizarHistorico("Patrón_23", historicoPADRON23);
                } else if (coloresDigitos[5] !== coloresDigitos[6] && coloresDigitos[5] !== coloresDigitos[7] && coloresDigitos[5] !== coloresDigitos[8]) {
                    historicoPADRON23.shift();
                    historicoPADRON23.push("L");
                    actualizarHistorico("Patrón_23", historicoPADRON23);
                }
            }

        }

        function digito9(vela) {
            ultimaVela = coloresDigitos[9];
            //Analisis Correspondiente a MHMI Minoria MHI Mayoria
            ['MHI Minoría', 'MHI Mayoría', 'Millón Minoría', 'Millón Mayoría'].forEach(patron => {
                getCelda(patron, 1).style.backgroundColor = '';
                getCelda(patron, 4).style.backgroundColor = '';
            });
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario === 'red') {
                    getCelda('MHI Minoría', 2).style.backgroundColor = 'red';
                    getCelda('MHI Mayoría', 5).style.backgroundColor = 'green';
                } else if (minoritario === 'green') {
                    getCelda('MHI Minoría', 5).style.backgroundColor = 'green';
                    getCelda('MHI Mayoría', 2).style.backgroundColor = 'red';
                }
            }
            //Analisis Correspondiente a MHMillónMI Minoria
            if (coloresDigitos[5] !== 'doji' && coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {    //Para si hay un doji no hacer nada
                const minoritario = colorMenosRepetido([5, 6, 7, 8, 9]);
                if (minoritario === 'red') {
                    getCelda('Millón Minoría', 2).style.backgroundColor = 'red';
                    getCelda('Millón Mayoría', 5).style.backgroundColor = 'green';
                } else {
                    getCelda('Millón Minoría', 5).style.backgroundColor = 'green';
                    getCelda('Millón Mayoría', 2).style.backgroundColor = 'red';
                }
            }
            //Analisis Correspondiente a MMHI2 Minoria MHI2 Mayoria
            if (coloresDigitos[7] !== 'doji' && coloresDigitos[8] !== 'doji' && coloresDigitos[9] !== 'doji') {
                const minoritario = colorMenosRepetido([7, 8, 9]);
                if (minoritario === 'red') {
                    getCelda('MHI 2 Minoría', 1).style.backgroundColor = 'red';
                    getCelda('MHI 2 Minoría', 4).style.backgroundColor = 'red';
                    getCelda('MHI 2 Mayoría', 1).style.backgroundColor = 'green';
                    getCelda('MHI 2 Mayoría', 4).style.backgroundColor = 'green';
                } else if (minoritario === 'green') {
                    getCelda('MHI 2 Minoría', 1).style.backgroundColor = 'green';
                    getCelda('MHI 2 Minoría', 4).style.backgroundColor = 'green';
                    getCelda('MHI 2 Mayoría', 1).style.backgroundColor = 'red';
                    getCelda('MHI 2 Mayoría', 4).style.backgroundColor = 'red';
                }
            }
            //Analasis para Torres Gemelas
            getCelda('Torres Gemelas', 2).style.backgroundColor = '';
            getCelda('Torres Gemelas', 5).style.backgroundColor = '';
            if (coloresDigitos[5] !== 'doji') {
                if (coloresDigitos[5] !== coloresDigitos[9]) {
                    if (coloresDigitos[5] === 'green') {
                        getCelda('Torres Gemelas', 6).style.backgroundColor = coloresDigitos[0];
                    } else {
                        getCelda('Torres Gemelas', 3).style.backgroundColor = coloresDigitos[0];
                    }
                }
            }
            //Analisis correspondiente a TRES MOSQUETEROS
            getCelda('Tres Mosqueteros', 3).style.backgroundColor = '';
            getCelda('Tres Mosqueteros', 6).style.backgroundColor = '';
            //Analisis correspondiente a TRES VECINOS
            getCelda('Tres Vecinos', 2).style.backgroundColor = '';
            getCelda('Tres Vecinos', 5).style.backgroundColor = '';
            if (coloresDigitos[8] !== 'doji') {
                if (coloresDigitos[8] !== coloresDigitos[9]) {
                    if (coloresDigitos[8] === 'green') {
                        getCelda('Tres Vecinos', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('Tres Vecinos', 3).style.backgroundColor = 'red';
                    }
                }
            }
            //Analisis correspondiente a PATRON 23
            getCelda('Patrón 23', 1).style.backgroundColor = 'green';
            getCelda('Patrón 23', 4).style.backgroundColor = 'red';
            //Analisis Patron 3x1
            getCelda('Patron 3x1', 2).style.backgroundColor = '';
            getCelda('Patron 3x1', 5).style.backgroundColor = '';
            if (coloresDigitos[5] !== 'doji' && coloresDigitos[6] !== 'doji' && coloresDigitos[7] !== 'doji') {    //Para si hay un doji no hacer nada
                const minoritario = colorMenosRepetido([5, 6, 7]);
                if (minoritario !== coloresDigitos[4]) {
                    if (minoritario === 'green') {
                        getCelda('Patron 3x1', 6).style.backgroundColor = 'green';
                    } else {
                        getCelda('Patron 3x1', 3).style.backgroundColor = 'red';
                    }
                }
            }
            // Analisis Patron Impar
            getCelda('Patrón Impar', 1).style.backgroundColor = '';
            getCelda('Patrón Impar', 4).style.backgroundColor = '';

            //MHI2 mayoria y minoria2
            if (coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji' && coloresDigitos[4] !== 'doji') {
                const minoritario = colorMenosRepetido([2, 3, 4]);
                if (minoritario !== coloresDigitos[7] && minoritario !== coloresDigitos[8] && minoritario === coloresDigitos[9]) {
                    historicoMHI3.shift();
                    historicoMHI3.push("G2");
                    actualizarHistorico("MHI_3_Minoría", historicoMHI3);
                } else if (minoritario !== coloresDigitos[7] && minoritario !== coloresDigitos[8] && minoritario !== coloresDigitos[9]) {
                    historicoMHI3.shift();
                    historicoMHI3.push("L");
                    actualizarHistorico("MHI_3_Minoría", historicoMHI3);
                }
                const mayoritario = colorMasRepetido([2, 3, 4]);
                if (mayoritario !== coloresDigitos[7] && mayoritario !== coloresDigitos[8] && mayoritario === coloresDigitos[9]) {
                    historicoMHI3MAY.shift();
                    historicoMHI3MAY.push("G2");
                    actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
                } else if (mayoritario !== coloresDigitos[7] && mayoritario !== coloresDigitos[8] && mayoritario !== coloresDigitos[9]) {
                    historicoMHI3MAY.shift();
                    historicoMHI3MAY.push("L");
                    actualizarHistorico("MHI_3_Mayoría", historicoMHI3MAY);
                }
            }
            //Torres Gemelas
            if (coloresDigitos[5] === 'doji') {
                historicoTORRESGEMELAS.shift();
                historicoTORRESGEMELAS.push("E");
                actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
            } else {
                if (coloresDigitos[5] === coloresDigitos[9]) {
                    historicoTORRESGEMELAS.shift();
                    historicoTORRESGEMELAS.push("D");
                    actualizarHistorico("Torres_Gemelas", historicoTORRESGEMELAS);
                }
            }
            //Mejor de 3
            if (coloresDigitos[1] !== 'doji' && coloresDigitos[2] !== 'doji' && coloresDigitos[3] !== 'doji') {
                const mayoritario = colorMasRepetido([1, 2, 3]);
                if (mayoritario !== coloresDigitos[7] && mayoritario !== coloresDigitos[8] && mayoritario === coloresDigitos[9]) {
                    historicoMEJOR3.shift();
                    historicoMEJOR3.push("G2");
                    actualizarHistorico("Mejor_de_3", historicoMEJOR3);
                } else if (mayoritario !== coloresDigitos[7] && mayoritario !== coloresDigitos[8] && mayoritario !== coloresDigitos[9]) {
                    historicoMEJOR3.shift();
                    historicoMEJOR3.push("L");
                    actualizarHistorico("Mejor_de_3", historicoMEJOR3);
                }
            }
            //Tres mosqueteros
            if (coloresDigitos[7] !== 'doji') {
                if (coloresDigitos[7] !== coloresDigitos[8] && coloresDigitos[7] === coloresDigitos[9]) {
                    historicoMOSQUETEROS.shift();
                    historicoMOSQUETEROS.push("G1");
                    actualizarHistorico("Tres_Mosqueteros", historicoMOSQUETEROS);
                }
            }
            //Patron Impar
            if (coloresDigitos[2] !== 'doji') {
                if (coloresDigitos[2] !== coloresDigitos[5] && coloresDigitos[2] !== coloresDigitos[7] && coloresDigitos[2] === coloresDigitos[9]) {
                    historicoPATRONIMPAR.shift();
                    historicoPATRONIMPAR.push("G2");
                    actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
                } else if (coloresDigitos[2] !== coloresDigitos[5] && coloresDigitos[2] !== coloresDigitos[7] && coloresDigitos[2] !== coloresDigitos[9]) {
                    historicoPATRONIMPAR.shift();
                    historicoPATRONIMPAR.push("L");
                    actualizarHistorico("Patrón_Impar", historicoPATRONIMPAR);
                }
            }
            //Tres Vecinos
            if (coloresDigitos[8] === 'doji') {
                historicoTRESVECINOS.shift();
                historicoTRESVECINOS.push("E");
                actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
            } else {
                if (coloresDigitos[8] === coloresDigitos[9]) {
                    historicoTRESVECINOS.shift();
                    historicoTRESVECINOS.push("D");
                    actualizarHistorico("Tres_Vecinos", historicoTRESVECINOS);
                }
            }
            //Patron 3x1
            if (coloresDigitos[5] === 'doji' || coloresDigitos[6] === 'doji' || coloresDigitos[7] === coloresDigitos == 'doji') {
                historicoPATRON3X1.shift();
                historicoPATRON3X1.push("E");
                actualizarHistorico("Patron_3x1", historicoPATRON3X1);
            } else {
                const minoritario = colorMenosRepetido([5, 6, 7]);
                if (minoritario === coloresDigitos[9]) {
                    historicoPATRON3X1.shift();
                    historicoPATRON3X1.push("D");
                    actualizarHistorico("Patron_3x1", historicoPATRON3X1);
                }
            }
        }


    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const toggleSidebarBtn = document.getElementById('toggle-sidebar');
            const toggleRightBtn = document.getElementById('toggle-right-panel');
            const sidebar = document.querySelector('.sidebar');
            const rightPanel = document.querySelector('.right-panel');

            // Crear overlay
            const overlay = document.createElement('div');
            overlay.className = 'mobile-overlay';
            document.body.appendChild(overlay);

            // Crear botón de cerrar para sidebar
            const closeSidebarBtn = document.createElement('button');
            closeSidebarBtn.className = 'close-sidebar';
            closeSidebarBtn.innerHTML = '×';
            sidebar.appendChild(closeSidebarBtn);

            // Crear botón de cerrar para panel derecho
            const closeRightBtn = document.createElement('button');
            closeRightBtn.className = 'close-panel';
            closeRightBtn.innerHTML = '×';
            rightPanel.appendChild(closeRightBtn);

            // Funciones para sidebar
            function showSidebar() {
                sidebar.classList.add('show');
                overlay.classList.add('show');
                toggleSidebarBtn.classList.add('active');
                document.body.style.overflow = 'hidden';
            }

            function hideSidebar() {
                sidebar.classList.remove('show');
                overlay.classList.remove('show');
                toggleSidebarBtn.classList.remove('active');
                document.body.style.overflow = '';
            }

            // Funciones para panel derecho
            function showRightPanel() {
                rightPanel.classList.add('show');
                overlay.classList.add('show');
                toggleRightBtn.classList.add('active');
                document.body.style.overflow = 'hidden';
            }

            function hideRightPanel() {
                rightPanel.classList.remove('show');
                overlay.classList.remove('show');
                toggleRightBtn.classList.remove('active');
                document.body.style.overflow = '';
            }

            // Event listeners
            toggleSidebarBtn.addEventListener('click', function () {
                if (sidebar.classList.contains('show')) {
                    hideSidebar();
                } else {
                    hideRightPanel(); // Cerrar panel derecho si está abierto
                    showSidebar();
                }
            });

            toggleRightBtn.addEventListener('click', function () {
                if (rightPanel.classList.contains('show')) {
                    hideRightPanel();
                } else {
                    hideSidebar(); // Cerrar sidebar si está abierto
                    showRightPanel();
                }
            });

            // Cerrar con botones X
            closeSidebarBtn.addEventListener('click', hideSidebar);
            closeRightBtn.addEventListener('click', hideRightPanel);

            // Cerrar tocando overlay
            overlay.addEventListener('click', function () {
                hideSidebar();
                hideRightPanel();
            });

            // Cerrar con tecla Escape
            document.addEventListener('keydown', function (e) {
                if (e.key === 'Escape') {
                    hideSidebar();
                    hideRightPanel();
                }
            });
        });
    </script>

</body>

</html>





</body>

</html>